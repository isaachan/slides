<!DOCTYPE html>
<html class="client-nojs" lang="en" dir="ltr">
<head>
<meta charset="UTF-8"/>
<title>Scheme (programming language) - Wikipedia</title>
<script>document.documentElement.className = document.documentElement.className.replace( /(^|\s)client-nojs(\s|$)/, "$1client-js$2" );</script>
<script>(window.RLQ=window.RLQ||[]).push(function(){mw.config.set({"wgCanonicalNamespace":"","wgCanonicalSpecialPageName":false,"wgNamespaceNumber":0,"wgPageName":"Scheme_(programming_language)","wgTitle":"Scheme (programming language)","wgCurRevisionId":762638568,"wgRevisionId":762638568,"wgArticleId":28119,"wgIsArticle":true,"wgIsRedirect":false,"wgAction":"view","wgUserName":null,"wgUserGroups":["*"],"wgCategories":["CS1 maint: Multiple names: authors list","Pages using ISBN magic links","Pages using deprecated image syntax","Articles needing additional references from May 2013","All articles needing additional references","All articles with unsourced statements","Articles with unsourced statements from August 2013","Commons category with local link same as on Wikidata","Articles with DMOZ links","Academic programming languages","Articles with example Scheme code","Dynamically typed programming languages","Extensible syntax programming languages","Lisp programming language family","Multi-paradigm programming languages","Programming languages created in 1975","Scheme (programming language)"],"wgBreakFrames":false,"wgPageContentLanguage":"en","wgPageContentModel":"wikitext","wgSeparatorTransformTable":["",""],"wgDigitTransformTable":["",""],"wgDefaultDateFormat":"dmy","wgMonthNames":["","January","February","March","April","May","June","July","August","September","October","November","December"],"wgMonthNamesShort":["","Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"wgRelevantPageName":"Scheme_(programming_language)","wgRelevantArticleId":28119,"wgRequestId":"WJLsCQpAMFEAAJVpEaEAAAFR","wgIsProbablyEditable":true,"wgRestrictionEdit":[],"wgRestrictionMove":[],"wgFlaggedRevsParams":{"tags":{}},"wgStableRevisionId":null,"wgWikiEditorEnabledModules":{"toolbar":true,"dialogs":true,"preview":false,"publish":false},"wgBetaFeaturesFeatures":[],"wgMediaViewerOnClick":true,"wgMediaViewerEnabledByDefault":true,"wgVisualEditor":{"pageLanguageCode":"en","pageLanguageDir":"ltr","usePageImages":true,"usePageDescriptions":true},"wgPreferredVariant":"en","wgMFDisplayWikibaseDescriptions":{"search":true,"nearby":true,"watchlist":true,"tagline":true},"wgRelatedArticles":null,"wgRelatedArticlesUseCirrusSearch":true,"wgRelatedArticlesOnlyUseCirrusSearch":false,"wgULSCurrentAutonym":"English","wgNoticeProject":"wikipedia","wgCentralNoticeCookiesToDelete":[],"wgCentralNoticeCategoriesUsingLegacy":["Fundraising","fundraising"],"wgCategoryTreePageCategoryOptions":"{\"mode\":0,\"hideprefix\":20,\"showcount\":true,\"namespaces\":false}","wgWikibaseItemId":"Q187560","wgCentralAuthMobileDomain":false,"wgVisualEditorToolbarScrollOffset":0,"wgEditSubmitButtonLabelPublish":false});mw.loader.state({"ext.globalCssJs.user.styles":"ready","ext.globalCssJs.site.styles":"ready","site.styles":"ready","noscript":"ready","user.styles":"ready","user":"ready","user.options":"loading","user.tokens":"loading","ext.math.styles":"ready","ext.cite.styles":"ready","ext.pygments":"ready","wikibase.client.init":"ready","ext.visualEditor.desktopArticleTarget.noscript":"ready","ext.uls.interlanguage":"ready","ext.wikimediaBadges":"ready","mediawiki.legacy.shared":"ready","mediawiki.legacy.commonPrint":"ready","mediawiki.sectionAnchor":"ready","mediawiki.skinning.interface":"ready","skins.vector.styles":"ready","ext.globalCssJs.user":"ready","ext.globalCssJs.site":"ready"});mw.loader.implement("user.options@0j3lz3q",function($,jQuery,require,module){mw.user.options.set({"variant":"en"});});mw.loader.implement("user.tokens@1dqfd7l",function ( $, jQuery, require, module ) {
mw.user.tokens.set({"editToken":"+\\","patrolToken":"+\\","watchToken":"+\\","csrfToken":"+\\"});/*@nomin*/;

});mw.loader.load(["ext.cite.a11y","mediawiki.toc","mediawiki.action.view.postEdit","site","mediawiki.page.startup","mediawiki.user","mediawiki.hidpi","mediawiki.page.ready","mediawiki.legacy.wikibits","mediawiki.searchSuggest","ext.gadget.teahouse","ext.gadget.ReferenceTooltips","ext.gadget.watchlist-notice","ext.gadget.DRN-wizard","ext.gadget.charinsert","ext.gadget.refToolbar","ext.gadget.extra-toolbar-buttons","ext.gadget.switcher","ext.gadget.featured-articles-links","ext.centralauth.centralautologin","mmv.head","mmv.bootstrap.autostart","ext.visualEditor.desktopArticleTarget.init","ext.visualEditor.targetLoader","ext.eventLogging.subscriber","ext.wikimediaEvents","ext.navigationTiming","ext.uls.eventlogger","ext.uls.init","ext.uls.interface","ext.quicksurveys.init","ext.centralNotice.geoIP","ext.centralNotice.startUp","skins.vector.js"]);});</script>
<link rel="stylesheet" href="/w/load.php?debug=false&amp;lang=en&amp;modules=ext.cite.styles%7Cext.math.scripts%2Cstyles%7Cext.pygments%2CwikimediaBadges%7Cext.uls.interlanguage%7Cext.visualEditor.desktopArticleTarget.noscript%7Cmediawiki.legacy.commonPrint%2Cshared%7Cmediawiki.sectionAnchor%7Cmediawiki.skinning.interface%7Cskins.vector.styles%7Cwikibase.client.init&amp;only=styles&amp;skin=vector"/>
<script async="" src="/w/load.php?debug=false&amp;lang=en&amp;modules=startup&amp;only=scripts&amp;skin=vector"></script>
<meta name="ResourceLoaderDynamicStyles" content=""/>
<link rel="stylesheet" href="/w/load.php?debug=false&amp;lang=en&amp;modules=site.styles&amp;only=styles&amp;skin=vector"/>
<meta name="generator" content="MediaWiki 1.29.0-wmf.9"/>
<meta name="referrer" content="origin-when-cross-origin"/>
<link rel="alternate" href="android-app://org.wikipedia/http/en.m.wikipedia.org/wiki/Scheme_(programming_language)"/>
<link rel="alternate" type="application/x-wiki" title="Edit this page" href="/w/index.php?title=Scheme_(programming_language)&amp;action=edit"/>
<link rel="edit" title="Edit this page" href="/w/index.php?title=Scheme_(programming_language)&amp;action=edit"/>
<link rel="apple-touch-icon" href="/static/apple-touch/wikipedia.png"/>
<link rel="shortcut icon" href="/static/favicon/wikipedia.ico"/>
<link rel="search" type="application/opensearchdescription+xml" href="/w/opensearch_desc.php" title="Wikipedia (en)"/>
<link rel="EditURI" type="application/rsd+xml" href="//en.wikipedia.org/w/api.php?action=rsd"/>
<link rel="copyright" href="//creativecommons.org/licenses/by-sa/3.0/"/>
<link rel="canonical" href="https://en.wikipedia.org/wiki/Scheme_(programming_language)"/>
<link rel="dns-prefetch" href="//login.wikimedia.org"/>
<link rel="dns-prefetch" href="//meta.wikimedia.org" />
</head>
<body class="mediawiki ltr sitedir-ltr mw-hide-empty-elt ns-0 ns-subject page-Scheme_programming_language rootpage-Scheme_programming_language skin-vector action-view">		<div id="mw-page-base" class="noprint"></div>
		<div id="mw-head-base" class="noprint"></div>
		<div id="content" class="mw-body" role="main">
			<a id="top"></a>

							<div id="siteNotice"><!-- CentralNotice --></div>
						<div class="mw-indicators">
</div>
			<h1 id="firstHeading" class="firstHeading" lang="en">Scheme (programming language)</h1>
									<div id="bodyContent" class="mw-body-content">
									<div id="siteSub">From Wikipedia, the free encyclopedia</div>
								<div id="contentSub"></div>
												<div id="jump-to-nav" class="mw-jump">
					Jump to:					<a href="#mw-head">navigation</a>, 					<a href="#p-search">search</a>
				</div>
				<div id="mw-content-text" lang="en" dir="ltr" class="mw-content-ltr"><script>function mfTempOpenSection(id){var block=document.getElementById("mf-section-"+id);block.className+=" open-block";block.previousSibling.className+=" open-block";}</script><table class="infobox vevent" style="width:22em">
<caption class="summary">Scheme</caption>
<tr>
<td colspan="2" style="text-align:center"><a href="/wiki/File:Lambda_lc.svg" class="image"><img alt="Lambda lc.svg" src="//upload.wikimedia.org/wikipedia/commons/thumb/3/39/Lambda_lc.svg/100px-Lambda_lc.svg.png" width="100" height="100" srcset="//upload.wikimedia.org/wikipedia/commons/thumb/3/39/Lambda_lc.svg/150px-Lambda_lc.svg.png 1.5x, //upload.wikimedia.org/wikipedia/commons/thumb/3/39/Lambda_lc.svg/200px-Lambda_lc.svg.png 2x" data-file-width="375" data-file-height="375" /></a></td>
</tr>
<tr>
<th scope="row"><a href="/wiki/Programming_paradigm" title="Programming paradigm">Paradigms</a></th>
<td>
<div class="hlist">
<ul>
<li><a href="/wiki/Multi-paradigm_programming_language" class="mw-redirect" title="Multi-paradigm programming language">Multi-paradigm</a>&#160;(<a href="/wiki/Functional_programming" title="Functional programming">functional</a></li>
<li><a href="/wiki/Procedural_programming" title="Procedural programming">procedural</a></li>
<li><a href="/wiki/Metaprogramming" title="Metaprogramming">meta</a>)</li>
</ul>
</div>
</td>
</tr>
<tr>
<th scope="row"><a href="/wiki/Software_design" title="Software design">Designed&#160;by</a></th>
<td><a href="/wiki/Guy_L._Steele" class="mw-redirect" title="Guy L. Steele">Guy L. Steele</a><br />
<a href="/wiki/Gerald_Jay_Sussman" title="Gerald Jay Sussman">Gerald Jay Sussman</a></td>
</tr>
<tr>
<th scope="row">First&#160;appeared</th>
<td>1970<span class="noprint">; 47&#160;years ago</span><span style="display:none">&#160;(<span class="bday dtstart published updated">1970</span>)</span></td>
</tr>
<tr>
<td colspan="2" style="text-align:center"></td>
</tr>
<tr>
<th scope="row" style="white-space: nowrap;"><a href="/wiki/Software_release_life_cycle" title="Software release life cycle">Stable release</a></th>
<td>
<div style="margin:0px;">R7RS (ratified standard) / 2013<span class="noprint">; 4&#160;years ago</span><span style="display:none">&#160;(<span class="bday dtstart published updated">2013</span>)</span></div>
</td>
</tr>
<tr>
<th scope="row"><a href="/wiki/Type_system" title="Type system">Typing discipline</a></th>
<td>
<div class="hlist">
<ul>
<li><a href="/wiki/Strong_typing" class="mw-redirect" title="Strong typing">Strong</a></li>
<li><a href="/wiki/Dynamic_typing" class="mw-redirect" title="Dynamic typing">Dynamic</a></li>
</ul>
</div>
</td>
</tr>
<tr>
<th scope="row"><a href="/wiki/Scope_(computer_science)" title="Scope (computer science)">Scope</a></th>
<td>lexical</td>
</tr>
<tr>
<th scope="row"><a href="/wiki/Filename_extension" title="Filename extension">Filename extensions</a></th>
<td>.scm &#160; .ss</td>
</tr>
<tr>
<th scope="row">Website</th>
<td><span class="url"><a rel="nofollow" class="external text" href="http://www.scheme-reports.org/">www<wbr />.scheme-reports<wbr />.org</a></span></td>
</tr>
<tr>
<th colspan="2" style="text-align:center;background-color: #eee;">Major <a href="/wiki/Programming_language_implementation" title="Programming language implementation">implementations</a></th>
</tr>
<tr>
<td colspan="2" style="text-align:center">Many<br />
(see <a href="/wiki/Category:Scheme_(programming_language)_implementations" title="Category:Scheme (programming language) implementations">Category:Scheme (programming<br />
language) implementations</a>)</td>
</tr>
<tr>
<th colspan="2" style="text-align:center;background-color: #eee;"><a href="/wiki/Dialect_(computing)" title="Dialect (computing)">Dialects</a></th>
</tr>
<tr>
<td colspan="2" style="text-align:center"><a href="/wiki/T_(programming_language)" title="T (programming language)">T</a></td>
</tr>
<tr>
<th colspan="2" style="text-align:center;background-color: #eee;">Influenced by</th>
</tr>
<tr>
<td colspan="2" style="text-align:center">
<div class="hlist">
<ul>
<li><a href="/wiki/Lisp_programming_language" class="mw-redirect" title="Lisp programming language">Lisp</a></li>
<li><a href="/wiki/ALGOL" title="ALGOL">ALGOL</a></li>
<li><a href="/wiki/MDL_(programming_language)" title="MDL (programming language)">MDL</a></li>
</ul>
</div>
</td>
</tr>
<tr>
<th colspan="2" style="text-align:center;background-color: #eee;">Influenced</th>
</tr>
<tr>
<td colspan="2" style="text-align:center">
<div class="hlist">
<ul>
<li><a href="/wiki/Clojure" title="Clojure">Clojure</a></li>
<li><a href="/wiki/Common_Lisp" title="Common Lisp">Common Lisp</a></li>
<li><a href="/wiki/Dylan_(programming_language)" title="Dylan (programming language)">Dylan</a></li>
<li><a href="/wiki/EuLisp" title="EuLisp">EuLisp</a></li>
<li><a href="/wiki/Haskell_(programming_language)" title="Haskell (programming language)">Haskell</a></li>
<li><a href="/wiki/Hop_(software)" title="Hop (software)">Hop</a></li>
<li><a href="/wiki/JavaScript" title="JavaScript">JavaScript</a></li>
<li><a href="/wiki/Julia_(programming_language)" title="Julia (programming language)">Julia</a></li>
<li><a href="/wiki/Lua_(programming_language)" title="Lua (programming language)">Lua</a></li>
<li><a href="/wiki/R_(programming_language)" title="R (programming language)">R</a></li>
<li><a href="/wiki/S_(programming_language)" title="S (programming language)">S</a></li>
<li><a href="/wiki/Racket_(programming_language)" title="Racket (programming language)">Racket</a></li>
<li><a href="/wiki/Ruby_(programming_language)" title="Ruby (programming language)">Ruby</a></li>
<li><a href="/wiki/Rust_(programming_language)" title="Rust (programming language)">Rust</a></li>
<li><a href="/wiki/Scala_(programming_language)" title="Scala (programming language)">Scala</a></li>
</ul>
</div>
</td>
</tr>
<tr>
<td colspan="2" class="hlist" style="text-align:center;border-top: 1px solid #aaa; padding-top: 3px;">
<ul>
<li><a href="/wiki/File:Wikibooks-logo-en-noslogan.svg" class="image"><img alt="" src="//upload.wikimedia.org/wikipedia/commons/thumb/d/df/Wikibooks-logo-en-noslogan.svg/16px-Wikibooks-logo-en-noslogan.svg.png" width="16" height="16" class="noviewer" srcset="//upload.wikimedia.org/wikipedia/commons/thumb/d/df/Wikibooks-logo-en-noslogan.svg/24px-Wikibooks-logo-en-noslogan.svg.png 1.5x, //upload.wikimedia.org/wikipedia/commons/thumb/d/df/Wikibooks-logo-en-noslogan.svg/32px-Wikibooks-logo-en-noslogan.svg.png 2x" data-file-width="400" data-file-height="400" /></a> <a href="https://en.wikibooks.org/wiki/Scheme" class="extiw" title="wikibooks:Scheme">Scheme</a> at Wikibooks</li>
</ul>
</td>
</tr>
</table>
<p><b>Scheme</b> is a <a href="/wiki/Functional_programming_language" class="mw-redirect" title="Functional programming language">functional programming language</a> and one of the two main <a href="/wiki/Programming_language_dialect" class="mw-redirect" title="Programming language dialect">dialects</a> of the programming language <a href="/wiki/Lisp_programming_language" class="mw-redirect" title="Lisp programming language">Lisp</a>. Unlike <a href="/wiki/Common_Lisp" title="Common Lisp">Common Lisp</a>, the other main dialect, Scheme follows a <a href="/wiki/Minimalism_(computing)" title="Minimalism (computing)">minimalist</a> design philosophy specifying a small standard core with powerful tools for language extension.</p>
<p>Scheme was created during the 1970s at the <a href="/wiki/MIT_Computer_Science_and_Artificial_Intelligence_Laboratory" title="MIT Computer Science and Artificial Intelligence Laboratory">MIT AI Lab</a> and released by its developers, <a href="/wiki/Guy_L._Steele" class="mw-redirect" title="Guy L. Steele">Guy L. Steele</a> and <a href="/wiki/Gerald_Jay_Sussman" title="Gerald Jay Sussman">Gerald Jay Sussman</a>, via a series of memos now known as the <a href="/wiki/Lambda_Papers" class="mw-redirect" title="Lambda Papers">Lambda Papers</a>. It was the first dialect of Lisp to choose <a href="/wiki/Scope_(computer_science)#Lexical_scoping_and_dynamic_scoping" title="Scope (computer science)">lexical scope</a> and the first to require implementations to perform <a href="/wiki/Tail-call_optimization" class="mw-redirect" title="Tail-call optimization">tail-call optimization</a>, giving stronger support for functional programming and associated techniques such as recursive algorithms. It was also one of the first programming languages to support <a href="/wiki/First-class_object" class="mw-redirect" title="First-class object">first-class</a> <a href="/wiki/Continuation" title="Continuation">continuations</a>. It had a significant influence on the effort that led to the development of <a href="/wiki/Common_Lisp" title="Common Lisp">Common Lisp</a>.<sup id="cite_ref-cl_steele_1-0" class="reference"><a href="#cite_note-cl_steele-1">[1]</a></sup></p>
<p>The Scheme language is standardized in the official <a href="/wiki/Institute_of_Electrical_and_Electronics_Engineers" title="Institute of Electrical and Electronics Engineers">IEEE</a> standard<sup id="cite_ref-ieee1178_2-0" class="reference"><a href="#cite_note-ieee1178-2">[2]</a></sup> and a <i>de facto</i> standard called the <i>Revised<span style="padding-left:0.2em;"><sup>n</sup></span> Report on the Algorithmic Language Scheme</i> (R<i>n</i>RS). The most widely implemented standard is R5RS (1998);<sup id="cite_ref-r5rs_3-0" class="reference"><a href="#cite_note-r5rs-3">[3]</a></sup> a new standard, R6RS,<sup id="cite_ref-r6rs_4-0" class="reference"><a href="#cite_note-r6rs-4">[4]</a></sup> was ratified in 2007.<sup id="cite_ref-5" class="reference"><a href="#cite_note-5">[5]</a></sup> Scheme has a diverse user base due to its compactness and elegance, but its minimalist philosophy has also caused wide divergence between practical implementations, so much that the Scheme Steering Committee calls it "the world's most unportable programming language" and "a <i>family</i> of dialects" rather than a single language.<sup id="cite_ref-position_paper_6-0" class="reference"><a href="#cite_note-position_paper-6">[6]</a></sup></p>
<p></p>
<div id="toc" class="toc">
<div id="toctitle">
<h2>Contents</h2>
</div>
<ul>
<li class="toclevel-1 tocsection-1"><a href="#History"><span class="tocnumber">1</span> <span class="toctext">History</span></a>
<ul>
<li class="toclevel-2 tocsection-2"><a href="#Origins"><span class="tocnumber">1.1</span> <span class="toctext">Origins</span></a></li>
<li class="toclevel-2 tocsection-3"><a href="#R6RS"><span class="tocnumber">1.2</span> <span class="toctext">R6RS</span></a></li>
<li class="toclevel-2 tocsection-4"><a href="#R7RS"><span class="tocnumber">1.3</span> <span class="toctext">R7RS</span></a></li>
</ul>
</li>
<li class="toclevel-1 tocsection-5"><a href="#Distinguishing_features"><span class="tocnumber">2</span> <span class="toctext">Distinguishing features</span></a>
<ul>
<li class="toclevel-2 tocsection-6"><a href="#Fundamental_design_features"><span class="tocnumber">2.1</span> <span class="toctext">Fundamental design features</span></a>
<ul>
<li class="toclevel-3 tocsection-7"><a href="#Minimalism"><span class="tocnumber">2.1.1</span> <span class="toctext">Minimalism</span></a></li>
<li class="toclevel-3 tocsection-8"><a href="#Lexical_scope"><span class="tocnumber">2.1.2</span> <span class="toctext">Lexical scope</span></a></li>
<li class="toclevel-3 tocsection-9"><a href="#Lambda_calculus"><span class="tocnumber">2.1.3</span> <span class="toctext">Lambda calculus</span></a></li>
<li class="toclevel-3 tocsection-10"><a href="#Block_structure"><span class="tocnumber">2.1.4</span> <span class="toctext">Block structure</span></a></li>
<li class="toclevel-3 tocsection-11"><a href="#Proper_tail_recursion"><span class="tocnumber">2.1.5</span> <span class="toctext">Proper tail recursion</span></a></li>
<li class="toclevel-3 tocsection-12"><a href="#First-class_continuations"><span class="tocnumber">2.1.6</span> <span class="toctext">First-class continuations</span></a></li>
<li class="toclevel-3 tocsection-13"><a href="#Shared_namespace_for_procedures_and_variables"><span class="tocnumber">2.1.7</span> <span class="toctext">Shared namespace for procedures and variables</span></a></li>
</ul>
</li>
<li class="toclevel-2 tocsection-14"><a href="#Implementation_standards"><span class="tocnumber">2.2</span> <span class="toctext">Implementation standards</span></a>
<ul>
<li class="toclevel-3 tocsection-15"><a href="#Numerical_tower"><span class="tocnumber">2.2.1</span> <span class="toctext">Numerical tower</span></a></li>
<li class="toclevel-3 tocsection-16"><a href="#Delayed_evaluation"><span class="tocnumber">2.2.2</span> <span class="toctext">Delayed evaluation</span></a></li>
<li class="toclevel-3 tocsection-17"><a href="#Order_of_evaluation_of_procedure_arguments"><span class="tocnumber">2.2.3</span> <span class="toctext">Order of evaluation of procedure arguments</span></a></li>
<li class="toclevel-3 tocsection-18"><a href="#Hygienic_macros"><span class="tocnumber">2.2.4</span> <span class="toctext">Hygienic macros</span></a></li>
<li class="toclevel-3 tocsection-19"><a href="#Environments_and_eval"><span class="tocnumber">2.2.5</span> <span class="toctext">Environments and eval</span></a></li>
<li class="toclevel-3 tocsection-20"><a href="#Treatment_of_non-boolean_values_in_boolean_expressions"><span class="tocnumber">2.2.6</span> <span class="toctext">Treatment of non-boolean values in boolean expressions</span></a></li>
<li class="toclevel-3 tocsection-21"><a href="#Disjointness_of_primitive_datatypes"><span class="tocnumber">2.2.7</span> <span class="toctext">Disjointness of primitive datatypes</span></a></li>
<li class="toclevel-3 tocsection-22"><a href="#Equivalence_predicates"><span class="tocnumber">2.2.8</span> <span class="toctext">Equivalence predicates</span></a></li>
<li class="toclevel-3 tocsection-23"><a href="#Comments"><span class="tocnumber">2.2.9</span> <span class="toctext">Comments</span></a></li>
<li class="toclevel-3 tocsection-24"><a href="#Input.2Foutput"><span class="tocnumber">2.2.10</span> <span class="toctext">Input/output</span></a></li>
<li class="toclevel-3 tocsection-25"><a href="#Redefinition_of_standard_procedures"><span class="tocnumber">2.2.11</span> <span class="toctext">Redefinition of standard procedures</span></a></li>
</ul>
</li>
<li class="toclevel-2 tocsection-26"><a href="#Nomenclature_and_naming_conventions"><span class="tocnumber">2.3</span> <span class="toctext">Nomenclature and naming conventions</span></a></li>
</ul>
</li>
<li class="toclevel-1 tocsection-27"><a href="#Review_of_standard_forms_and_procedures"><span class="tocnumber">3</span> <span class="toctext">Review of standard forms and procedures</span></a>
<ul>
<li class="toclevel-2 tocsection-28"><a href="#Standard_forms"><span class="tocnumber">3.1</span> <span class="toctext">Standard forms</span></a></li>
<li class="toclevel-2 tocsection-29"><a href="#Standard_procedures"><span class="tocnumber">3.2</span> <span class="toctext">Standard procedures</span></a></li>
</ul>
</li>
<li class="toclevel-1 tocsection-30"><a href="#Scheme_Requests_for_Implementation"><span class="tocnumber">4</span> <span class="toctext">Scheme Requests for Implementation</span></a></li>
<li class="toclevel-1 tocsection-31"><a href="#Implementations"><span class="tocnumber">5</span> <span class="toctext">Implementations</span></a></li>
<li class="toclevel-1 tocsection-32"><a href="#Usage"><span class="tocnumber">6</span> <span class="toctext">Usage</span></a></li>
<li class="toclevel-1 tocsection-33"><a href="#See_also"><span class="tocnumber">7</span> <span class="toctext">See also</span></a></li>
<li class="toclevel-1 tocsection-34"><a href="#References"><span class="tocnumber">8</span> <span class="toctext">References</span></a></li>
<li class="toclevel-1 tocsection-35"><a href="#Further_reading"><span class="tocnumber">9</span> <span class="toctext">Further reading</span></a></li>
<li class="toclevel-1 tocsection-36"><a href="#External_links"><span class="tocnumber">10</span> <span class="toctext">External links</span></a></li>
</ul>
</div>
<p></p>
<h2><span class="mw-headline" id="History">History</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/w/index.php?title=Scheme_(programming_language)&amp;action=edit&amp;section=1" title="Edit section: History">edit</a><span class="mw-editsection-bracket">]</span></span></h2>
<div role="note" class="hatnote">Main article: <a href="/wiki/History_of_the_Scheme_programming_language" title="History of the Scheme programming language">History of the Scheme programming language</a></div>
<h3><span class="mw-headline" id="Origins">Origins</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/w/index.php?title=Scheme_(programming_language)&amp;action=edit&amp;section=2" title="Edit section: Origins">edit</a><span class="mw-editsection-bracket">]</span></span></h3>
<p>Scheme started in the 1970s as an attempt to understand <a href="/wiki/Carl_Hewitt" title="Carl Hewitt">Carl Hewitt</a>'s <a href="/wiki/Actor_model" title="Actor model">Actor model</a>, for which purpose Steele and Sussman wrote a "tiny Lisp interpreter" using <a href="/wiki/Maclisp" title="Maclisp">Maclisp</a> and then "added mechanisms for creating actors and sending messages."<sup id="cite_ref-revisited_7-0" class="reference"><a href="#cite_note-revisited-7">[7]</a></sup> Scheme was originally called "Schemer", in the tradition of other <a href="/wiki/Lisp_(programming_language)" title="Lisp (programming language)">Lisp</a>-derived languages like <a href="/wiki/Planner_(programming_language)" title="Planner (programming language)">Planner</a> or <i>Conniver</i>. The current name resulted from the authors' use of the <a href="/wiki/Incompatible_Timesharing_System" title="Incompatible Timesharing System">ITS operating system</a>, which limited filenames to two components of at most six characters each. Currently, "Schemer" is commonly used to refer to a Scheme programmer.</p>
<h3><span class="mw-headline" id="R6RS">R6RS</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/w/index.php?title=Scheme_(programming_language)&amp;action=edit&amp;section=3" title="Edit section: R6RS">edit</a><span class="mw-editsection-bracket">]</span></span></h3>
<p>A new language standardization process began at the 2003 Scheme workshop, with the goal of producing an R6RS standard in 2006. This process broke with the earlier R<i>n</i>RS approach of unanimity.</p>
<p>R6RS features a standard module system, allowing a split between the core language and libraries. A number of drafts of the R6RS specification were released, the final version being R5.97RS. A successful vote resulted in the ratification of the new standard, announced on August 28, 2007.<sup id="cite_ref-r6rs_4-1" class="reference"><a href="#cite_note-r6rs-4">[4]</a></sup></p>
<p>Currently the newest releases of various Scheme implementations, such as <a href="/wiki/Chez_Scheme" title="Chez Scheme">Chez Scheme</a>, <a href="/wiki/Racket_(programming_language)" title="Racket (programming language)">Racket</a>, <a href="/wiki/Ikarus_(Scheme_implementation)" title="Ikarus (Scheme implementation)">Ikarus</a>, <a href="/wiki/Larceny_(Scheme_implementation)" title="Larceny (Scheme implementation)">Larceny</a> and <a href="/wiki/Ypsilon_(Scheme_implementation)" title="Ypsilon (Scheme implementation)">Ypsilon</a>, support the R6RS standard. There is a portable reference implementation of the proposed implicitly phased libraries for R6RS, called psyntax, which loads and bootstraps itself properly on various older Scheme implementations.<sup id="cite_ref-psyntax_8-0" class="reference"><a href="#cite_note-psyntax-8">[8]</a></sup></p>
<p>R6RS introduces numerous significant changes to the language.<sup id="cite_ref-r6rs_Language_changes_9-0" class="reference"><a href="#cite_note-r6rs_Language_changes-9">[9]</a></sup> The source code is now specified in <a href="/wiki/Unicode" title="Unicode">Unicode</a>, and a large subset of Unicode characters may now appear in Scheme symbols and <a href="/wiki/Identifier" title="Identifier">identifiers</a>, and there are other minor changes to the lexical rules. Character data is also now specified in Unicode. Many standard procedures have been moved to the new standard libraries, which themselves form a large expansion of the standard, containing procedures and syntactic forms that were formerly not part of the standard. A new module system has been introduced, and systems for exception handling are now standardized. Syntax-rules has been replaced with a more expressive syntactic abstraction facility (syntax-case) which allows the use of all of Scheme at macro expansion time. Compliant implementations are now <i>required</i> to support Scheme's full numeric tower, and the semantics of numbers have been expanded, mainly in the direction of support for the <a href="/wiki/IEEE_754-1985" title="IEEE 754-1985">IEEE 754</a> standard for floating point numerical representation.</p>
<h3><span class="mw-headline" id="R7RS">R7RS</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/w/index.php?title=Scheme_(programming_language)&amp;action=edit&amp;section=4" title="Edit section: R7RS">edit</a><span class="mw-editsection-bracket">]</span></span></h3>
<p>The R6RS standard has caused controversy because it is seen to have departed from the minimalist philosophy.<sup id="cite_ref-r6rs_electorate_10-0" class="reference"><a href="#cite_note-r6rs_electorate-10">[10]</a></sup><sup id="cite_ref-r6rs_feeley_11-0" class="reference"><a href="#cite_note-r6rs_feeley-11">[11]</a></sup> In August 2009, the Scheme Steering Committee which oversees the standardization process announced its intention to recommend splitting Scheme into two languages: a large modern programming language for programmers, and small version, a subset of the large version retaining the minimalism praised by educators and casual implementors;<sup id="cite_ref-position_paper_6-1" class="reference"><a href="#cite_note-position_paper-6">[6]</a></sup> two working groups were created to work on these two new versions of Scheme. The <a rel="nofollow" class="external text" href="http://www.scheme-reports.org/">Scheme Reports Process</a> site has links to the working groups charters, public discussions and issue tracking system.</p>
<p>The ninth draft of R7RS (small language) was made available on April 15, 2013.<sup id="cite_ref-r7rs-draft-9_12-0" class="reference"><a href="#cite_note-r7rs-draft-9-12">[12]</a></sup> A vote ratifying this draft closed on May 20, 2013,<sup id="cite_ref-r7rs_clinger_13-0" class="reference"><a href="#cite_note-r7rs_clinger-13">[13]</a></sup> and the final report has been available since August 6, 2013, that describes the “small” language of that effort: therefore it cannot be considered in isolation as the successor to R6RS."<sup id="cite_ref-r7rs_14-0" class="reference"><a href="#cite_note-r7rs-14">[14]</a></sup></p>
<h2><span class="mw-headline" id="Distinguishing_features">Distinguishing features</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/w/index.php?title=Scheme_(programming_language)&amp;action=edit&amp;section=5" title="Edit section: Distinguishing features">edit</a><span class="mw-editsection-bracket">]</span></span></h2>
<div role="note" class="hatnote">See also: <a href="/wiki/Lisp_(programming_language)" title="Lisp (programming language)">Lisp (programming language)</a></div>
<p>Scheme is primarily a <a href="/wiki/Functional_programming" title="Functional programming">functional</a> programming language. It shares many characteristics with other members of the Lisp programming language family. Scheme's very simple syntax is based on <a href="/wiki/S-expression" title="S-expression">s-expressions</a>, parenthesized lists in which a prefix operator is followed by its arguments. Scheme programs thus consist of sequences of nested lists. Lists are also the main data structure in Scheme, leading to a close equivalence between source code and data formats (<a href="/wiki/Homoiconicity" title="Homoiconicity">homoiconicity</a>). Scheme programs can easily create and evaluate pieces of Scheme code dynamically.</p>
<p>The reliance on lists as data structures is shared by all Lisp dialects. Scheme inherits a rich set of <a href="/wiki/List_(computing)" class="mw-redirect" title="List (computing)">list-processing</a> primitives such as <a href="/wiki/Cons" title="Cons"><code>cons</code></a>, <a href="/wiki/CAR_and_CDR" title="CAR and CDR"><code>car</code> and <code>cdr</code></a> from its Lisp progenitors. Scheme uses strictly but <a href="/wiki/Type_system" title="Type system">dynamically typed variables</a> and supports <a href="/wiki/First-class_function" title="First-class function">first class procedures</a>. Thus, procedures can be assigned as values to variables or passed as arguments to procedures.</p>
<p>This section concentrates mainly on innovative features of the language, including those features that distinguish Scheme from other Lisps. Unless stated otherwise, descriptions of features relate to the R5RS standard.</p>
<p><i>In examples provided in this section, the notation "===&gt; result" is used to indicate the result of evaluating the expression on the immediately preceding line. This is the same convention used in R5RS.</i></p>
<h3><span class="mw-headline" id="Fundamental_design_features">Fundamental design features</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/w/index.php?title=Scheme_(programming_language)&amp;action=edit&amp;section=6" title="Edit section: Fundamental design features">edit</a><span class="mw-editsection-bracket">]</span></span></h3>
<p>This subsection describes those features of Scheme that have distinguished it from other programming languages from its earliest days. These are the aspects of Scheme that most strongly influence any product of the Scheme language, and they are the aspects that all versions of the Scheme programming language, from 1973 onward, share.</p>
<h4><span class="mw-headline" id="Minimalism">Minimalism</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/w/index.php?title=Scheme_(programming_language)&amp;action=edit&amp;section=7" title="Edit section: Minimalism">edit</a><span class="mw-editsection-bracket">]</span></span></h4>
<div role="note" class="hatnote">Main article: <a href="/wiki/Minimalism_(computing)" title="Minimalism (computing)">Minimalism (computing)</a></div>
<p>Scheme is a very simple language, much easier to implement than many other languages of comparable <a href="/wiki/Expressive_power_(computer_science)" title="Expressive power (computer science)">expressive power</a>.<sup id="cite_ref-easy_to_implement_scheme48_15-0" class="reference"><a href="#cite_note-easy_to_implement_scheme48-15">[15]</a></sup> This ease is attributable to the use of <a href="/wiki/Lambda_calculus" title="Lambda calculus">lambda calculus</a> to derive much of the syntax of the language from more primitive forms. For instance of the 23 s-expression-based syntactic constructs defined in the R5RS Scheme standard, 11 are classed as derived or library forms, which can be written as macros involving more fundamental forms, principally lambda. As R5RS says (R5RS sec. 3.1): "The most fundamental of the variable binding constructs is the lambda expression, because all other variable binding constructs can be explained in terms of lambda expressions."<sup id="cite_ref-r5rs_3-1" class="reference"><a href="#cite_note-r5rs-3">[3]</a></sup></p>
<dl>
<dd><b>Fundamental forms</b>: define, lambda, if, quote, unquote, unquote-splicing, quasiquote, define-syntax, let-syntax, letrec-syntax, syntax-rules, set!</dd>
<dd><b>Library forms</b>: do, let, let*, letrec, cond, case, and, or, begin, named let, delay</dd>
</dl>
<p>Example: a macro to implement <code>let</code> as an expression using <code>lambda</code> to perform the variable bindings.</p>
<div class="mw-highlight mw-content-ltr" dir="ltr">
<pre>
<span class="p">(</span><span class="k">define-syntax </span><span class="nv">let</span>
  <span class="p">(</span><span class="k">syntax-rules </span><span class="p">()</span>
    <span class="p">((</span><span class="k">let </span><span class="p">((</span><span class="nf">var</span> <span class="nv">expr</span><span class="p">)</span> <span class="o">...</span><span class="p">)</span> <span class="nv">body</span> <span class="o">...</span><span class="p">)</span>
      <span class="p">((</span><span class="k">lambda </span><span class="p">(</span><span class="nf">var</span> <span class="o">...</span><span class="p">)</span> <span class="nv">body</span> <span class="o">...</span><span class="p">)</span> <span class="nv">expr</span> <span class="o">...</span><span class="p">))))</span>
</pre></div>
<p>Thus using <code>let</code> as defined above a Scheme implementation would rewrite "<code>(let ((a 1)(b 2)) (+ b a))</code>" as "<code>((lambda (a b) (+ b a)) 1 2)</code>", which reduces implementation's task to that of coding procedure instantiations.</p>
<p>In 1998 Sussman and Steele remarked that the minimalism of Scheme was not a conscious design goal, but rather the unintended outcome of the design process. "We were actually trying to build something complicated and discovered, serendipitously, that we had accidentally designed something that met all our goals but was much simpler than we had intended....we realized that the lambda calculus—a small, simple formalism—could serve as the core of a powerful and expressive programming language."<sup id="cite_ref-revisited_7-1" class="reference"><a href="#cite_note-revisited-7">[7]</a></sup></p>
<h4><span class="mw-headline" id="Lexical_scope">Lexical scope</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/w/index.php?title=Scheme_(programming_language)&amp;action=edit&amp;section=8" title="Edit section: Lexical scope">edit</a><span class="mw-editsection-bracket">]</span></span></h4>
<div role="note" class="hatnote">See also: <a href="/wiki/Scope_(programming)" class="mw-redirect" title="Scope (programming)">Scope (programming)</a></div>
<p>Like most modern programming languages and unlike earlier Lisps such as <a href="/wiki/Maclisp" title="Maclisp">Maclisp</a>, Scheme is lexically scoped: all possible variable bindings in a program unit can be analyzed by reading the text of the program unit without consideration of the contexts in which it may be called. This contrasts with dynamic scoping which was characteristic of early Lisp dialects, because of the processing costs associated with the primitive textual substitution methods used to implement lexical scoping algorithms in compilers and interpreters of the day. In those Lisps, it was perfectly possible for a reference to a <a href="/wiki/Free_variable" class="mw-redirect" title="Free variable">free variable</a> inside a procedure to refer to quite distinct bindings external to the procedure, depending on the context of the call.</p>
<p>The impetus to incorporate lexical scoping, which was an unusual scoping model in the early 1970s, into their new version of Lisp, came from Sussman's studies of <a href="/wiki/ALGOL" title="ALGOL">ALGOL</a>. He suggested that ALGOL-like lexical scoping mechanisms would help to realize their initial goal of implementing <a href="/wiki/Carl_Hewitt#Actor_model" title="Carl Hewitt">Hewitt's Actor model</a> in Lisp.<sup id="cite_ref-revisited_7-2" class="reference"><a href="#cite_note-revisited-7">[7]</a></sup></p>
<p>The key insights on how to introduce lexical scoping into a Lisp dialect were popularized in Sussman and Steele's 1975 Lambda Paper, "Scheme: An Interpreter for Extended Lambda Calculus",<sup id="cite_ref-lambda_paper_1_16-0" class="reference"><a href="#cite_note-lambda_paper_1-16">[16]</a></sup> where they adopted the concept of the <a href="/wiki/Closure_(computer_science)" class="mw-redirect" title="Closure (computer science)">lexical closure</a> (on page 21), which had been described in an <a href="/wiki/AI_Memo" title="AI Memo">AI Memo</a> in 1970 by <a href="/wiki/Joel_Moses" title="Joel Moses">Joel Moses</a>, who attributed the idea to <a href="/wiki/Peter_J._Landin" class="mw-redirect" title="Peter J. Landin">Peter J. Landin</a>.<sup id="cite_ref-Moses_17-0" class="reference"><a href="#cite_note-Moses-17">[17]</a></sup></p>
<h4><span class="mw-headline" id="Lambda_calculus">Lambda calculus</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/w/index.php?title=Scheme_(programming_language)&amp;action=edit&amp;section=9" title="Edit section: Lambda calculus">edit</a><span class="mw-editsection-bracket">]</span></span></h4>
<div role="note" class="hatnote">See also: <a href="/wiki/Lambda_calculus" title="Lambda calculus">Lambda calculus</a></div>
<p><a href="/wiki/Alonzo_Church" title="Alonzo Church">Alonzo Church</a>'s mathematical notation, the lambda calculus, has inspired Lisp's use of "lambda" as a keyword for introducing a procedure, as well as influencing the development of <a href="/wiki/Functional_programming" title="Functional programming">functional programming</a> techniques involving the use of <a href="/wiki/Higher-order_function" title="Higher-order function">higher-order functions</a> in Lisp. But early Lisps were not suitable expressions of the lambda calculus because of their treatment of <a href="/wiki/Free_variables_and_bound_variables" title="Free variables and bound variables">free variables</a>.<sup id="cite_ref-revisited_7-3" class="reference"><a href="#cite_note-revisited-7">[7]</a></sup></p>
<p>The introduction of lexical scope resolved the problem by making an equivalence between some forms of lambda notation and their practical expression in a working programming language. Sussman and Steele showed that the new language could be used to elegantly derive all the imperative and declarative semantics of other programming languages including <a href="/wiki/ALGOL" title="ALGOL">ALGOL</a> and <a href="/wiki/Fortran" title="Fortran">Fortran</a>, and the dynamic scope of other Lisps, by using lambda expressions not as simple procedure instantiations but as "control structures and environment modifiers."<sup id="cite_ref-lambda_paper_2_18-0" class="reference"><a href="#cite_note-lambda_paper_2-18">[18]</a></sup> They introduced <a href="/wiki/Continuation-passing_style" title="Continuation-passing style">continuation-passing style</a> along with their first description of Scheme in the first of the Lambda Papers, and in subsequent papers they proceeded to demonstrate the raw power of this practical use of lambda calculus.</p>
<h4><span class="mw-headline" id="Block_structure">Block structure</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/w/index.php?title=Scheme_(programming_language)&amp;action=edit&amp;section=10" title="Edit section: Block structure">edit</a><span class="mw-editsection-bracket">]</span></span></h4>
<p>Scheme inherits its block structure from earlier block structured languages, particularly <a href="/wiki/ALGOL" title="ALGOL">ALGOL</a>. In Scheme, blocks are implemented by three <i>binding constructs</i>: <code>let</code>, <code>let*</code> and <code>letrec</code>. For instance, the following construct creates a <a href="/wiki/Block_(programming)" title="Block (programming)">block</a> in which a symbol called <code>var</code> is bound to the number 10:</p>
<div class="mw-highlight mw-content-ltr" dir="ltr">
<pre>
<span class="p">(</span><span class="k">define </span><span class="nv">var</span> <span class="s">"goose"</span><span class="p">)</span>
<span class="c1">;; Any reference to var here will be bound to "goose"</span>
<span class="p">(</span><span class="k">let </span><span class="p">((</span><span class="nf">var</span> <span class="mi">10</span><span class="p">))</span>
  <span class="c1">;; statements go here.  Any reference to var here will be bound to 10.</span>
  <span class="p">)</span>
<span class="c1">;; Any reference to var here will be bound to "goose"</span>
</pre></div>
<p>Blocks can be <a href="/wiki/Nesting_(computing)" title="Nesting (computing)">nested</a> to create arbitrarily complex block structures according to the need of the programmer. The use of block structuring to create local bindings alleviates the risk of <a href="/wiki/Naming_collision" title="Naming collision">namespace collision</a> that can otherwise occur.</p>
<p>One variant of <code>let</code>, <code>let*</code>, permits bindings to refer to variables defined earlier in the same construct, thus:</p>
<div class="mw-highlight mw-content-ltr" dir="ltr">
<pre>
<span class="p">(</span><span class="k">let* </span><span class="p">((</span><span class="nf">var1</span> <span class="mi">10</span><span class="p">)</span>
       <span class="p">(</span><span class="nf">var2</span> <span class="p">(</span><span class="nb">+ </span><span class="nv">var1</span> <span class="mi">12</span><span class="p">)))</span>
  <span class="c1">;; But the definition of var1 could not refer to var2</span>
  <span class="p">)</span>
</pre></div>
<p>The other variant, <code>letrec</code>, is designed to enable <a href="/wiki/Mutual_recursion" title="Mutual recursion">mutually recursive</a> procedures to be bound to one another.</p>
<div class="mw-highlight mw-content-ltr" dir="ltr">
<pre>
<span class="c1">;; Calculation of Hofstadter's male and female sequences as a list of pairs</span>

<span class="p">(</span><span class="k">define </span><span class="p">(</span><span class="nf">hofstadter-male-female</span> <span class="nv">n</span><span class="p">)</span>
  <span class="p">(</span><span class="k">letrec </span><span class="p">((</span><span class="nf">female</span> <span class="p">(</span><span class="k">lambda </span><span class="p">(</span><span class="nf">n</span><span class="p">)</span>
		     <span class="p">(</span><span class="k">if </span><span class="p">(</span><span class="nb">= </span><span class="nv">n</span> <span class="mi">0</span><span class="p">)</span>
			 <span class="mi">1</span>
			 <span class="p">(</span><span class="nb">- </span><span class="nv">n</span> <span class="p">(</span><span class="nf">male</span> <span class="p">(</span><span class="nf">female</span> <span class="p">(</span><span class="nb">- </span><span class="nv">n</span> <span class="mi">1</span><span class="p">)))))))</span>
	   <span class="p">(</span><span class="nf">male</span> <span class="p">(</span><span class="k">lambda </span><span class="p">(</span><span class="nf">n</span><span class="p">)</span>
		   <span class="p">(</span><span class="k">if </span><span class="p">(</span><span class="nb">= </span><span class="nv">n</span> <span class="mi">0</span><span class="p">)</span>
		       <span class="mi">0</span>
		       <span class="p">(</span><span class="nb">- </span><span class="nv">n</span> <span class="p">(</span><span class="nf">female</span> <span class="p">(</span><span class="nf">male</span> <span class="p">(</span><span class="nb">- </span><span class="nv">n</span> <span class="mi">1</span><span class="p">))))))))</span>
    <span class="p">(</span><span class="k">let </span><span class="nv">loop</span> <span class="p">((</span><span class="nf">i</span> <span class="mi">0</span><span class="p">))</span>
      <span class="p">(</span><span class="k">if </span><span class="p">(</span><span class="nb">&gt; </span><span class="nv">i</span> <span class="nv">n</span><span class="p">)</span>
	  <span class="o">'</span><span class="p">()</span>
	  <span class="p">(</span><span class="nb">cons </span><span class="p">(</span><span class="nb">cons </span><span class="p">(</span><span class="nf">female</span> <span class="nv">i</span><span class="p">)</span>
		      <span class="p">(</span><span class="nf">male</span> <span class="nv">i</span><span class="p">))</span>
		<span class="p">(</span><span class="nf">loop</span> <span class="p">(</span><span class="nb">+ </span><span class="nv">i</span> <span class="mi">1</span><span class="p">)))))))</span>

<span class="p">(</span><span class="nf">hofstadter-male-female</span> <span class="mi">8</span><span class="p">)</span>

<span class="nv">===&gt;</span> <span class="p">((</span><span class="mi">1</span> <span class="o">.</span> <span class="mi">0</span><span class="p">)</span> <span class="p">(</span><span class="mi">1</span> <span class="o">.</span> <span class="mi">0</span><span class="p">)</span> <span class="p">(</span><span class="mi">2</span> <span class="o">.</span> <span class="mi">1</span><span class="p">)</span> <span class="p">(</span><span class="mi">2</span> <span class="o">.</span> <span class="mi">2</span><span class="p">)</span> <span class="p">(</span><span class="mi">3</span> <span class="o">.</span> <span class="mi">2</span><span class="p">)</span> <span class="p">(</span><span class="mi">3</span> <span class="o">.</span> <span class="mi">3</span><span class="p">)</span> <span class="p">(</span><span class="mi">4</span> <span class="o">.</span> <span class="mi">4</span><span class="p">)</span> <span class="p">(</span><span class="mi">5</span> <span class="o">.</span> <span class="mi">4</span><span class="p">)</span> <span class="p">(</span><span class="mi">5</span> <span class="o">.</span> <span class="mi">5</span><span class="p">))</span>
</pre></div>
<p>(See <a href="/wiki/Hofstadter_sequence#Hofstadter_Female_and_Male_sequences" title="Hofstadter sequence">Hofstadter's male and female sequences</a> for the definitions used in this example)</p>
<p>All procedures bound in a single <code>letrec</code> may refer to one another by name, as well as to values of variables defined earlier in the same <code>letrec</code>, but they may not refer to <i>values</i> defined later in the same <code>letrec</code>.</p>
<p>A variant of <code>let</code>, the "named let" form, has an identifier after the <code>let</code> keyword. This binds the let variables to the argument of a procedure whose name is the given identifier and whose body is the body of the let form. The body may be repeated as desired by calling the procedure. The named let is widely used to implement iteration.</p>
<p>Example: a simple counter</p>
<div class="mw-highlight mw-content-ltr" dir="ltr">
<pre>
<span class="p">(</span><span class="k">let </span><span class="nv">loop</span> <span class="p">((</span><span class="nf">n</span> <span class="mi">1</span><span class="p">))</span>
  <span class="p">(</span><span class="k">if </span><span class="p">(</span><span class="nb">&gt; </span><span class="nv">n</span> <span class="mi">10</span><span class="p">)</span>
      <span class="o">'</span><span class="p">()</span>
      <span class="p">(</span><span class="nb">cons </span><span class="nv">n</span>
	    <span class="p">(</span><span class="nf">loop</span> <span class="p">(</span><span class="nb">+ </span><span class="nv">n</span> <span class="mi">1</span><span class="p">)))))</span>

<span class="nv">===&gt;</span> <span class="p">(</span><span class="mi">1</span> <span class="mi">2</span> <span class="mi">3</span> <span class="mi">4</span> <span class="mi">5</span> <span class="mi">6</span> <span class="mi">7</span> <span class="mi">8</span> <span class="mi">9</span> <span class="mi">10</span><span class="p">)</span>
</pre></div>
<p>Like any procedure in Scheme the procedure created in the named let is a first class object.</p>
<h4><span class="mw-headline" id="Proper_tail_recursion">Proper tail recursion</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/w/index.php?title=Scheme_(programming_language)&amp;action=edit&amp;section=11" title="Edit section: Proper tail recursion">edit</a><span class="mw-editsection-bracket">]</span></span></h4>
<div role="note" class="hatnote">For more details on this topic, see <a href="/wiki/Tail_recursion" class="mw-redirect" title="Tail recursion">Tail recursion</a>.</div>
<p>Scheme has an iteration construct, <code>do</code>, but it is more <a href="/wiki/Programming_idiom" title="Programming idiom">idiomatic</a> in Scheme to use <a href="/wiki/Tail_recursion" class="mw-redirect" title="Tail recursion">tail recursion</a> to express <a href="/wiki/Iteration" title="Iteration">iteration</a>. Standard-conforming Scheme implementations are required to optimize tail calls so as to support an unbounded number of active tail calls (R5RS sec. 3.5)<sup id="cite_ref-r5rs_3-2" class="reference"><a href="#cite_note-r5rs-3">[3]</a></sup>—a property the Scheme report describes as <i>proper tail recursion</i>—making it safe for Scheme programmers to write iterative algorithms using recursive structures, which are sometimes more intuitive. Tail recursive procedures and the <i>named <code>let</code></i> form provide support for iteration using tail recursion.</p>
<div class="mw-highlight mw-content-ltr" dir="ltr">
<pre>
<span class="c1">;; Building a list of squares from 0 to 9:</span>
<span class="c1">;; Note: loop is simply an arbitrary symbol used as a label. Any symbol will do.</span>

<span class="p">(</span><span class="k">define </span><span class="p">(</span><span class="nf">list-of-squares</span> <span class="nv">n</span><span class="p">)</span>
  <span class="p">(</span><span class="k">let </span><span class="nv">loop</span> <span class="p">((</span><span class="nf">i</span> <span class="nv">n</span><span class="p">)</span> <span class="p">(</span><span class="nf">res</span> <span class="o">'</span><span class="p">()))</span>
    <span class="p">(</span><span class="k">if </span><span class="p">(</span><span class="nb">&lt; </span><span class="nv">i</span> <span class="mi">0</span><span class="p">)</span>
        <span class="nv">res</span>
        <span class="p">(</span><span class="nf">loop</span> <span class="p">(</span><span class="nb">- </span><span class="nv">i</span> <span class="mi">1</span><span class="p">)</span> <span class="p">(</span><span class="nb">cons </span><span class="p">(</span><span class="nb">* </span><span class="nv">i</span> <span class="nv">i</span><span class="p">)</span> <span class="nv">res</span><span class="p">)))))</span>

<span class="p">(</span><span class="nf">list-of-squares</span> <span class="mi">9</span><span class="p">)</span>
<span class="nv">===&gt;</span> <span class="p">(</span><span class="mi">0</span> <span class="mi">1</span> <span class="mi">4</span> <span class="mi">9</span> <span class="mi">16</span> <span class="mi">25</span> <span class="mi">36</span> <span class="mi">49</span> <span class="mi">64</span> <span class="mi">81</span><span class="p">)</span>
</pre></div>
<h4><span class="mw-headline" id="First-class_continuations">First-class continuations</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/w/index.php?title=Scheme_(programming_language)&amp;action=edit&amp;section=12" title="Edit section: First-class continuations">edit</a><span class="mw-editsection-bracket">]</span></span></h4>
<div role="note" class="hatnote">Main article: <a href="/wiki/Continuation" title="Continuation">Continuation</a></div>
<p>Continuations in Scheme are <a href="/wiki/First-class_object" class="mw-redirect" title="First-class object">first-class objects</a>. Scheme provides the procedure <code><a href="/wiki/Call-with-current-continuation" title="Call-with-current-continuation">call-with-current-continuation</a></code> (also known as <code>call/cc</code>) to capture the current continuation by packing it up as an escape procedure bound to a formal argument in a procedure provided by the programmer. (R5RS sec. 6.4)<sup id="cite_ref-r5rs_3-3" class="reference"><a href="#cite_note-r5rs-3">[3]</a></sup> First-class continuations enable the programmer to create non-local <a href="/wiki/Control_flow" title="Control flow">control constructs</a> such as <a href="/wiki/Iterator" title="Iterator">iterators</a>, <a href="/wiki/Coroutine" title="Coroutine">coroutines</a>, and <a href="/wiki/Backtracking" title="Backtracking">backtracking</a>.</p>
<p>Continuations can be used to emulate the behavior of <a href="/wiki/Return_statement" title="Return statement">return statements</a> in imperative programming languages. The following function <code>find-first</code>, given function <code>func</code> and list <code>lst</code>, returns the first element <code>x</code> in <code>lst</code> such that <code>(func x)</code> returns true.</p>
<div class="mw-highlight mw-content-ltr" dir="ltr">
<pre>
<span class="p">(</span><span class="k">define </span><span class="p">(</span><span class="nf">find-first</span> <span class="nv">func</span> <span class="nv">lst</span><span class="p">)</span>
  <span class="p">(</span><span class="nf">call-with-current-continuation</span>
   <span class="p">(</span><span class="k">lambda </span><span class="p">(</span><span class="nf">return-immediately</span><span class="p">)</span>
     <span class="p">(</span><span class="nb">for-each </span><span class="p">(</span><span class="k">lambda </span><span class="p">(</span><span class="nf">x</span><span class="p">)</span>
		 <span class="p">(</span><span class="k">if </span><span class="p">(</span><span class="nf">func</span> <span class="nv">x</span><span class="p">)</span>
		     <span class="p">(</span><span class="nf">return-immediately</span> <span class="nv">x</span><span class="p">)))</span>
	       <span class="nv">lst</span><span class="p">)</span>
     <span class="no">#f</span><span class="p">)))</span>

<span class="p">(</span><span class="nf">find-first</span> <span class="nv">integer?</span> <span class="o">'</span><span class="p">(</span><span class="mi">1</span><span class="nv">/2</span> <span class="mi">3</span><span class="nv">/4</span> <span class="mf">5.6</span> <span class="mi">7</span> <span class="mi">8</span><span class="nv">/9</span> <span class="mi">10</span> <span class="mi">11</span><span class="p">))</span>
<span class="nv">===&gt;</span> <span class="mi">7</span>
<span class="p">(</span><span class="nf">find-first</span> <span class="nv">zero?</span> <span class="o">'</span><span class="p">(</span><span class="mi">1</span> <span class="mi">2</span> <span class="mi">3</span> <span class="mi">4</span><span class="p">))</span>
<span class="nv">===&gt;</span> <span class="no">#f</span>
</pre></div>
<p>The following example, a traditional programmer's puzzle, shows that Scheme can handle continuations as first-class objects, binding them to variables and passing them as arguments to procedures.</p>
<div class="mw-highlight mw-content-ltr" dir="ltr">
<pre>
<span class="p">(</span><span class="k">let* </span><span class="p">((</span><span class="nf">yin</span>
         <span class="p">((</span><span class="k">lambda </span><span class="p">(</span><span class="nf">cc</span><span class="p">)</span> <span class="p">(</span><span class="nb">display </span><span class="s">"@"</span><span class="p">)</span> <span class="nv">cc</span><span class="p">)</span> <span class="p">(</span><span class="nb">call-with-current-continuation </span><span class="p">(</span><span class="k">lambda </span><span class="p">(</span><span class="nf">c</span><span class="p">)</span> <span class="nv">c</span><span class="p">))))</span>
       <span class="p">(</span><span class="nf">yang</span>
         <span class="p">((</span><span class="k">lambda </span><span class="p">(</span><span class="nf">cc</span><span class="p">)</span> <span class="p">(</span><span class="nb">display </span><span class="s">"*"</span><span class="p">)</span> <span class="nv">cc</span><span class="p">)</span> <span class="p">(</span><span class="nb">call-with-current-continuation </span><span class="p">(</span><span class="k">lambda </span><span class="p">(</span><span class="nf">c</span><span class="p">)</span> <span class="nv">c</span><span class="p">)))))</span>
    <span class="p">(</span><span class="nf">yin</span> <span class="nv">yang</span><span class="p">))</span>
</pre></div>
<p>When executed this code displays a counting sequence: <code>@*@**@***@****@*****@******@*******@********...</code></p>
<h4><span class="mw-headline" id="Shared_namespace_for_procedures_and_variables">Shared namespace for procedures and variables</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/w/index.php?title=Scheme_(programming_language)&amp;action=edit&amp;section=13" title="Edit section: Shared namespace for procedures and variables">edit</a><span class="mw-editsection-bracket">]</span></span></h4>
<p>In contrast to Common Lisp, all data and procedures in Scheme share a common namespace, whereas in Common Lisp <a href="/wiki/Common_Lisp#The_function_namespace" title="Common Lisp">functions and data have separate namespaces</a> making it possible for a function and a variable to have the same name, and requiring special notation for referring to a function as a value. This is sometimes known as the "<a href="/wiki/Lisp-1_vs._Lisp-2" class="mw-redirect" title="Lisp-1 vs. Lisp-2">Lisp-1 vs. Lisp-2</a>" distinction, referring to the unified namespace of Scheme and the separate namespaces of Common Lisp.<sup id="cite_ref-19" class="reference"><a href="#cite_note-19">[19]</a></sup></p>
<p>In Scheme, the same primitives that are used to manipulate and bind data can be used to bind procedures. There is no equivalent of Common Lisp's <code>defun</code> and <code>#'</code> primitives.</p>
<div class="mw-highlight mw-content-ltr" dir="ltr">
<pre>
<span class="c1">;; Variable bound to a number:</span>
<span class="p">(</span><span class="k">define </span><span class="nv">f</span> <span class="mi">10</span><span class="p">)</span>
<span class="nv">f</span>
<span class="nv">===&gt;</span> <span class="mi">10</span>
<span class="c1">;; Mutation (altering the bound value)</span>
<span class="p">(</span><span class="k">set! </span><span class="nv">f</span> <span class="p">(</span><span class="nb">+ </span><span class="nv">f</span> <span class="nv">f</span> <span class="mi">6</span><span class="p">))</span>
<span class="nv">f</span>
<span class="nv">===&gt;</span> <span class="mi">26</span>
<span class="c1">;; Assigning a procedure to the same variable:</span>
<span class="p">(</span><span class="k">set! </span><span class="nv">f</span> <span class="p">(</span><span class="k">lambda </span><span class="p">(</span><span class="nf">n</span><span class="p">)</span> <span class="p">(</span><span class="nb">+ </span><span class="nv">n</span> <span class="mi">12</span><span class="p">)))</span>
<span class="p">(</span><span class="nf">f</span> <span class="mi">6</span><span class="p">)</span>
<span class="nv">===&gt;</span> <span class="mi">18</span>
<span class="c1">;; Assigning the result of an expression to the same variable:</span>
<span class="p">(</span><span class="k">set! </span><span class="nv">f</span> <span class="p">(</span><span class="nf">f</span> <span class="mi">1</span><span class="p">))</span>
<span class="nv">f</span>
<span class="nv">===&gt;</span> <span class="mi">13</span>
<span class="c1">;; functional programming:</span>
<span class="p">(</span><span class="nb">apply </span><span class="nv">+</span> <span class="o">'</span><span class="p">(</span><span class="mi">1</span> <span class="mi">2</span> <span class="mi">3</span> <span class="mi">4</span> <span class="mi">5</span> <span class="mi">6</span><span class="p">))</span>
<span class="nv">===&gt;</span> <span class="mi">21</span>
<span class="p">(</span><span class="k">set! </span><span class="nv">f</span> <span class="p">(</span><span class="k">lambda </span><span class="p">(</span><span class="nf">n</span><span class="p">)</span> <span class="p">(</span><span class="nb">+ </span><span class="nv">n</span> <span class="mi">100</span><span class="p">)))</span>
<span class="p">(</span><span class="nb">map </span><span class="nv">f</span> <span class="o">'</span><span class="p">(</span><span class="mi">1</span> <span class="mi">2</span> <span class="mi">3</span><span class="p">))</span>
<span class="nv">===&gt;</span> <span class="p">(</span><span class="mi">101</span> <span class="mi">102</span> <span class="mi">103</span><span class="p">)</span>
</pre></div>
<h3><span class="mw-headline" id="Implementation_standards">Implementation standards</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/w/index.php?title=Scheme_(programming_language)&amp;action=edit&amp;section=14" title="Edit section: Implementation standards">edit</a><span class="mw-editsection-bracket">]</span></span></h3>
<p>This subsection documents design decisions that have been taken over the years which have given Scheme a particular character, but are not the direct outcomes of the original design.</p>
<h4><span class="mw-headline" id="Numerical_tower">Numerical tower</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/w/index.php?title=Scheme_(programming_language)&amp;action=edit&amp;section=15" title="Edit section: Numerical tower">edit</a><span class="mw-editsection-bracket">]</span></span></h4>
<div role="note" class="hatnote">Main article: <a href="/wiki/Numerical_tower" title="Numerical tower">Numerical tower</a></div>
<p>Scheme specifies a comparatively full set of numerical datatypes including <a href="/wiki/Complex_number" title="Complex number">complex</a> and <a href="/wiki/Rational_number" title="Rational number">rational</a> types, which is known in Scheme as the numerical tower (R5RS sec. 6.2<sup id="cite_ref-r5rs_3-4" class="reference"><a href="#cite_note-r5rs-3">[3]</a></sup>). The standard treats these as abstractions, and does not commit the implementor to any particular internal representations.</p>
<p>Numbers may have the quality of exactness. An exact number can only be produced by a sequence of exact operations involving other exact numbers—inexactness is thus contagious. The standard specifies that any two implementations must produce equivalent results for all operations resulting in exact numbers.</p>
<p>The R5RS standard specifies procedures <code>exact-&gt;inexact</code> and <code>inexact-&gt;exact</code> which can be used to change the exactness of a number. <code>inexact-&gt;exact</code> produces "the exact number that is numerically closest to the argument." <code>exact-&gt;inexact</code> produces "the inexact number that is numerically closest to the argument". The R6RS standard omits these procedures from the main report, but specifies them as R5RS compatibility procedures in the standard library (rnrs r5rs (6)).</p>
<p>In the R5RS standard, Scheme implementations are not required to implement the whole numerical tower, but they must implement "a coherent subset consistent with both the purposes of the implementation and the spirit of the Scheme language" (R5RS sec. 6.2.3).<sup id="cite_ref-r5rs_3-5" class="reference"><a href="#cite_note-r5rs-3">[3]</a></sup> The new R6RS standard does require implementation of the whole tower, and "exact integer objects and exact rational number objects of practically unlimited size and precision, and to implement certain procedures...so they always return exact results when given exact arguments" (R6RS sec. 3.4, sec. 11.7.1).<sup id="cite_ref-r6rs_4-2" class="reference"><a href="#cite_note-r6rs-4">[4]</a></sup></p>
<p>Example 1: exact arithmetic in an implementation that supports exact rational complex numbers.</p>
<div class="mw-highlight mw-content-ltr" dir="ltr">
<pre>
<span class="c1">;; Sum of three rational real numbers and two rational complex numbers</span>
<span class="p">(</span><span class="k">define </span><span class="nv">x</span> <span class="p">(</span><span class="nb">+ </span><span class="mi">1</span><span class="nv">/3</span> <span class="mi">1</span><span class="nv">/4</span> <span class="mi">-1</span><span class="nv">/5</span> <span class="mi">-1</span><span class="nv">/3i</span> <span class="mi">405</span><span class="nv">/50+2/3i</span><span class="p">))</span>
<span class="nv">x</span>
<span class="nv">===&gt;</span> <span class="mi">509</span><span class="nv">/60+1/3i</span>
<span class="c1">;; Check for exactness.</span>
<span class="p">(</span><span class="nb">exact? </span><span class="nv">x</span><span class="p">)</span>
<span class="nv">===&gt;</span> <span class="no">#t</span>
</pre></div>
<p>Example 2: Same arithmetic in an implementation that supports neither exact rational numbers nor complex numbers but does accept real numbers in rational notation.</p>
<div class="mw-highlight mw-content-ltr" dir="ltr">
<pre>
<span class="c1">;; Sum of four rational real numbers</span>
<span class="p">(</span><span class="k">define </span><span class="nv">xr</span> <span class="p">(</span><span class="nb">+ </span><span class="mi">1</span><span class="nv">/3</span> <span class="mi">1</span><span class="nv">/4</span> <span class="mi">-1</span><span class="nv">/5</span> <span class="mi">405</span><span class="nv">/50</span><span class="p">))</span>
<span class="c1">;; Sum of two rational real numbers</span>
<span class="p">(</span><span class="k">define </span><span class="nv">xi</span> <span class="p">(</span><span class="nb">+ </span><span class="mi">-1</span><span class="nv">/3</span> <span class="mi">2</span><span class="nv">/3</span><span class="p">))</span>
<span class="nv">xr</span>
<span class="nv">===&gt;</span> <span class="mf">8.48333333333333</span>
<span class="nv">xi</span>
<span class="nv">===&gt;</span> <span class="mf">0.333333333333333</span>
<span class="c1">;; Check for exactness.</span>
<span class="p">(</span><span class="nb">exact? </span><span class="nv">xr</span><span class="p">)</span>
<span class="nv">===&gt;</span> <span class="no">#f</span>
<span class="p">(</span><span class="nb">exact? </span><span class="nv">xi</span><span class="p">)</span>
<span class="nv">===&gt;</span> <span class="no">#f</span>
</pre></div>
<p>Both implementations conform to the R5RS standard but the second does not conform to R6RS because it does not implement the full numerical tower.</p>
<h4><span class="mw-headline" id="Delayed_evaluation">Delayed evaluation</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/w/index.php?title=Scheme_(programming_language)&amp;action=edit&amp;section=16" title="Edit section: Delayed evaluation">edit</a><span class="mw-editsection-bracket">]</span></span></h4>
<div role="note" class="hatnote">See also: <a href="/wiki/Lazy_evaluation" title="Lazy evaluation">Lazy evaluation</a></div>
<p>Scheme supports delayed evaluation through the <code>delay</code> form and the procedure <code>force</code>.</p>
<div class="mw-highlight mw-content-ltr" dir="ltr">
<pre>
<span class="p">(</span><span class="k">define </span><span class="nv">a</span> <span class="mi">10</span><span class="p">)</span>
<span class="p">(</span><span class="k">define </span><span class="nv">eval-aplus2</span> <span class="p">(</span><span class="k">delay </span><span class="p">(</span><span class="nb">+ </span><span class="nv">a</span> <span class="mi">2</span><span class="p">)))</span>
<span class="p">(</span><span class="k">set! </span><span class="nv">a</span> <span class="mi">20</span><span class="p">)</span>
<span class="p">(</span><span class="nb">force </span><span class="nv">eval-aplus2</span><span class="p">)</span>
<span class="nv">===&gt;</span> <span class="mi">22</span>
<span class="p">(</span><span class="k">define </span><span class="nv">eval-aplus50</span> <span class="p">(</span><span class="k">delay </span><span class="p">(</span><span class="nb">+ </span><span class="nv">a</span> <span class="mi">50</span><span class="p">)))</span>
<span class="p">(</span><span class="k">let </span><span class="p">((</span><span class="nf">a</span> <span class="mi">8</span><span class="p">))</span>
  <span class="p">(</span><span class="nb">force </span><span class="nv">eval-aplus50</span><span class="p">))</span>
<span class="nv">===&gt;</span> <span class="mi">70</span>
<span class="p">(</span><span class="k">set! </span><span class="nv">a</span> <span class="mi">100</span><span class="p">)</span>
<span class="p">(</span><span class="nb">force </span><span class="nv">eval-aplus2</span><span class="p">)</span>
<span class="nv">===&gt;</span> <span class="mi">22</span>
</pre></div>
<p>The lexical context of the original definition of the promise is preserved, and its value is also preserved after the first use of <code>force</code>. The promise is only ever evaluated once.</p>
<p>These primitives, which produce or handle values known as <a href="/wiki/Futures_and_promises" title="Futures and promises">promises</a>, can be used to implement advanced <a href="/wiki/Lazy_evaluation" title="Lazy evaluation">lazy evaluation</a> constructs such as <a href="/wiki/Stream_(computing)" title="Stream (computing)">streams</a>.<sup id="cite_ref-srfi-41_20-0" class="reference"><a href="#cite_note-srfi-41-20">[20]</a></sup></p>
<p>In the R6RS standard, these are no longer primitives, but instead are provided as part of the R5RS compatibility library (rnrs r5rs (6)).</p>
<p>In R5RS, a suggested implementation of <code>delay</code> and <code>force</code> is given, implementing the promise as a procedure with no arguments (a <a href="/wiki/Thunk" title="Thunk">thunk</a>) and using <a href="/wiki/Memoization" title="Memoization">memoization</a> to ensure that it is only ever evaluated once, irrespective of the number of times <code>force</code> is called (R5RS sec. 6.4).<sup id="cite_ref-r5rs_3-6" class="reference"><a href="#cite_note-r5rs-3">[3]</a></sup></p>
<p>SRFI 41 enables the expression of both finite and infinite sequences with extraordinary economy. For example, this is a definition of the <a href="/wiki/Fibonacci_number" title="Fibonacci number">fibonacci sequence</a> using the functions defined in SRFI 41:<sup id="cite_ref-srfi-41_20-1" class="reference"><a href="#cite_note-srfi-41-20">[20]</a></sup></p>
<div class="mw-highlight mw-content-ltr" dir="ltr">
<pre>
<span class="c1">;; Define the Fibonacci sequence:</span>
<span class="p">(</span><span class="k">define </span><span class="nv">fibs</span>
  <span class="p">(</span><span class="nf">stream-cons</span> <span class="mi">0</span>
    <span class="p">(</span><span class="nf">stream-cons</span> <span class="mi">1</span>
      <span class="p">(</span><span class="nf">stream-map</span> <span class="nv">+</span>
        <span class="nv">fibs</span>
        <span class="p">(</span><span class="nf">stream-cdr</span> <span class="nv">fibs</span><span class="p">)))))</span>
<span class="c1">;; Compute the hundredth number in the sequence:</span>
<span class="p">(</span><span class="nf">stream-ref</span> <span class="nv">fibs</span> <span class="mi">99</span><span class="p">)</span>
<span class="nv">===&gt;</span>  <span class="mi">218922995834555169026</span>
</pre></div>
<h4><span class="mw-headline" id="Order_of_evaluation_of_procedure_arguments">Order of evaluation of procedure arguments</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/w/index.php?title=Scheme_(programming_language)&amp;action=edit&amp;section=17" title="Edit section: Order of evaluation of procedure arguments">edit</a><span class="mw-editsection-bracket">]</span></span></h4>
<p>Most Lisps specify an order of evaluation for procedure arguments. Scheme does not. Order of evaluation—including the order in which the expression in the operator position is evaluated—may be chosen by an implementation on a call-by-call basis, and the only constraint is that "the effect of any concurrent evaluation of the operator and operand expressions is constrained to be consistent with some sequential order of evaluation." (R5RS sec. 4.1.3)<sup id="cite_ref-r5rs_3-7" class="reference"><a href="#cite_note-r5rs-3">[3]</a></sup></p>
<div class="mw-highlight mw-content-ltr" dir="ltr">
<pre>
<span class="p">(</span><span class="k">let </span><span class="p">((</span><span class="nf">ev</span> <span class="p">(</span><span class="nf">lambda</span><span class="p">(</span><span class="nf">n</span><span class="p">)</span> <span class="p">(</span><span class="nb">display </span><span class="s">"Evaluating "</span><span class="p">)</span>
                     <span class="p">(</span><span class="nb">display </span><span class="p">(</span><span class="k">if </span><span class="p">(</span><span class="nb">procedure? </span><span class="nv">n</span><span class="p">)</span> <span class="s">"procedure"</span> <span class="nv">n</span><span class="p">))</span>
                     <span class="p">(</span><span class="nf">newline</span><span class="p">)</span> <span class="nv">n</span><span class="p">)))</span>
  <span class="p">((</span><span class="nf">ev</span> <span class="nv">+</span><span class="p">)</span> <span class="p">(</span><span class="nf">ev</span> <span class="mi">1</span><span class="p">)</span> <span class="p">(</span><span class="nf">ev</span> <span class="mi">2</span><span class="p">)))</span>
<span class="nv">===&gt;</span> <span class="mi">3</span>
</pre></div>
<p>ev is a procedure that describes the argument passed to it, then returns the value of the argument. In contrast with other Lisps, the appearance of an expression in the operator position (the first item) of a Scheme expression is quite legal, as long as the result of the expression in the operator position is a procedure.</p>
<p>In calling the procedure "+" to add 1 and 2, the expressions (ev +), (ev 1) and (ev 2) may be evaluated in any order, as long as the effect is not as if they were evaluated in parallel. Thus the following three lines may be displayed in any order by standard Scheme when the above example code is executed, although the text of one line may not be interleaved with another, because that would violate the sequential evaluation constraint.</p>
<dl>
<dd>Evaluating 1</dd>
<dd>Evaluating 2</dd>
<dd>Evaluating procedure</dd>
</dl>
<h4><span class="mw-headline" id="Hygienic_macros">Hygienic macros</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/w/index.php?title=Scheme_(programming_language)&amp;action=edit&amp;section=18" title="Edit section: Hygienic macros">edit</a><span class="mw-editsection-bracket">]</span></span></h4>
<div role="note" class="hatnote">Main article: <a href="/wiki/Hygienic_macro" title="Hygienic macro">Hygienic macro</a></div>
<p>In the R5RS standard and also in later reports, the syntax of Scheme can easily be extended via the macro system. The R5RS standard introduced a powerful hygienic macro system that allows the programmer to add new syntactic constructs to the language using a simple <a href="/wiki/Pattern_matching" title="Pattern matching">pattern matching</a> sublanguage (R5RS sec 4.3).<sup id="cite_ref-r5rs_3-8" class="reference"><a href="#cite_note-r5rs-3">[3]</a></sup> Prior to this, the hygienic macro system had been relegated to an appendix of the R4RS standard, as a "high level" system alongside a "low level" macro system, both of which were treated as extensions to Scheme rather than an essential part of the language.<sup id="cite_ref-r4rs_21-0" class="reference"><a href="#cite_note-r4rs-21">[21]</a></sup></p>
<p>Implementations of the hygienic macro system, also called <code>syntax-rules</code>, are required to respect the lexical scoping of the rest of the language. This is assured by special naming and scoping rules for macro expansion, and avoids common programming errors that can occur in the macro systems of other programming languages. R6RS specifies a more sophisticated transformation system, <code>syntax-case</code>, which has been available as a language extension to R5RS Scheme for some time.</p>
<div class="mw-highlight mw-content-ltr" dir="ltr">
<pre>
<span class="c1">;; Define a macro to implement a variant of "if" with a multi-expression</span>
<span class="c1">;; true branch and no false branch.</span>
<span class="p">(</span><span class="k">define-syntax </span><span class="nv">when</span>
  <span class="p">(</span><span class="k">syntax-rules </span><span class="p">()</span>
    <span class="p">((</span><span class="nf">when</span> <span class="nv">pred</span> <span class="nv">exp</span> <span class="nv">exps</span> <span class="o">...</span><span class="p">)</span>
      <span class="p">(</span><span class="k">if </span><span class="nv">pred</span> <span class="p">(</span><span class="k">begin </span><span class="nv">exp</span> <span class="nv">exps</span> <span class="o">...</span><span class="p">)))))</span>
</pre></div>
<p>Invocations of macros and procedures bear a close resemblance—both are s-expressions—but they are treated differently. When the compiler encounters an s-expression in the program, it first checks to see if the symbol is defined as a syntactic keyword within the current lexical scope. If so, it then attempts to expand the macro, treating the items in the tail of the s-expression as arguments without compiling code to evaluate them, and this process is repeated recursively until no macro invocations remain. If it is not a syntactic keyword, the compiler compiles code to evaluate the arguments in the tail of the s-expression and then to evaluate the variable represented by the symbol at the head of the s-expression and call it as a procedure with the evaluated tail expressions passed as actual arguments to it.</p>
<p>Most Scheme implementations also provide additional macro systems. Among popular ones are <a href="/wiki/Hygienic_macro#syntactic_closures" title="Hygienic macro">syntactic closures</a>, <a href="/wiki/Hygienic_macro#explicit_renaming" title="Hygienic macro">explicit renaming macros</a> and <code>define-macro</code>, a non-hygienic macro system similar to <code>defmacro</code> system provided in <a href="/wiki/Common_Lisp" title="Common Lisp">Common Lisp</a>.</p>
<h4><span class="mw-headline" id="Environments_and_eval">Environments and eval</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/w/index.php?title=Scheme_(programming_language)&amp;action=edit&amp;section=19" title="Edit section: Environments and eval">edit</a><span class="mw-editsection-bracket">]</span></span></h4>
<p>Prior to R5RS, Scheme had no standard equivalent of the <code>eval</code> procedure which is ubiquitous in other Lisps, although the first Lambda Paper had described <code>evaluate</code> as "similar to the LISP function EVAL"<sup id="cite_ref-lambda_paper_1_16-1" class="reference"><a href="#cite_note-lambda_paper_1-16">[16]</a></sup> and the first Revised Report in 1978 replaced this with <code>enclose</code>, which took two arguments. The second, third and fourth revised reports omitted any equivalent of <code>eval</code>.</p>
<p>The reason for this confusion is that in Scheme with its lexical scoping the result of evaluating an expression depends on where it is evaluated. For instance, it is not clear whether the result of evaluating the following expression should be 5 or 6:<sup id="cite_ref-rees_1992_22-0" class="reference"><a href="#cite_note-rees_1992-22">[22]</a></sup></p>
<div class="mw-highlight mw-content-ltr" dir="ltr">
<pre>
<span class="p">(</span><span class="k">let </span><span class="p">((</span><span class="nf">name</span> <span class="ss">'+</span><span class="p">))</span>
  <span class="p">(</span><span class="k">let </span><span class="p">((</span><span class="nb">+ </span><span class="nv">*</span><span class="p">))</span>
    <span class="p">(</span><span class="nf">evaluate</span> <span class="p">(</span><span class="nb">list </span><span class="nv">name</span> <span class="mi">2</span> <span class="mi">3</span><span class="p">))))</span>
</pre></div>
<p>If it is evaluated in the outer environment, where <code>name</code> is defined, the result is the sum of the operands. If it is evaluated in the inner environment, where the symbol "+" has been bound to the value of the procedure "*", the result is the product of the two operands.</p>
<p>R5RS resolves this confusion by specifying three procedures that return environments, and providing a procedure <code>eval</code> that takes an s-expression and an environment and evaluates the expression in the environment provided. (R5RS sec. 6.5)<sup id="cite_ref-r5rs_3-9" class="reference"><a href="#cite_note-r5rs-3">[3]</a></sup> R6RS extends this by providing a procedure called <code>environment</code> by which the programmer can specify exactly which objects to import into the evaluation environment.</p>
<h4><span class="mw-headline" id="Treatment_of_non-boolean_values_in_boolean_expressions">Treatment of non-boolean values in boolean expressions</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/w/index.php?title=Scheme_(programming_language)&amp;action=edit&amp;section=20" title="Edit section: Treatment of non-boolean values in boolean expressions">edit</a><span class="mw-editsection-bracket">]</span></span></h4>
<p>In most dialects of Lisp including Common Lisp, by convention the value <code>NIL</code> evaluates to the value false in a boolean expression. In Scheme, since the IEEE standard in 1991,<sup id="cite_ref-ieee1178_2-1" class="reference"><a href="#cite_note-ieee1178-2">[2]</a></sup> all values except #f, including <code>NIL</code>'s equivalent in Scheme which is written as '(), evaluate to the value true in a boolean expression. (R5RS sec. 6.3.1)<sup id="cite_ref-r5rs_3-10" class="reference"><a href="#cite_note-r5rs-3">[3]</a></sup></p>
<p>Where the constant representing the boolean value of true is <code>T</code> in most Lisps, in Scheme it is <code>#t</code>.</p>
<h4><span class="mw-headline" id="Disjointness_of_primitive_datatypes">Disjointness of primitive datatypes</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/w/index.php?title=Scheme_(programming_language)&amp;action=edit&amp;section=21" title="Edit section: Disjointness of primitive datatypes">edit</a><span class="mw-editsection-bracket">]</span></span></h4>
<p>In Scheme the primitive datatypes are disjoint. Only one of the following predicates can be true of any Scheme object: <code>boolean?</code>, <code>pair?</code>, <code>symbol?</code>, <code>number?</code>, <code>char?</code>, <code>string?</code>, <code>vector?</code>, <code>port?</code>, <code>procedure?</code>. (R5RS sec 3.2)<sup id="cite_ref-r5rs_3-11" class="reference"><a href="#cite_note-r5rs-3">[3]</a></sup></p>
<p>Within the numerical datatype, by contrast, the numerical values overlap. For example, an integer value satisfies all of the <code>integer?</code>, <code>rational?</code>, <code>real?</code>, <code>complex?</code> and <code>number?</code> predicates at the same time. (R5RS sec 6.2)<sup id="cite_ref-r5rs_3-12" class="reference"><a href="#cite_note-r5rs-3">[3]</a></sup></p>
<h4><span class="mw-headline" id="Equivalence_predicates">Equivalence predicates</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/w/index.php?title=Scheme_(programming_language)&amp;action=edit&amp;section=22" title="Edit section: Equivalence predicates">edit</a><span class="mw-editsection-bracket">]</span></span></h4>
<div role="note" class="hatnote">See also: <a href="/wiki/Relational_operator" title="Relational operator">relational operator</a></div>
<p>Scheme has three different types of equivalence between arbitrary objects denoted by three different <i>equivalence predicates</i>, relational operators for testing equality, <code>eq?</code>, <code>eqv?</code> and <code>equal?</code>:</p>
<ul>
<li><code>eq?</code> evaluates to <code>#f</code> unless its parameters represent the same data object in memory;</li>
<li><code>eqv?</code> is generally the same as <code>eq?</code> but treats primitive objects (e.g. characters and numbers) specially so that numbers that represent the same value are <code>eqv?</code> even if they do not refer to the same object;</li>
<li><code>equal?</code> compares data structures such as lists, vectors and strings to determine if they have congruent structure and <code>eqv?</code> contents.(R5RS sec. 6.1)<sup id="cite_ref-r5rs_3-13" class="reference"><a href="#cite_note-r5rs-3">[3]</a></sup></li>
</ul>
<p>Type dependent equivalence operations also exist in Scheme: <code>string=?</code> and <code>string-ci=?</code> compare two strings (the latter performs a case-independent comparison); <code>char=?</code> and <code>char-ci=?</code> compare characters; <code>=</code> compares numbers.<sup id="cite_ref-r5rs_3-14" class="reference"><a href="#cite_note-r5rs-3">[3]</a></sup></p>
<h4><span class="mw-headline" id="Comments">Comments</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/w/index.php?title=Scheme_(programming_language)&amp;action=edit&amp;section=23" title="Edit section: Comments">edit</a><span class="mw-editsection-bracket">]</span></span></h4>
<div role="note" class="hatnote">See also: <a href="/wiki/Comment_(computer_programming)" title="Comment (computer programming)">Comment (computer programming)</a></div>
<p>Up to the R5RS standard, the standard comment in Scheme was a semicolon, which makes the rest of the line invisible to Scheme. Numerous implementations have supported alternative conventions permitting comments to extend for more than a single line, and the R6RS standard permits two of them: an entire <a href="/wiki/S-expression" title="S-expression">s-expression</a> may be turned into a comment (or "commented out") by preceding it with <code>#;</code> (introduced in SRFI 62<sup id="cite_ref-23" class="reference"><a href="#cite_note-23">[23]</a></sup>) and a multiline comment or "block comment" may be produced by surrounding text with <code>#|</code> and <code>|#</code>.</p>
<h4><span class="mw-headline" id="Input.2Foutput">Input/output</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/w/index.php?title=Scheme_(programming_language)&amp;action=edit&amp;section=24" title="Edit section: Input/output">edit</a><span class="mw-editsection-bracket">]</span></span></h4>
<p>Scheme's input and output is based on the <i>port</i> datatype. (R5RS sec 6.6)<sup id="cite_ref-r5rs_3-15" class="reference"><a href="#cite_note-r5rs-3">[3]</a></sup> R5RS defines two default ports, accessible with the procedures <code>current-input-port</code> and <code>current-output-port</code>, which correspond to the Unix notions of <a href="/wiki/Standard_streams" title="Standard streams">standard input and standard output</a>. Most implementations also provide <code>current-error-port</code>. <a href="/wiki/Redirection_(computing)" title="Redirection (computing)">Redirection</a> of input and standard output is supported in the standard, by standard procedures such as <code>with-input-from-file</code> and <code>with-output-to-file</code>. Most implementations provide string ports with similar redirection capabilities, enabling many normal input-output operations to be performed on string buffers instead of files, using procedures described in SRFI 6.<sup id="cite_ref-srfi-6_24-0" class="reference"><a href="#cite_note-srfi-6-24">[24]</a></sup> The R6RS standard specifies much more sophisticated and capable port procedures and many new types of port.</p>
<p>The following examples are written in strict R5RS Scheme.</p>
<p>Example 1: With output defaulting to (current-output-port):</p>
<div class="mw-highlight mw-content-ltr" dir="ltr">
<pre>
<span class="p">(</span><span class="k">let </span><span class="p">((</span><span class="nf">hello0</span> <span class="p">(</span><span class="nf">lambda</span><span class="p">()</span> <span class="p">(</span><span class="nb">display </span><span class="s">"Hello world"</span><span class="p">)</span> <span class="p">(</span><span class="nf">newline</span><span class="p">))))</span>
  <span class="p">(</span><span class="nf">hello0</span><span class="p">))</span>
</pre></div>
<p>Example 2: As 1, but using optional port argument to output procedures</p>
<div class="mw-highlight mw-content-ltr" dir="ltr">
<pre>
<span class="p">(</span><span class="k">let </span><span class="p">((</span><span class="nf">hello1</span> <span class="p">(</span><span class="k">lambda </span><span class="p">(</span><span class="nf">p</span><span class="p">)</span> <span class="p">(</span><span class="nb">display </span><span class="s">"Hello world"</span> <span class="nv">p</span><span class="p">)</span> <span class="p">(</span><span class="nb">newline </span><span class="nv">p</span><span class="p">))))</span>
  <span class="p">(</span><span class="nf">hello1</span> <span class="p">(</span><span class="nf">current-output-port</span><span class="p">)))</span>
</pre></div>
<p>Example 3: As 1, but output is redirected to a newly created file</p>
<div class="mw-highlight mw-content-ltr" dir="ltr">
<pre>
<span class="c1">;; NB: with-output-to-file is an optional procedure in R5RS</span>
<span class="p">(</span><span class="k">let </span><span class="p">((</span><span class="nf">hello0</span> <span class="p">(</span><span class="k">lambda </span><span class="p">()</span> <span class="p">(</span><span class="nb">display </span><span class="s">"Hello world"</span><span class="p">)</span> <span class="p">(</span><span class="nf">newline</span><span class="p">))))</span>
  <span class="p">(</span><span class="nb">with-output-to-file </span><span class="s">"helloworldoutputfile"</span> <span class="nv">hello0</span><span class="p">))</span>
</pre></div>
<p>Example 4: As 2, but with explicit file open and port close to send output to file</p>
<div class="mw-highlight mw-content-ltr" dir="ltr">
<pre>
<span class="p">(</span><span class="k">let </span><span class="p">((</span><span class="nf">hello1</span> <span class="p">(</span><span class="k">lambda </span><span class="p">(</span><span class="nf">p</span><span class="p">)</span> <span class="p">(</span><span class="nb">display </span><span class="s">"Hello world"</span> <span class="nv">p</span><span class="p">)</span> <span class="p">(</span><span class="nb">newline </span><span class="nv">p</span><span class="p">)))</span>
      <span class="p">(</span><span class="nf">output-port</span> <span class="p">(</span><span class="nb">open-output-file </span><span class="s">"helloworldoutputfile"</span><span class="p">)))</span>
  <span class="p">(</span><span class="nf">hello1</span> <span class="nv">output-port</span><span class="p">)</span>
  <span class="p">(</span><span class="nb">close-output-port </span><span class="nv">output-port</span><span class="p">))</span>
</pre></div>
<p>Example 5: As 2, but with using call-with-output-file to send output to a file.</p>
<div class="mw-highlight mw-content-ltr" dir="ltr">
<pre>
<span class="p">(</span><span class="k">let </span><span class="p">((</span><span class="nf">hello1</span> <span class="p">(</span><span class="k">lambda </span><span class="p">(</span><span class="nf">p</span><span class="p">)</span> <span class="p">(</span><span class="nb">display </span><span class="s">"Hello world"</span> <span class="nv">p</span><span class="p">)</span> <span class="p">(</span><span class="nb">newline </span><span class="nv">p</span><span class="p">))))</span>
  <span class="p">(</span><span class="nb">call-with-output-file </span><span class="s">"helloworldoutputfile"</span> <span class="nv">hello1</span><span class="p">))</span>
</pre></div>
<p>Similar procedures are provided for input. R5RS Scheme provides the predicates <code>input-port?</code> and <code>output-port?</code>. For character input and output, <code>write-char</code>, <code>read-char</code>, <code>peek-char</code> and <code>char-ready?</code> are provided. For writing and reading Scheme expressions, Scheme provides <code>read</code> and <code>write</code>. On a read operation, the result returned is the end-of-file object if the input port has reached the end of the file, and this can be tested using the predicate <code>eof-object?</code>.</p>
<p>In addition to the standard, SRFI 28 defines a basic formatting procedure resembling Common Lisp's <code>format</code> function, after which it is named.<sup id="cite_ref-srfi-28_25-0" class="reference"><a href="#cite_note-srfi-28-25">[25]</a></sup></p>
<h4><span class="mw-headline" id="Redefinition_of_standard_procedures">Redefinition of standard procedures</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/w/index.php?title=Scheme_(programming_language)&amp;action=edit&amp;section=25" title="Edit section: Redefinition of standard procedures">edit</a><span class="mw-editsection-bracket">]</span></span></h4>
<p>In Scheme, procedures are bound to variables. At R5RS the language standard formally mandated that programs may change the variable bindings of built-in procedures, effectively redefining them. (R5RS "Language changes")<sup id="cite_ref-r5rs_3-16" class="reference"><a href="#cite_note-r5rs-3">[3]</a></sup> For example, one may extend <code>+</code> to accept strings as well as numbers by redefining it:</p>
<div class="mw-highlight mw-content-ltr" dir="ltr">
<pre>
<span class="p">(</span><span class="k">set! </span><span class="nv">+</span>
      <span class="p">(</span><span class="k">let </span><span class="p">((</span><span class="nf">original+</span> <span class="nv">+</span><span class="p">))</span>
        <span class="p">(</span><span class="k">lambda </span><span class="nv">args</span>
          <span class="p">(</span><span class="k">if </span><span class="p">(</span><span class="k">and </span><span class="p">(</span><span class="nb">not </span><span class="p">(</span><span class="nb">null? </span><span class="nv">args</span><span class="p">))</span> <span class="p">(</span><span class="nb">string? </span><span class="p">(</span><span class="nb">car </span><span class="nv">args</span><span class="p">)))</span>
              <span class="p">(</span><span class="nb">apply </span><span class="nv">string-append</span> <span class="nv">args</span><span class="p">)</span>
              <span class="p">(</span><span class="nb">apply </span><span class="nv">original+</span> <span class="nv">args</span><span class="p">)))))</span>
<span class="p">(</span><span class="nb">+ </span><span class="mi">1</span> <span class="mi">2</span> <span class="mi">3</span><span class="p">)</span>
<span class="nv">===&gt;</span> <span class="mi">6</span>
<span class="p">(</span><span class="nb">+ </span><span class="s">"1"</span> <span class="s">"2"</span> <span class="s">"3"</span><span class="p">)</span>
<span class="nv">===&gt;</span> <span class="s">"123"</span>
</pre></div>
<p>In R6RS every binding, including the standard ones, belongs to some library, and all exported bindings are immutable. (R6RS sec 7.1)<sup id="cite_ref-r6rs_4-3" class="reference"><a href="#cite_note-r6rs-4">[4]</a></sup> Because of this, redefinition of standard procedures by mutation is forbidden. Instead, it is possible to import a different procedure under the name of a standard one, which in effect is similar to redefinition.</p>
<h3><span class="mw-headline" id="Nomenclature_and_naming_conventions">Nomenclature and naming conventions</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/w/index.php?title=Scheme_(programming_language)&amp;action=edit&amp;section=26" title="Edit section: Nomenclature and naming conventions">edit</a><span class="mw-editsection-bracket">]</span></span></h3>
<p>In Standard Scheme, procedures that convert from one datatype to another contain the character string "-&gt;" in their name, predicates end with a "?", and procedures that change the value of already-allocated data end with a "!". These conventions are often followed by Scheme programmers.</p>
<p>In formal contexts such as Scheme standards, the word "procedure" is used in preference to "function" to refer to a lambda expression or primitive procedure. In normal usage the words "procedure" and "function" are used interchangeably. Procedure application is sometimes referred to formally as <i>combination</i>.</p>
<p>As in other Lisps, the term "<a href="/wiki/Thunk" title="Thunk">thunk</a>" is used in Scheme to refer to a procedure with no arguments. The term "proper tail recursion" refers to the property of all Scheme implementations, that they perform tail-call optimization so as to support an indefinite number of active <a href="/wiki/Tail_call" title="Tail call">tail calls</a>.</p>
<p>The form of the titles of the standards documents since R3RS, "Revised<sup>n</sup> Report on the Algorithmic Language Scheme", is a reference to the title of the <a href="/wiki/ALGOL" title="ALGOL">ALGOL 60</a> standard document, "Revised Report on the Algorithmic Language Algol 60," The Summary page of R3RS is closely modeled on the Summary page of the ALGOL 60 Report.<sup id="cite_ref-algol_report_26-0" class="reference"><a href="#cite_note-algol_report-26">[26]</a></sup><sup id="cite_ref-r3rs_27-0" class="reference"><a href="#cite_note-r3rs-27">[27]</a></sup></p>
<h2><span class="mw-headline" id="Review_of_standard_forms_and_procedures">Review of standard forms and procedures</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/w/index.php?title=Scheme_(programming_language)&amp;action=edit&amp;section=27" title="Edit section: Review of standard forms and procedures">edit</a><span class="mw-editsection-bracket">]</span></span></h2>
<table class="plainlinks metadata ambox ambox-content ambox-Unreferenced" role="presentation">
<tr>
<td class="mbox-image">
<div style="width:52px"><a href="/wiki/File:Question_book-new.svg" class="image"><img alt="" src="//upload.wikimedia.org/wikipedia/en/thumb/9/99/Question_book-new.svg/50px-Question_book-new.svg.png" width="50" height="39" srcset="//upload.wikimedia.org/wikipedia/en/thumb/9/99/Question_book-new.svg/75px-Question_book-new.svg.png 1.5x, //upload.wikimedia.org/wikipedia/en/thumb/9/99/Question_book-new.svg/100px-Question_book-new.svg.png 2x" data-file-width="512" data-file-height="399" /></a></div>
</td>
<td class="mbox-text"><span class="mbox-text-span">This section <b>does not <a href="/wiki/Wikipedia:Citing_sources" title="Wikipedia:Citing sources">cite</a> any <a href="/wiki/Wikipedia:Verifiability" title="Wikipedia:Verifiability">sources</a></b>. <span class="hide-when-compact">Please help <a class="external text" href="//en.wikipedia.org/w/index.php?title=Scheme_(programming_language)&amp;action=edit">improve this section</a> by <a href="/wiki/Help:Introduction_to_referencing_with_Wiki_Markup/1" title="Help:Introduction to referencing with Wiki Markup/1">adding citations to reliable sources</a>. Unsourced material may be challenged and <a href="/wiki/Wikipedia:Verifiability#Burden_of_evidence" title="Wikipedia:Verifiability">removed</a>.</span> <small><i>(May 2013)</i></small> <small class="hide-when-compact"><i>(<a href="/wiki/Help:Maintenance_template_removal" title="Help:Maintenance template removal">Learn how and when to remove this template message</a>)</i></small></span></td>
</tr>
</table>
<p>The language is formally defined in the standards R5RS (1998) and R6RS (2007). They describe standard "forms": keywords and accompanying syntax, which provide the control structure of the language, and standard procedures which perform common tasks.</p>
<h3><span class="mw-headline" id="Standard_forms">Standard forms</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/w/index.php?title=Scheme_(programming_language)&amp;action=edit&amp;section=28" title="Edit section: Standard forms">edit</a><span class="mw-editsection-bracket">]</span></span></h3>
<p>This table describes the standard forms in Scheme. Some forms appear in more than one row because they cannot easily be classified into a single function in the language.</p>
<p>Forms marked "L" in this table are classed as derived "library" forms in the standard and are often implemented as macros using more fundamental forms in practice, making the task of implementation much easier than in other languages.</p>
<table class="wikitable">
<caption>Standard forms in the language R5RS Scheme</caption>
<tr>
<th>Purpose</th>
<th>Forms</th>
</tr>
<tr>
<td>Definition</td>
<td>define</td>
</tr>
<tr>
<td>Binding constructs</td>
<td>lambda, do (L), let (L), let* (L), letrec (L)</td>
</tr>
<tr>
<td>Conditional evaluation</td>
<td>if, cond (L), case (L), and (L), or (L)</td>
</tr>
<tr>
<td>Sequential evaluation</td>
<td>begin (*)</td>
</tr>
<tr>
<td>Iteration</td>
<td>lambda, do (L), named let (L)</td>
</tr>
<tr>
<td>Syntactic extension</td>
<td>define-syntax, let-syntax, letrec-syntax, syntax-rules (R5RS), syntax-case (R6RS)</td>
</tr>
<tr>
<td>Quoting</td>
<td>quote('), unquote(,), quasiquote(`), unquote-splicing(,@)</td>
</tr>
<tr>
<td>Assignment</td>
<td>set!</td>
</tr>
<tr>
<td>Delayed evaluation</td>
<td>delay (L)</td>
</tr>
</table>
<p>Note that <code>begin</code> is defined as a library syntax in R5RS, but the expander needs to know about it to achieve the splicing functionality. In R6RS it is no longer a library syntax.</p>
<h3><span class="mw-headline" id="Standard_procedures">Standard procedures</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/w/index.php?title=Scheme_(programming_language)&amp;action=edit&amp;section=29" title="Edit section: Standard procedures">edit</a><span class="mw-editsection-bracket">]</span></span></h3>
<p>The following two tables describe the standard procedures in R5RS Scheme. R6RS is far more extensive and a summary of this type would not be practical.</p>
<p>Some procedures appear in more than one row because they cannot easily be classified into a single function in the language.</p>
<table class="wikitable">
<caption>Standard procedures in the language R5RS Scheme</caption>
<tr>
<th>Purpose</th>
<th>Procedures</th>
</tr>
<tr>
<td>Construction</td>
<td>vector, make-vector, make-string, list</td>
</tr>
<tr>
<td>Equivalence predicates</td>
<td>eq?, eqv?, equal?, string=?, string-ci=?, char=?, char-ci=?</td>
</tr>
<tr>
<td>Type conversion</td>
<td>vector-&gt;list, list-&gt;vector, number-&gt;string, string-&gt;number, symbol-&gt;string, string-&gt;symbol, char-&gt;integer, integer-&gt;char, string-&gt;list, list-&gt;string</td>
</tr>
<tr>
<td>Numbers</td>
<td><i>See separate table</i></td>
</tr>
<tr>
<td>Strings</td>
<td>string?, make-string, string, string-length, string-ref, string-set!, string=?, string-ci=?, string&lt;? string-ci&lt;?, string&lt;=? string-ci&lt;=?, string&gt;? string-ci&gt;?, string&gt;=? string-ci&gt;=?, substring, string-append, string-&gt;list, list-&gt;string, string-copy, string-fill!</td>
</tr>
<tr>
<td>Characters</td>
<td>char?, char=?, char-ci=?, char&lt;? char-ci&lt;?, char&lt;=? char-ci&lt;=?, char&gt;? char-ci&gt;?, char&gt;=? char-ci&gt;=?, char-alphabetic?, char-numeric?, char-whitespace?, char-upper-case?, char-lower-case?, char-&gt;integer, integer-&gt;char, char-upcase, char-downcase</td>
</tr>
<tr>
<td>Vectors</td>
<td>make-vector, vector, vector?, vector-length, vector-ref, vector-set!, vector-&gt;list, list-&gt;vector, vector-fill!</td>
</tr>
<tr>
<td>Symbols</td>
<td>symbol-&gt;string, string-&gt;symbol, symbol?</td>
</tr>
<tr>
<td>Pairs and lists</td>
<td>pair?, cons, car, cdr, set-car!, set-cdr!, null?, list?, list, length, append, reverse, list-tail, list-ref, memq. memv. member, assq, assv, assoc, list-&gt;vector, vector-&gt;list, list-&gt;string, string-&gt;list</td>
</tr>
<tr>
<td>Identity predicates</td>
<td>boolean?, pair?, symbol?, number?, char?, string?, vector?, port?, procedure?</td>
</tr>
<tr>
<td>Continuations</td>
<td>call-with-current-continuation (call/cc), values, call-with-values, dynamic-wind</td>
</tr>
<tr>
<td>Environments</td>
<td>eval, scheme-report-environment, null-environment, interaction-environment (optional)</td>
</tr>
<tr>
<td>Input/output</td>
<td>display, newline, read, write, read-char, write-char, peek-char, char-ready?, eof-object? open-input-file, open-output-file, close-input-port, close-output-port, input-port?, output-port?, current-input-port, current-output-port, call-with-input-file, call-with-output-file, with-input-from-file(optional), with-output-to-file(optional)</td>
</tr>
<tr>
<td>System interface</td>
<td>load (optional), transcript-on (optional), transcript-off (optional)</td>
</tr>
<tr>
<td>Delayed evaluation</td>
<td>force</td>
</tr>
<tr>
<td>Functional programming</td>
<td>procedure?, apply, map, for-each</td>
</tr>
<tr>
<td>Booleans</td>
<td>boolean? not</td>
</tr>
</table>
<p>String and character procedures that contain "-ci" in their names perform case-independent comparisons between their arguments: upper case and lower case versions of the same character are taken to be equal.</p>
<table class="wikitable">
<caption>Standard numeric procedures in the language R5RS Scheme</caption>
<tr>
<th>Purpose</th>
<th>Procedures</th>
</tr>
<tr>
<td>Basic arithmetic operators</td>
<td>+, -, *, /, abs, quotient, remainder, modulo, gcd, lcm, expt, sqrt</td>
</tr>
<tr>
<td>Rational numbers</td>
<td>numerator, denominator, rational?, rationalize</td>
</tr>
<tr>
<td>Approximation</td>
<td>floor, ceiling, truncate, round</td>
</tr>
<tr>
<td>Exactness</td>
<td>inexact-&gt;exact, exact-&gt;inexact, exact?, inexact?</td>
</tr>
<tr>
<td>Inequalities</td>
<td>&lt;, &lt;= , &gt;, &gt;=, =</td>
</tr>
<tr>
<td>Miscellaneous predicates</td>
<td>zero?, negative?, positive? odd? even?</td>
</tr>
<tr>
<td>Maximum and minimum</td>
<td>max, min</td>
</tr>
<tr>
<td>Trigonometry</td>
<td>sin, cos, tan, asin, acos, atan</td>
</tr>
<tr>
<td>Exponentials</td>
<td>exp, log</td>
</tr>
<tr>
<td>Complex numbers</td>
<td>make-rectangular, make-polar, real-part, imag-part, magnitude, angle, complex?</td>
</tr>
<tr>
<td>Input-output</td>
<td>number-&gt;string, string-&gt;number</td>
</tr>
<tr>
<td>Type predicates</td>
<td>integer?, rational?, real?, complex?, number?</td>
</tr>
</table>
<p>Implementations of - and / that take more than two arguments are defined but left optional at R5RS.</p>
<h2><span class="mw-headline" id="Scheme_Requests_for_Implementation">Scheme Requests for Implementation</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/w/index.php?title=Scheme_(programming_language)&amp;action=edit&amp;section=30" title="Edit section: Scheme Requests for Implementation">edit</a><span class="mw-editsection-bracket">]</span></span></h2>
<div role="note" class="hatnote">Main article: <a href="/wiki/Scheme_Requests_for_Implementation" title="Scheme Requests for Implementation">Scheme Requests for Implementation</a></div>
<p>Because of Scheme's minimalism, many common procedures and syntactic forms are not defined by the standard. In order to keep the core language small but facilitate standardization of extensions, the Scheme community has a "Scheme Request for Implementation" (SRFI) process by which extension libraries are defined through careful discussion of extension proposals. This promotes code portability. Many of the SRFIs are supported by all or most Scheme implementations.</p>
<p>SRFIs with fairly wide support in different implementations include:<sup id="cite_ref-srfi_support_28-0" class="reference"><a href="#cite_note-srfi_support-28">[28]</a></sup></p>
<ul>
<li>0: feature-based conditional expansion construct</li>
<li>1: list library</li>
<li>4: homogeneous numeric vector datatypes</li>
<li>6: basic string ports</li>
<li>8: receive, binding to multiple values</li>
<li>9: defining record types</li>
<li>13: string library</li>
<li>14: character-set library</li>
<li>16: syntax for procedures of variable <a href="/wiki/Arity" title="Arity">arity</a></li>
<li>17: generalized set!</li>
<li>18: Multithreading support</li>
<li>19: time data types and procedures</li>
<li>25: multi-dimensional array primitives</li>
<li>26: notation for specializing parameters without <a href="/wiki/Currying" title="Currying">currying</a></li>
<li>27: sources of random bits</li>
<li>28: basic format strings</li>
<li>29: <a href="/wiki/Internationalization_and_localization" title="Internationalization and localization">localization</a></li>
<li>30: nested multi-line comments</li>
<li>31: a special form for recursive evaluation</li>
<li>37: args-fold: a program argument processor</li>
<li>39: parameter objects</li>
<li>41: <a href="/wiki/Stream_(computing)" title="Stream (computing)">streams</a></li>
<li>42: <a href="/wiki/List_comprehension" title="List comprehension">eager comprehensions</a></li>
<li>43: vector library</li>
<li>45: primitives for expressing iterative lazy algorithms</li>
<li>60: integers as bits</li>
<li>61: a more general cond clause</li>
<li>66: octet vectors</li>
<li>67: compare procedures</li>
</ul>
<p>A full list of accepted (finalized) SRFIs is available at <a rel="nofollow" class="external free" href="http://srfi.schemers.org/final-srfis.html">http://srfi.schemers.org/final-srfis.html</a></p>
<h2><span class="mw-headline" id="Implementations">Implementations</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/w/index.php?title=Scheme_(programming_language)&amp;action=edit&amp;section=31" title="Edit section: Implementations">edit</a><span class="mw-editsection-bracket">]</span></span></h2>
<div role="note" class="hatnote">Main category: <a href="/wiki/Category:Scheme_(programming_language)_implementations" title="Category:Scheme (programming language) implementations">Scheme (programming language) implementations</a></div>
<p>The elegant, minimalist design has made Scheme a popular target for language designers, hobbyists, and educators, and because of its small size, that of a typical <a href="/wiki/Interpreter_(computing)" title="Interpreter (computing)">interpreter</a>, it is also a popular choice for <a href="/wiki/Embedded_system" title="Embedded system">embedded systems</a> and <a href="/wiki/Scripting_language" title="Scripting language">scripting</a>. This has resulted in scores of implementations,<sup id="cite_ref-scheme_implementations_29-0" class="reference"><a href="#cite_note-scheme_implementations-29">[29]</a></sup> most of which differ from each other so much that porting programs from one implementation to another is quite difficult, and the small size of the standard language means that writing a useful program of any great complexity in standard, portable Scheme is almost impossible.<sup id="cite_ref-position_paper_6-2" class="reference"><a href="#cite_note-position_paper-6">[6]</a></sup> The R6RS standard specifies a much broader language, in an attempt to broaden its appeal to programmers.</p>
<p>Almost all implementations provide a traditional Lisp-style <a href="/wiki/Read%E2%80%93eval%E2%80%93print_loop" title="Read–eval–print loop">read–eval–print loop</a> for development and debugging. Many also <a href="/wiki/Compiler" title="Compiler">compile</a> Scheme programs to executable binary. Support for embedding Scheme code in programs written in other languages is also common, as the relative simplicity of Scheme implementations makes it a popular choice for adding scripting capabilities to larger systems developed in languages such as <a href="/wiki/C_(programming_language)" title="C (programming language)">C</a>. <a href="/wiki/Gambit_(Scheme_implementation)" class="mw-redirect" title="Gambit (Scheme implementation)">Gambit</a>, <a href="/wiki/Chicken_(Scheme_implementation)" class="mw-redirect" title="Chicken (Scheme implementation)">Chicken</a>, and <a href="/wiki/Bigloo" title="Bigloo">Bigloo</a> work by compiling Scheme to C, which makes embedding particularly easy. In addition, Bigloo's compiler can be configured to generate <a href="/wiki/Java_Virtual_Machine" class="mw-redirect" title="Java Virtual Machine">JVM</a> <a href="/wiki/Bytecode" title="Bytecode">bytecode</a>, and it also features an experimental bytecode generator for <a href="/wiki/.NET_Framework" title=".NET Framework">.NET</a>.</p>
<p>Some implementations support additional features. For example, <a href="/wiki/Kawa_(Scheme_implementation)" title="Kawa (Scheme implementation)">Kawa</a> and <a href="/wiki/JScheme" title="JScheme">JScheme</a> provide integration with Java classes, and the Scheme to C compilers often make it easy to use external libraries written in C, up to allowing the embedding of actual C code in the Scheme source. Another example is <a href="/wiki/Pvts" title="Pvts">Pvts</a>, which offers a set of visual tools for supporting the learning of Scheme.</p>
<h2><span class="mw-headline" id="Usage">Usage</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/w/index.php?title=Scheme_(programming_language)&amp;action=edit&amp;section=32" title="Edit section: Usage">edit</a><span class="mw-editsection-bracket">]</span></span></h2>
<p>Scheme is widely used by a number<sup id="cite_ref-schemers_inc_30-0" class="reference"><a href="#cite_note-schemers_inc-30">[30]</a></sup> of schools; in particular, a number of introductory <a href="/wiki/Computer_Science" class="mw-redirect" title="Computer Science">Computer Science</a> courses use Scheme in conjunction with the textbook <i><a href="/wiki/Structure_and_Interpretation_of_Computer_Programs" title="Structure and Interpretation of Computer Programs">Structure and Interpretation of Computer Programs</a></i> (SICP).<sup id="cite_ref-sicp_adopters_31-0" class="reference"><a href="#cite_note-sicp_adopters-31">[31]</a></sup> For the past 12 years, <a href="/wiki/Racket_(programming_language)" title="Racket (programming language)">PLT</a> has run the <a href="/wiki/ProgramByDesign" title="ProgramByDesign">ProgramByDesign</a> (formerly TeachScheme!) project, which has exposed close to 600 high school teachers and thousands of high school students to rudimentary Scheme programming. <a href="/wiki/MIT" class="mw-redirect" title="MIT">MIT</a>'s old introductory programming class 6.001 was taught in Scheme,<sup id="cite_ref-6.001_32-0" class="reference"><a href="#cite_note-6.001-32">[32]</a></sup> Although 6.001 has been replaced by more modern courses, SICP continues to be taught at MIT.<sup id="cite_ref-6.001_zombies_33-0" class="reference"><a href="#cite_note-6.001_zombies-33">[33]</a></sup> The textbook <i><a href="/wiki/How_to_Design_Programs" title="How to Design Programs">How to Design Programs</a></i> by Matthias Felleisen, currently at Northeastern University, is used by some institutes of higher education for their introductory computer science courses. Both <a href="/wiki/Northeastern_University" title="Northeastern University">Northeastern University</a> and <a href="/wiki/Worcester_Polytechnic_Institute" title="Worcester Polytechnic Institute">Worcester Polytechnic Institute</a> use Scheme exclusively for their introductory courses Fundamentals of Computer Science (CS2500) and Introduction to Program Design (CS1101), respectively.<sup id="cite_ref-neu_34-0" class="reference"><a href="#cite_note-neu-34">[34]</a></sup><sup id="cite_ref-wpi_35-0" class="reference"><a href="#cite_note-wpi-35">[35]</a></sup> <a href="/wiki/Rose-Hulman" class="mw-redirect" title="Rose-Hulman">Rose-Hulman</a> uses Scheme in its more advanced Programming Language Concepts course.<sup id="cite_ref-rhit_36-0" class="reference"><a href="#cite_note-rhit-36">[36]</a></sup> <a href="/wiki/Indiana_University" title="Indiana University">Indiana University</a>'s introductory class, C211, is taught entirely in Scheme. The introductory class at <a href="/wiki/UC_Berkeley" class="mw-redirect" title="UC Berkeley">UC Berkeley</a>, CS 61A, was until recently taught entirely in Scheme, save minor diversions into Logo to demonstrate dynamic scope; all course materials, including lecture webcasts, are available online free of charge.<sup id="cite_ref-61A_37-0" class="reference"><a href="#cite_note-61A-37">[37]</a></sup> The introductory computer science courses at <a href="/wiki/Yale" class="mw-redirect" title="Yale">Yale</a> and <a href="/wiki/Grinnell_College" title="Grinnell College">Grinnell College</a> are also taught in Scheme.<sup id="cite_ref-yale_cs201_38-0" class="reference"><a href="#cite_note-yale_cs201-38">[38]</a></sup> Programming Design Paradigms,<sup id="cite_ref-neu2_39-0" class="reference"><a href="#cite_note-neu2-39">[39]</a></sup> a mandatory course for the Computer science Graduate Students at <a href="/wiki/Northeastern_University" title="Northeastern University">Northeastern University</a>, also extensively uses Scheme. The introductory Computer Science course at the University of Minnesota - Twin Cities, CSCI 1901, also uses Scheme as its primary language, followed by a course that introduces students to the Java programming language.<sup id="cite_ref-umn_40-0" class="reference"><a href="#cite_note-umn-40">[40]</a></sup> In the software industry, <a href="/wiki/Tata_Consultancy_Services" title="Tata Consultancy Services">Tata Consultancy Services</a>, Asia's largest software consultancy firm, uses Scheme in their month-long training program for fresh college graduates.<sup class="noprint Inline-Template Template-Fact" style="white-space:nowrap;">[<i><a href="/wiki/Wikipedia:Citation_needed" title="Wikipedia:Citation needed"><span title="This claim needs references to reliable sources. (August 2013)">citation needed</span></a></i>]</sup></p>
<p>Scheme is/was also used for the following:</p>
<ul>
<li>The <a href="/wiki/Document_Style_Semantics_and_Specification_Language" title="Document Style Semantics and Specification Language">Document Style Semantics and Specification Language</a> (DSSSL), which provides a method of specifying <a href="/wiki/SGML" class="mw-redirect" title="SGML">SGML</a> <a href="/wiki/Style_sheet_(web_development)" title="Style sheet (web development)">stylesheets</a>, uses a Scheme subset.<sup id="cite_ref-dsssl_41-0" class="reference"><a href="#cite_note-dsssl-41">[41]</a></sup></li>
<li>The well-known <a href="/wiki/Open_source" class="mw-redirect" title="Open source">open source</a> <a href="/wiki/Raster_graphics_editor" title="Raster graphics editor">raster graphics editor</a> <a href="/wiki/GIMP" title="GIMP">GIMP</a> uses <a href="/wiki/TinyScheme" title="TinyScheme">TinyScheme</a> as a <a href="/wiki/Scripting_language" title="Scripting language">scripting language</a>.<sup id="cite_ref-gimp_42-0" class="reference"><a href="#cite_note-gimp-42">[42]</a></sup></li>
<li><a href="/wiki/GNU_Guile" title="GNU Guile">Guile</a> has been adopted by <a href="/wiki/GNU" title="GNU">GNU</a> project as its official scripting language, and that implementation of Scheme is embedded in such applications as <a href="/wiki/GNU_LilyPond" class="mw-redirect" title="GNU LilyPond">GNU LilyPond</a> and <a href="/wiki/GnuCash" title="GnuCash">GnuCash</a> as a scripting language for extensions. Likewise, Guile used to be the scripting language for the <a href="/wiki/Desktop_environment" title="Desktop environment">desktop environment</a> <a href="/wiki/GNOME" title="GNOME">GNOME</a>,<sup id="cite_ref-archive_gnomefaq_43-0" class="reference"><a href="#cite_note-archive_gnomefaq-43">[43]</a></sup> and GNOME still has a project that provides Guile bindings to its library stack.<sup id="cite_ref-live_gnome_44-0" class="reference"><a href="#cite_note-live_gnome-44">[44]</a></sup> There is a project to incorporate Guile into <a href="/wiki/GNU_Emacs" title="GNU Emacs">GNU Emacs</a>, GNU's flagship program, replacing the current <a href="/wiki/Emacs_Lisp" title="Emacs Lisp">Emacs Lisp</a> interpreter.</li>
<li><a href="/wiki/Extension_Language_Kit" title="Extension Language Kit">Elk Scheme</a> is used by <a href="/wiki/Synopsys" title="Synopsys">Synopsys</a> as a scripting language for its <a href="/wiki/Technology_CAD" title="Technology CAD">technology CAD (TCAD)</a> tools.<sup id="cite_ref-tcad_45-0" class="reference"><a href="#cite_note-tcad-45">[45]</a></sup></li>
<li>Shiro Kawai, senior programmer on the movie <i><a href="/wiki/Final_Fantasy:_The_Spirits_Within" title="Final Fantasy: The Spirits Within">Final Fantasy: The Spirits Within</a></i>, used Scheme as a scripting language for managing the real-time rendering engine.<sup id="cite_ref-shiro_kawai_46-0" class="reference"><a href="#cite_note-shiro_kawai-46">[46]</a></sup></li>
<li><a href="/wiki/Google_App_Inventor" class="mw-redirect" title="Google App Inventor">Google App Inventor</a> for <a href="/wiki/Android_(operating_system)" title="Android (operating system)">Android</a> uses Scheme, where <a href="/wiki/Kawa_(Scheme_implementation)" title="Kawa (Scheme implementation)">Kawa</a> is used to compile the Scheme code down to byte-codes for the <a href="/wiki/Java_Virtual_Machine" class="mw-redirect" title="Java Virtual Machine">Java Virtual Machine</a> running on Android devices.<sup id="cite_ref-android_47-0" class="reference"><a href="#cite_note-android-47">[47]</a></sup></li>
</ul>
<h2><span class="mw-headline" id="See_also">See also</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/w/index.php?title=Scheme_(programming_language)&amp;action=edit&amp;section=33" title="Edit section: See also">edit</a><span class="mw-editsection-bracket">]</span></span></h2>
<div role="navigation" aria-label="Portals" class="noprint portal plainlist tright" style="margin:0.5em 0 0.5em 1em;border:solid #aaa 1px">
<ul style="display:table;box-sizing:border-box;padding:0.1em;max-width:175px;background:#f9f9f9;font-size:85%;line-height:110%;font-style:italic;font-weight:bold">
<li style="display:table-row"><span style="display:table-cell;padding:0.2em;vertical-align:middle;text-align:center"><a href="/wiki/File:8bit-dynamiclist_(reversed).gif" class="image"><img alt="icon" src="//upload.wikimedia.org/wikipedia/commons/thumb/c/cc/8bit-dynamiclist_%28reversed%29.gif/28px-8bit-dynamiclist_%28reversed%29.gif" width="28" height="28" class="noviewer" srcset="//upload.wikimedia.org/wikipedia/commons/c/cc/8bit-dynamiclist_%28reversed%29.gif 1.5x" data-file-width="32" data-file-height="32" /></a></span><span style="display:table-cell;padding:0.2em 0.2em 0.2em 0.3em;vertical-align:middle"><a href="/wiki/Portal:Computer_programming" title="Portal:Computer programming">Computer programming portal</a></span></li>
</ul>
</div>
<ul>
<li><a rel="nofollow" class="external text" href="https://www.gnu.org/software/mit-scheme/">MIT/GNU Scheme</a></li>
<li><a href="/wiki/Stalin_compiler" class="mw-redirect" title="Stalin compiler">Stalin compiler</a>, a compiler for Scheme.</li>
<li><i><a href="/wiki/Structure_and_Interpretation_of_Computer_Programs" title="Structure and Interpretation of Computer Programs">Structure and Interpretation of Computer Programs</a></i>, a classic <a href="/wiki/Computer_science" title="Computer science">computer science</a> textbook.</li>
<li><i><a href="/wiki/Essentials_of_Programming_Languages" title="Essentials of Programming Languages">Essentials of Programming Languages</a></i>, another classic <a href="/wiki/Computer_science" title="Computer science">computer science</a> textbook.</li>
<li><i><a href="/wiki/Lisp_in_Small_Pieces" title="Lisp in Small Pieces">Lisp in Small Pieces</a></i>, a book showing how to implement Scheme (and Lisp) in Scheme.</li>
<li><i><a href="/wiki/How_to_Design_Programs" title="How to Design Programs">How to Design Programs</a></i>, which intends to teach principles that go beyond Scheme and to address perceived incongruities in SICP.<sup id="cite_ref-48" class="reference"><a href="#cite_note-48">[48]</a></sup></li>
<li><a href="/wiki/Call-with-current-continuation" title="Call-with-current-continuation">Call-with-current-continuation</a> (call/cc).</li>
<li><a href="/wiki/SXML" title="SXML">SXML</a>, an illustrative representation for XML in Scheme that provides a straightforward approach to XML data processing in Scheme.</li>
<li>The CRPG game <a href="/w/index.php?title=Haxima&amp;action=edit&amp;redlink=1" class="new" title="Haxima (page does not exist)">Haxima</a> is written in Scheme<sup id="cite_ref-49" class="reference"><a href="#cite_note-49">[49]</a></sup></li>
</ul>
<h2><span class="mw-headline" id="References">References</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/w/index.php?title=Scheme_(programming_language)&amp;action=edit&amp;section=34" title="Edit section: References">edit</a><span class="mw-editsection-bracket">]</span></span></h2>
<div class="reflist references-column-width" style="-moz-column-width: 30em; -webkit-column-width: 30em; column-width: 30em; list-style-type: decimal;">
<ol class="references">
<li id="cite_note-cl_steele-1"><span class="mw-cite-backlink"><b><a href="#cite_ref-cl_steele_1-0">^</a></b></span> <span class="reference-text">Common LISP: The Language, 2nd Ed., Guy L. Steele Jr. Digital Press; 1981. <a href="/wiki/Special:BookSources/9781555580414" class="internal mw-magiclink-isbn">ISBN 978-1-55558-041-4</a>. "Common Lisp is a new dialect of Lisp, a successor to MacLisp, influenced strongly by ZetaLisp and to some extent by Scheme and InterLisp."</span></li>
<li id="cite_note-ieee1178-2"><span class="mw-cite-backlink">^ <a href="#cite_ref-ieee1178_2-0"><sup><i><b>a</b></i></sup></a> <a href="#cite_ref-ieee1178_2-1"><sup><i><b>b</b></i></sup></a></span> <span class="reference-text">1178-1990 (Reaff 2008) IEEE Standard for the Scheme Programming Language. IEEE part number STDPD14209, <a rel="nofollow" class="external text" href="http://standards.ieee.org/board/rev/308minutes.html">unanimously reaffirmed</a> at a meeting of the IEEE-SA Standards Board Standards Review Committee (RevCom), March 26, 2008 (item 6.3 on minutes), reaffirmation minutes accessed October 2009. NOTE: this document is only available for purchase from IEEE and is not available online at the time of writing (2009).</span></li>
<li id="cite_note-r5rs-3"><span class="mw-cite-backlink">^ <a href="#cite_ref-r5rs_3-0"><sup><i><b>a</b></i></sup></a> <a href="#cite_ref-r5rs_3-1"><sup><i><b>b</b></i></sup></a> <a href="#cite_ref-r5rs_3-2"><sup><i><b>c</b></i></sup></a> <a href="#cite_ref-r5rs_3-3"><sup><i><b>d</b></i></sup></a> <a href="#cite_ref-r5rs_3-4"><sup><i><b>e</b></i></sup></a> <a href="#cite_ref-r5rs_3-5"><sup><i><b>f</b></i></sup></a> <a href="#cite_ref-r5rs_3-6"><sup><i><b>g</b></i></sup></a> <a href="#cite_ref-r5rs_3-7"><sup><i><b>h</b></i></sup></a> <a href="#cite_ref-r5rs_3-8"><sup><i><b>i</b></i></sup></a> <a href="#cite_ref-r5rs_3-9"><sup><i><b>j</b></i></sup></a> <a href="#cite_ref-r5rs_3-10"><sup><i><b>k</b></i></sup></a> <a href="#cite_ref-r5rs_3-11"><sup><i><b>l</b></i></sup></a> <a href="#cite_ref-r5rs_3-12"><sup><i><b>m</b></i></sup></a> <a href="#cite_ref-r5rs_3-13"><sup><i><b>n</b></i></sup></a> <a href="#cite_ref-r5rs_3-14"><sup><i><b>o</b></i></sup></a> <a href="#cite_ref-r5rs_3-15"><sup><i><b>p</b></i></sup></a> <a href="#cite_ref-r5rs_3-16"><sup><i><b>q</b></i></sup></a></span> <span class="reference-text"><cite class="citation journal">Richard Kelsey; William Clinger; Jonathan Rees; et al. (August 1998). <a rel="nofollow" class="external text" href="http://www.schemers.org/Documents/Standards/R5RS/">"Revised<sup>5</sup> Report on the Algorithmic Language Scheme"</a>. <i>Higher-Order and Symbolic Computation</i>. <b>11</b> (1): 7–105. <a href="/wiki/Digital_object_identifier" title="Digital object identifier">doi</a>:<a rel="nofollow" class="external text" href="//dx.doi.org/10.1023%2FA%3A1010051815785">10.1023/A:1010051815785</a><span class="reference-accessdate">. Retrieved <span class="nowrap">2012-08-09</span></span>.</cite><span title="ctx_ver=Z39.88-2004&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3AScheme+%28programming+language%29&amp;rft.atitle=Revised%3Csup%3E5%3C%2Fsup%3E+Report+on+the+Algorithmic+Language+Scheme&amp;rft.au=Adams+Iv%2C+N.I.&amp;rft.au=Bartley%2C+D.H.&amp;rft.au=Friedman%2C+D.P.&amp;rft.au=Jonathan+Rees&amp;rft.au=Kohlbecker%2C+E.&amp;rft.au=Richard+Kelsey&amp;rft.au=Rozas%2C+G.J.&amp;rft.au=Steele+Jr.%2C+G.L.&amp;rft.au=William+Clinger&amp;rft.date=1998-08&amp;rft.genre=article&amp;rft_id=http%3A%2F%2Fwww.schemers.org%2FDocuments%2FStandards%2FR5RS%2F&amp;rft_id=info%3Adoi%2F10.1023%2FA%3A1010051815785&amp;rft.issue=1&amp;rft.jtitle=Higher-Order+and+Symbolic+Computation&amp;rft.pages=7-105&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Ajournal&amp;rft.volume=11" class="Z3988"><span style="display:none;">&#160;</span></span></span></li>
<li id="cite_note-r6rs-4"><span class="mw-cite-backlink">^ <a href="#cite_ref-r6rs_4-0"><sup><i><b>a</b></i></sup></a> <a href="#cite_ref-r6rs_4-1"><sup><i><b>b</b></i></sup></a> <a href="#cite_ref-r6rs_4-2"><sup><i><b>c</b></i></sup></a> <a href="#cite_ref-r6rs_4-3"><sup><i><b>d</b></i></sup></a></span> <span class="reference-text"><cite class="citation web">Sperber, Michael; Dybvig, R. Kent; Flatt, Matthew; Van Straaten, Anton; et al. (August 2007). <a rel="nofollow" class="external text" href="http://www.r6rs.org">"Revised<sup>6</sup> Report on the Algorithmic Language Scheme (R6RS)"</a>. Scheme Steering Committee<span class="reference-accessdate">. Retrieved <span class="nowrap">2011-09-13</span></span>.</cite><span title="ctx_ver=Z39.88-2004&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3AScheme+%28programming+language%29&amp;rft.au=Dybvig%2C+R.+Kent&amp;rft.aufirst=Michael&amp;rft.au=Flatt%2C+Matthew&amp;rft.aulast=Sperber&amp;rft.au=Van+Straaten%2C+Anton&amp;rft.btitle=Revised%3Csup%3E6%3C%2Fsup%3E+Report+on+the+Algorithmic+Language+Scheme+%28R6RS%29&amp;rft.date=2007-08&amp;rft.genre=unknown&amp;rft_id=http%3A%2F%2Fwww.r6rs.org&amp;rft.pub=Scheme+Steering+Committee&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook" class="Z3988"><span style="display:none;">&#160;</span></span></span></li>
<li id="cite_note-5"><span class="mw-cite-backlink"><b><a href="#cite_ref-5">^</a></b></span> <span class="reference-text"><cite class="citation web"><a rel="nofollow" class="external text" href="http://www.r6rs.org/ratification/results.html">"R6RS ratification-voting results"</a>. Scheme Steering Committee. 2007-08-13<span class="reference-accessdate">. Retrieved <span class="nowrap">2012-08-09</span></span>.</cite><span title="ctx_ver=Z39.88-2004&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3AScheme+%28programming+language%29&amp;rft.btitle=R6RS+ratification-voting+results&amp;rft.date=2007-08-13&amp;rft.genre=unknown&amp;rft_id=http%3A%2F%2Fwww.r6rs.org%2Fratification%2Fresults.html&amp;rft.pub=Scheme+Steering+Committee&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook" class="Z3988"><span style="display:none;">&#160;</span></span></span></li>
<li id="cite_note-position_paper-6"><span class="mw-cite-backlink">^ <a href="#cite_ref-position_paper_6-0"><sup><i><b>a</b></i></sup></a> <a href="#cite_ref-position_paper_6-1"><sup><i><b>b</b></i></sup></a> <a href="#cite_ref-position_paper_6-2"><sup><i><b>c</b></i></sup></a></span> <span class="reference-text"><cite class="citation web">Will Clinger, Marc Feeley, Chris Hanson, Jonathan Rees and Olin Shivers (2009-08-20). <a rel="nofollow" class="external text" href="http://scheme-reports.org/2009/position-statement.html">"Position Statement <i>(draft)</i>"</a>. Scheme Steering Committee<span class="reference-accessdate">. Retrieved <span class="nowrap">2012-08-09</span></span>.</cite><span title="ctx_ver=Z39.88-2004&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3AScheme+%28programming+language%29&amp;rft.au=Will+Clinger%2C+Marc+Feeley%2C+Chris+Hanson%2C+Jonathan+Rees+and+Olin+Shivers&amp;rft.btitle=Position+Statement+%28draft%29&amp;rft.date=2009-08-20&amp;rft.genre=unknown&amp;rft_id=http%3A%2F%2Fscheme-reports.org%2F2009%2Fposition-statement.html&amp;rft.pub=Scheme+Steering+Committee&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook" class="Z3988"><span style="display:none;">&#160;</span></span> <span class="citation-comment" style="display:none; color:#33aa33">CS1 maint: Multiple names: authors list (<a href="/wiki/Category:CS1_maint:_Multiple_names:_authors_list" title="Category:CS1 maint: Multiple names: authors list">link</a>)</span></span></li>
<li id="cite_note-revisited-7"><span class="mw-cite-backlink">^ <a href="#cite_ref-revisited_7-0"><sup><i><b>a</b></i></sup></a> <a href="#cite_ref-revisited_7-1"><sup><i><b>b</b></i></sup></a> <a href="#cite_ref-revisited_7-2"><sup><i><b>c</b></i></sup></a> <a href="#cite_ref-revisited_7-3"><sup><i><b>d</b></i></sup></a></span> <span class="reference-text"><cite class="citation journal"><a href="/wiki/Gerald_Jay_Sussman" title="Gerald Jay Sussman">Gerald Jay Sussman</a> and <a href="/wiki/Guy_L._Steele,_Jr." class="mw-redirect" title="Guy L. Steele, Jr.">Guy L. Steele, Jr.</a> (December 1998). <a rel="nofollow" class="external text" href="http://www.brics.dk/~hosc/local/HOSC-11-4-pp399-404.pdf">"The First Report on Scheme Revisited"</a> <span style="font-size:85%;">(PDF)</span>. <i>Higher-Order and Symbolic Computation</i>. <b>11</b> (4): 399–404. <a href="/wiki/Digital_object_identifier" title="Digital object identifier">doi</a>:<a rel="nofollow" class="external text" href="//dx.doi.org/10.1023%2FA%3A1010079421970">10.1023/A:1010079421970</a>. <a href="/wiki/International_Standard_Serial_Number" title="International Standard Serial Number">ISSN</a>&#160;<a rel="nofollow" class="external text" href="//www.worldcat.org/issn/1388-3690">1388-3690</a><span class="reference-accessdate">. Retrieved <span class="nowrap">2012-08-09</span></span>.</cite><span title="ctx_ver=Z39.88-2004&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3AScheme+%28programming+language%29&amp;rft.atitle=The+First+Report+on+Scheme+Revisited&amp;rft.au=Gerald+Jay+Sussman+and+Guy+L.+Steele%2C+Jr.&amp;rft.date=1998-12&amp;rft.genre=article&amp;rft_id=http%3A%2F%2Fwww.brics.dk%2F~hosc%2Flocal%2FHOSC-11-4-pp399-404.pdf&amp;rft_id=info%3Adoi%2F10.1023%2FA%3A1010079421970&amp;rft.issn=1388-3690&amp;rft.issue=4&amp;rft.jtitle=Higher-Order+and+Symbolic+Computation&amp;rft.pages=399-404&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Ajournal&amp;rft.volume=11" class="Z3988"><span style="display:none;">&#160;</span></span></span></li>
<li id="cite_note-psyntax-8"><span class="mw-cite-backlink"><b><a href="#cite_ref-psyntax_8-0">^</a></b></span> <span class="reference-text"><cite class="citation web">Abdulaziz Ghuloum (2007-10-27). <a rel="nofollow" class="external text" href="https://www.cs.indiana.edu/~aghuloum/r6rs-libraries/">"R6RS Libraries and syntax-case system (psyntax)"</a>. Ikarus Scheme<span class="reference-accessdate">. Retrieved <span class="nowrap">2009-10-20</span></span>.</cite><span title="ctx_ver=Z39.88-2004&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3AScheme+%28programming+language%29&amp;rft.au=Abdulaziz+Ghuloum&amp;rft.btitle=R6RS+Libraries+and+syntax-case+system+%28psyntax%29&amp;rft.date=2007-10-27&amp;rft.genre=unknown&amp;rft_id=https%3A%2F%2Fwww.cs.indiana.edu%2F~aghuloum%2Fr6rs-libraries%2F&amp;rft.pub=Ikarus+Scheme&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook" class="Z3988"><span style="display:none;">&#160;</span></span></span></li>
<li id="cite_note-r6rs_Language_changes-9"><span class="mw-cite-backlink"><b><a href="#cite_ref-r6rs_Language_changes_9-0">^</a></b></span> <span class="reference-text"><cite class="citation web"><a rel="nofollow" class="external text" href="http://www.r6rs.org/final/html/r6rs/r6rs-Z-H-19.html#node_chap_E">"Revised^6 Report on the Algorithmic Language Scheme, Appendix E: language changes"</a>. Scheme Steering Committee. 2007-09-26<span class="reference-accessdate">. Retrieved <span class="nowrap">2009-10-20</span></span>.</cite><span title="ctx_ver=Z39.88-2004&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3AScheme+%28programming+language%29&amp;rft.btitle=Revised%5E6+Report+on+the+Algorithmic+Language+Scheme%2C+Appendix+E%3A+language+changes&amp;rft.date=2007-09-26&amp;rft.genre=unknown&amp;rft_id=http%3A%2F%2Fwww.r6rs.org%2Ffinal%2Fhtml%2Fr6rs%2Fr6rs-Z-H-19.html%23node_chap_E&amp;rft.pub=Scheme+Steering+Committee&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook" class="Z3988"><span style="display:none;">&#160;</span></span></span></li>
<li id="cite_note-r6rs_electorate-10"><span class="mw-cite-backlink"><b><a href="#cite_ref-r6rs_electorate_10-0">^</a></b></span> <span class="reference-text"><cite class="citation web"><a rel="nofollow" class="external text" href="http://www.r6rs.org/ratification/electorate.html">"R6RS Electorate"</a>. Scheme Steering Committee. 2007<span class="reference-accessdate">. Retrieved <span class="nowrap">2012-08-09</span></span>.</cite><span title="ctx_ver=Z39.88-2004&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3AScheme+%28programming+language%29&amp;rft.btitle=R6RS+Electorate&amp;rft.date=2007&amp;rft.genre=unknown&amp;rft_id=http%3A%2F%2Fwww.r6rs.org%2Fratification%2Felectorate.html&amp;rft.pub=Scheme+Steering+Committee&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook" class="Z3988"><span style="display:none;">&#160;</span></span></span></li>
<li id="cite_note-r6rs_feeley-11"><span class="mw-cite-backlink"><b><a href="#cite_ref-r6rs_feeley_11-0">^</a></b></span> <span class="reference-text"><cite class="citation web">Marc Feeley (compilation) (2007-10-26). <a rel="nofollow" class="external text" href="http://lists.r6rs.org/pipermail/r6rs-discuss/2007-October/003351.html">"Implementors' intentions concerning R6RS"</a>. Scheme Steering Committee, r6rs-discuss mailing list<span class="reference-accessdate">. Retrieved <span class="nowrap">2012-08-09</span></span>.</cite><span title="ctx_ver=Z39.88-2004&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3AScheme+%28programming+language%29&amp;rft.au=Marc+Feeley+%28compilation%29&amp;rft.btitle=Implementors%27+intentions+concerning+R6RS&amp;rft.date=2007-10-26&amp;rft.genre=unknown&amp;rft_id=http%3A%2F%2Flists.r6rs.org%2Fpipermail%2Fr6rs-discuss%2F2007-October%2F003351.html&amp;rft.pub=Scheme+Steering+Committee%2C+r6rs-discuss+mailing+list&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook" class="Z3988"><span style="display:none;">&#160;</span></span></span></li>
<li id="cite_note-r7rs-draft-9-12"><span class="mw-cite-backlink"><b><a href="#cite_ref-r7rs-draft-9_12-0">^</a></b></span> <span class="reference-text"><cite class="citation web"><a rel="nofollow" class="external text" href="http://trac.sacrideo.us/wg/raw-attachment/wiki/WikiStart/r7rs-draft-9.pdf">"R7RS 9th draft available"</a> <span style="font-size:85%;">(PDF)</span>. 2013-04-15.</cite><span title="ctx_ver=Z39.88-2004&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3AScheme+%28programming+language%29&amp;rft.btitle=R7RS+9th+draft+available&amp;rft.date=2013-04-15&amp;rft.genre=unknown&amp;rft_id=http%3A%2F%2Ftrac.sacrideo.us%2Fwg%2Fraw-attachment%2Fwiki%2FWikiStart%2Fr7rs-draft-9.pdf&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook" class="Z3988"><span style="display:none;">&#160;</span></span></span></li>
<li id="cite_note-r7rs_clinger-13"><span class="mw-cite-backlink"><b><a href="#cite_ref-r7rs_clinger_13-0">^</a></b></span> <span class="reference-text"><cite class="citation web">Will Clinger (2013-05-10). <a rel="nofollow" class="external text" href="http://lists.scheme-reports.org/pipermail/scheme-reports/2013-May/003401.html">"extension of voting period"</a>. Scheme Language Steering Committee, scheme-reports mailing list<span class="reference-accessdate">. Retrieved <span class="nowrap">2013-07-07</span></span>.</cite><span title="ctx_ver=Z39.88-2004&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3AScheme+%28programming+language%29&amp;rft.au=Will+Clinger&amp;rft.btitle=extension+of+voting+period&amp;rft.date=2013-05-10&amp;rft.genre=unknown&amp;rft_id=http%3A%2F%2Flists.scheme-reports.org%2Fpipermail%2Fscheme-reports%2F2013-May%2F003401.html&amp;rft.pub=Scheme+Language+Steering+Committee%2C+scheme-reports+mailing+list&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook" class="Z3988"><span style="display:none;">&#160;</span></span></span></li>
<li id="cite_note-r7rs-14"><span class="mw-cite-backlink"><b><a href="#cite_ref-r7rs_14-0">^</a></b></span> <span class="reference-text"><cite class="citation web"><a rel="nofollow" class="external text" href="http://trac.sacrideo.us/wg/raw-attachment/wiki/WikiStart/r7rs.pdf">"R7RS final available"</a> <span style="font-size:85%;">(PDF)</span>. 2013-07-06.</cite><span title="ctx_ver=Z39.88-2004&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3AScheme+%28programming+language%29&amp;rft.btitle=R7RS+final+available&amp;rft.date=2013-07-06&amp;rft.genre=unknown&amp;rft_id=http%3A%2F%2Ftrac.sacrideo.us%2Fwg%2Fraw-attachment%2Fwiki%2FWikiStart%2Fr7rs.pdf&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook" class="Z3988"><span style="display:none;">&#160;</span></span></span></li>
<li id="cite_note-easy_to_implement_scheme48-15"><span class="mw-cite-backlink"><b><a href="#cite_ref-easy_to_implement_scheme48_15-0">^</a></b></span> <span class="reference-text">The <a href="/wiki/Scheme_48" title="Scheme 48">Scheme 48</a> implementation is so-named because the interpreter was written by Richard Kelsey and Jonathan Rees in 48 hours (August 6th&#160;– 7th, 1986. See <cite class="citation web">Richard Kelsey; Jonathan Rees; Mike Sperber (2008-01-10). <a rel="nofollow" class="external text" href="http://s48.org/1.8/manual/manual.html">"The Incomplete Scheme 48 Reference Manual for release 1.8"</a>. Jonathan Rees, s48.org<span class="reference-accessdate">. Retrieved <span class="nowrap">2012-08-09</span></span>.</cite><span title="ctx_ver=Z39.88-2004&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3AScheme+%28programming+language%29&amp;rft.au=Jonathan+Rees&amp;rft.au=Mike+Sperber&amp;rft.au=Richard+Kelsey&amp;rft.btitle=The+Incomplete+Scheme+48+Reference+Manual+for+release+1.8&amp;rft.date=2008-01-10&amp;rft.genre=unknown&amp;rft_id=http%3A%2F%2Fs48.org%2F1.8%2Fmanual%2Fmanual.html&amp;rft.pub=Jonathan+Rees%2C+s48.org&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook" class="Z3988"><span style="display:none;">&#160;</span></span></span></li>
<li id="cite_note-lambda_paper_1-16"><span class="mw-cite-backlink">^ <a href="#cite_ref-lambda_paper_1_16-0"><sup><i><b>a</b></i></sup></a> <a href="#cite_ref-lambda_paper_1_16-1"><sup><i><b>b</b></i></sup></a></span> <span class="reference-text"><cite class="citation journal">Gerald Jay Sussman &amp; Guy Lewis Steele, Jr. (December 1975). <a rel="nofollow" class="external text" href="http://library.readscheme.org/page1.html">"Scheme: An Interpreter for Extended Lambda Calculus"</a> <span style="font-size:85%;">(postscript or PDF)</span>. <i>AI Memos</i>. <a href="/wiki/MIT_Computer_Science_and_Artificial_Intelligence_Laboratory" title="MIT Computer Science and Artificial Intelligence Laboratory">MIT AI Lab</a>. AIM-349<span class="reference-accessdate">. Retrieved <span class="nowrap">2012-08-09</span></span>.</cite><span title="ctx_ver=Z39.88-2004&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3AScheme+%28programming+language%29&amp;rft.atitle=Scheme%3A+An+Interpreter+for+Extended+Lambda+Calculus&amp;rft.au=Gerald+Jay+Sussman&amp;rft.au=Guy+Lewis+Steele%2C+Jr.&amp;rft.date=1975-12&amp;rft.genre=article&amp;rft_id=http%3A%2F%2Flibrary.readscheme.org%2Fpage1.html&amp;rft.jtitle=AI+Memos&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Ajournal&amp;rft.volume=AIM-349" class="Z3988"><span style="display:none;">&#160;</span></span></span></li>
<li id="cite_note-Moses-17"><span class="mw-cite-backlink"><b><a href="#cite_ref-Moses_17-0">^</a></b></span> <span class="reference-text"><cite id="CITEREFJoel_Moses1970" class="citation"><a href="/wiki/Joel_Moses" title="Joel Moses">Joel Moses</a> (June 1970), <a rel="nofollow" class="external text" href="http://dspace.mit.edu/handle/1721.1/5854"><i>The Function of FUNCTION in LISP, or Why the FUNARG Problem Should Be Called the Environment Problem</i></a> <span style="font-size:85%;">(PDF)</span>, <a href="/wiki/AI_Memo" title="AI Memo">AI Memo</a> 199<span class="reference-accessdate">, retrieved <span class="nowrap">2012-08-09</span></span>, <q>A useful metaphor for the difference between FUNCTION and QUOTE in LISP is to think of QUOTE as a porous or an open covering of the function since free variables escape to the current environment. FUNCTION acts as a closed or nonporous covering (hence the term "closure" used by Landin). Thus we talk of "open" Lambda expressions (functions in LISP are usually Lambda expressions) and "closed" Lambda expressions. [...] My interest in the environment problem began while Landin, who had a deep understanding of the problem, visited MIT during 1966-67. I then realized the correspondence between the FUNARG lists which are the results of the evaluation of "closed" Lambda expressions in <a href="/wiki/LISP_1.5" class="mw-redirect" title="LISP 1.5">LISP</a> and <a href="/wiki/ISWIM" title="ISWIM">ISWIM</a>'s Lambda Closures.</q></cite><span title="ctx_ver=Z39.88-2004&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3AScheme+%28programming+language%29&amp;rft.au=Joel+Moses&amp;rft.btitle=The+Function+of+FUNCTION+in+LISP%2C+or+Why+the+FUNARG+Problem+Should+Be+Called+the+Environment+Problem&amp;rft.date=1970-06&amp;rft.genre=book&amp;rft_id=http%3A%2F%2Fdspace.mit.edu%2Fhandle%2F1721.1%2F5854&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook" class="Z3988"><span style="display:none;">&#160;</span></span></span></li>
<li id="cite_note-lambda_paper_2-18"><span class="mw-cite-backlink"><b><a href="#cite_ref-lambda_paper_2_18-0">^</a></b></span> <span class="reference-text"><cite class="citation journal">Gerald Jay Sussman &amp; Guy Lewis Steele, Jr. (March 1976). <a rel="nofollow" class="external text" href="http://library.readscheme.org/page1.html">"Lambda: The Ultimate Imperative"</a> <span style="font-size:85%;">(postscript or PDF)</span>. <i>AI Memos</i>. <a href="/wiki/MIT_Computer_Science_and_Artificial_Intelligence_Laboratory" title="MIT Computer Science and Artificial Intelligence Laboratory">MIT AI Lab</a>. AIM-353<span class="reference-accessdate">. Retrieved <span class="nowrap">2012-08-09</span></span>.</cite><span title="ctx_ver=Z39.88-2004&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3AScheme+%28programming+language%29&amp;rft.atitle=Lambda%3A+The+Ultimate+Imperative&amp;rft.au=Gerald+Jay+Sussman&amp;rft.au=Guy+Lewis+Steele%2C+Jr.&amp;rft.date=1976-03&amp;rft.genre=article&amp;rft_id=http%3A%2F%2Flibrary.readscheme.org%2Fpage1.html&amp;rft.jtitle=AI+Memos&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Ajournal&amp;rft.volume=AIM-353" class="Z3988"><span style="display:none;">&#160;</span></span></span></li>
<li id="cite_note-19"><span class="mw-cite-backlink"><b><a href="#cite_ref-19">^</a></b></span> <span class="reference-text"><cite class="citation news"><a href="/wiki/Richard_P._Gabriel" title="Richard P. Gabriel">Gabriel, Richard P.</a>; <a href="/wiki/Kent_Pitman" title="Kent Pitman">Pitman, Kent</a> (1988). <a rel="nofollow" class="external text" href="http://www.nhplace.com/kent/Papers/Technical-Issues.html">"Technical Issues of Separation in Function Cells and Value Cells"</a>. <i>Lisp and Symbolic Computation</i>. <b>1</b> (1) (published June 1988). pp.&#160;81–101. <a href="/wiki/Digital_object_identifier" title="Digital object identifier">doi</a>:<a rel="nofollow" class="external text" href="//dx.doi.org/10.1007%2FBF01806178">10.1007/BF01806178</a><span class="reference-accessdate">. Retrieved <span class="nowrap">2012-08-09</span></span>.</cite><span title="ctx_ver=Z39.88-2004&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3AScheme+%28programming+language%29&amp;rft.atitle=Technical+Issues+of+Separation+in+Function+Cells+and+Value+Cells&amp;rft.aufirst=Richard+P.&amp;rft.aulast=Gabriel&amp;rft.au=Pitman%2C+Kent&amp;rft.date=1988&amp;rft.genre=article&amp;rft_id=http%3A%2F%2Fwww.nhplace.com%2Fkent%2FPapers%2FTechnical-Issues.html&amp;rft_id=info%3Adoi%2F10.1007%2FBF01806178&amp;rft.issue=1&amp;rft.jtitle=Lisp+and+Symbolic+Computation&amp;rft.pages=81-101&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Ajournal&amp;rft.volume=1" class="Z3988"><span style="display:none;">&#160;</span></span></span></li>
<li id="cite_note-srfi-41-20"><span class="mw-cite-backlink">^ <a href="#cite_ref-srfi-41_20-0"><sup><i><b>a</b></i></sup></a> <a href="#cite_ref-srfi-41_20-1"><sup><i><b>b</b></i></sup></a></span> <span class="reference-text"><cite class="citation web">Philip L. Bewig (2008-01-24). <a rel="nofollow" class="external text" href="http://srfi.schemers.org/srfi-41/srfi-41.html">"SRFI 41: Streams"</a>. The SRFI Editors, schemers.org<span class="reference-accessdate">. Retrieved <span class="nowrap">2012-08-09</span></span>.</cite><span title="ctx_ver=Z39.88-2004&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3AScheme+%28programming+language%29&amp;rft.au=Philip+L.+Bewig&amp;rft.btitle=SRFI+41%3A+Streams&amp;rft.date=2008-01-24&amp;rft.genre=unknown&amp;rft_id=http%3A%2F%2Fsrfi.schemers.org%2Fsrfi-41%2Fsrfi-41.html&amp;rft.pub=The+SRFI+Editors%2C+schemers.org&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook" class="Z3988"><span style="display:none;">&#160;</span></span></span></li>
<li id="cite_note-r4rs-21"><span class="mw-cite-backlink"><b><a href="#cite_ref-r4rs_21-0">^</a></b></span> <span class="reference-text"><cite class="citation journal">William Clinger and Jonathan Rees, editors (1991). <a rel="nofollow" class="external text" href="http://www.cs.indiana.edu/scheme-repository/R4RS/r4rs_toc.html">"Revised<sup>4</sup> Report on the Algorithmic Language Scheme"</a>. <i>ACM Lisp Pointers</i>. <b>4</b> (3): 1–55<span class="reference-accessdate">. Retrieved <span class="nowrap">2012-08-09</span></span>.</cite><span title="ctx_ver=Z39.88-2004&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3AScheme+%28programming+language%29&amp;rft.atitle=Revised%3Csup%3E4%3C%2Fsup%3E+Report+on+the+Algorithmic+Language+Scheme&amp;rft.au=William+Clinger+and+Jonathan+Rees%2C+editors&amp;rft.date=1991&amp;rft.genre=article&amp;rft_id=http%3A%2F%2Fwww.cs.indiana.edu%2Fscheme-repository%2FR4RS%2Fr4rs_toc.html&amp;rft.issue=3&amp;rft.jtitle=ACM+Lisp+Pointers&amp;rft.pages=1-55&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Ajournal&amp;rft.volume=4" class="Z3988"><span style="display:none;">&#160;</span></span></span></li>
<li id="cite_note-rees_1992-22"><span class="mw-cite-backlink"><b><a href="#cite_ref-rees_1992_22-0">^</a></b></span> <span class="reference-text">Jonathan Rees, <a rel="nofollow" class="external text" href="http://mumble.net/~jar/pubs/scheme-of-things/june-92-meeting.ps">The Scheme of Things The June 1992 Meeting</a> (postscript), in Lisp Pointers, V(4), October–December 1992. Retrieved 2012-08-09</span></li>
<li id="cite_note-23"><span class="mw-cite-backlink"><b><a href="#cite_ref-23">^</a></b></span> <span class="reference-text"><cite class="citation web">Taylor Campbell (2005-07-21). <a rel="nofollow" class="external text" href="http://srfi.schemers.org/srfi-62/srfi-62.html">"SRFI 62: S-expression comments"</a>. The SRFI Editors, schemers.org<span class="reference-accessdate">. Retrieved <span class="nowrap">2012-08-09</span></span>.</cite><span title="ctx_ver=Z39.88-2004&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3AScheme+%28programming+language%29&amp;rft.au=Taylor+Campbell&amp;rft.btitle=SRFI+62%3A+S-expression+comments&amp;rft.date=2005-07-21&amp;rft.genre=unknown&amp;rft_id=http%3A%2F%2Fsrfi.schemers.org%2Fsrfi-62%2Fsrfi-62.html&amp;rft.pub=The+SRFI+Editors%2C+schemers.org&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook" class="Z3988"><span style="display:none;">&#160;</span></span></span></li>
<li id="cite_note-srfi-6-24"><span class="mw-cite-backlink"><b><a href="#cite_ref-srfi-6_24-0">^</a></b></span> <span class="reference-text"><cite class="citation web">William D Clinger (1999-07-01). <a rel="nofollow" class="external text" href="http://srfi.schemers.org/srfi-6/srfi-6.html">"SRFI 6: Basic String Ports"</a>. The SRFI Editors, schemers.org<span class="reference-accessdate">. Retrieved <span class="nowrap">2012-08-09</span></span>.</cite><span title="ctx_ver=Z39.88-2004&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3AScheme+%28programming+language%29&amp;rft.au=William+D+Clinger&amp;rft.btitle=SRFI+6%3A+Basic+String+Ports&amp;rft.date=1999-07-01&amp;rft.genre=unknown&amp;rft_id=http%3A%2F%2Fsrfi.schemers.org%2Fsrfi-6%2Fsrfi-6.html&amp;rft.pub=The+SRFI+Editors%2C+schemers.org&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook" class="Z3988"><span style="display:none;">&#160;</span></span></span></li>
<li id="cite_note-srfi-28-25"><span class="mw-cite-backlink"><b><a href="#cite_ref-srfi-28_25-0">^</a></b></span> <span class="reference-text"><cite class="citation web">Scott G. Miller (2002-06-25). <a rel="nofollow" class="external text" href="http://srfi.schemers.org/srfi-28/srfi-28.html">"SRFI 28: Basic Format Strings"</a>. The SRFI Editors, schemers.org<span class="reference-accessdate">. Retrieved <span class="nowrap">2012-08-09</span></span>.</cite><span title="ctx_ver=Z39.88-2004&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3AScheme+%28programming+language%29&amp;rft.au=Scott+G.+Miller&amp;rft.btitle=SRFI+28%3A+Basic+Format+Strings&amp;rft.date=2002-06-25&amp;rft.genre=unknown&amp;rft_id=http%3A%2F%2Fsrfi.schemers.org%2Fsrfi-28%2Fsrfi-28.html&amp;rft.pub=The+SRFI+Editors%2C+schemers.org&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook" class="Z3988"><span style="display:none;">&#160;</span></span></span></li>
<li id="cite_note-algol_report-26"><span class="mw-cite-backlink"><b><a href="#cite_ref-algol_report_26-0">^</a></b></span> <span class="reference-text"><cite class="citation journal">J.W. Backus; F.L. Bauer; J.Green; C. Katz; J. McCarthy P. Naur; et al. (January–April 1960). <a rel="nofollow" class="external text" href="http://www.masswerk.at/algol60/report.htm">"Revised Report on the Algorithmic Language Algol 60"</a>. <i>Numerische Mathematik, Communications of the ACM, and Journal of the British Computer Society</i><span class="reference-accessdate">. Retrieved <span class="nowrap">2012-08-09</span></span>.</cite><span title="ctx_ver=Z39.88-2004&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3AScheme+%28programming+language%29&amp;rft.atitle=Revised+Report+on+the+Algorithmic+Language+Algol+60&amp;rft.au=C.+Katz&amp;rft.au=F.L.+Bauer&amp;rft.au=J.Green&amp;rft.au=J.+McCarthy+P.+Naur&amp;rft.au=J.W.+Backus&amp;rft.date=1960-01%2F1960-04&amp;rft.genre=article&amp;rft_id=http%3A%2F%2Fwww.masswerk.at%2Falgol60%2Freport.htm&amp;rft.jtitle=Numerische+Mathematik%2C+Communications+of+the+ACM%2C+and+Journal+of+the+British+Computer+Society&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Ajournal" class="Z3988"><span style="display:none;">&#160;</span></span></span></li>
<li id="cite_note-r3rs-27"><span class="mw-cite-backlink"><b><a href="#cite_ref-r3rs_27-0">^</a></b></span> <span class="reference-text"><cite class="citation journal">Jonathan Rees; William Clinger, eds. (December 1986). <a rel="nofollow" class="external text" href="http://groups.csail.mit.edu/mac/ftpdir/scheme-reports/r3rs-html/r3rs_toc.html">"Revised(3) Report on the Algorithmic Language Scheme (Dedicated to the Memory of ALGOL 60)"</a>. <i>ACM SIGPLAN Notices</i>. <b>21</b> (12): 37–79. <a href="/wiki/Digital_object_identifier" title="Digital object identifier">doi</a>:<a rel="nofollow" class="external text" href="//dx.doi.org/10.1145%2F15042.15043">10.1145/15042.15043</a><span class="reference-accessdate">. Retrieved <span class="nowrap">2012-08-09</span></span>.</cite><span title="ctx_ver=Z39.88-2004&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3AScheme+%28programming+language%29&amp;rft.atitle=Revised%283%29+Report+on+the+Algorithmic+Language+Scheme+%28Dedicated+to+the+Memory+of+ALGOL+60%29&amp;rft.date=1986-12&amp;rft.genre=article&amp;rft_id=http%3A%2F%2Fgroups.csail.mit.edu%2Fmac%2Fftpdir%2Fscheme-reports%2Fr3rs-html%2Fr3rs_toc.html&amp;rft_id=info%3Adoi%2F10.1145%2F15042.15043&amp;rft.issue=12&amp;rft.jtitle=ACM+SIGPLAN+Notices&amp;rft.pages=37-79&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Ajournal&amp;rft.volume=21" class="Z3988"><span style="display:none;">&#160;</span></span></span></li>
<li id="cite_note-srfi_support-28"><span class="mw-cite-backlink"><b><a href="#cite_ref-srfi_support_28-0">^</a></b></span> <span class="reference-text"><cite class="citation web"><a rel="nofollow" class="external text" href="http://srfi.schemers.org/srfi-implementers.html">"Scheme Systems Supporting SRFIs"</a>. The SRFI Editors, schemers.org. 2009-08-30<span class="reference-accessdate">. Retrieved <span class="nowrap">2012-08-09</span></span>.</cite><span title="ctx_ver=Z39.88-2004&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3AScheme+%28programming+language%29&amp;rft.btitle=Scheme+Systems+Supporting+SRFIs&amp;rft.date=2009-08-30&amp;rft.genre=unknown&amp;rft_id=http%3A%2F%2Fsrfi.schemers.org%2Fsrfi-implementers.html&amp;rft.pub=The+SRFI+Editors%2C+schemers.org&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook" class="Z3988"><span style="display:none;">&#160;</span></span></span></li>
<li id="cite_note-scheme_implementations-29"><span class="mw-cite-backlink"><b><a href="#cite_ref-scheme_implementations_29-0">^</a></b></span> <span class="reference-text">75 known implementations of Scheme are listed by <cite class="citation web"><a rel="nofollow" class="external text" href="http://community.schemewiki.org/?scheme-faq-standards#implementations">"scheme-faq-standards"</a>. Community Scheme Wiki. 2009-06-25<span class="reference-accessdate">. Retrieved <span class="nowrap">2009-10-20</span></span>.</cite><span title="ctx_ver=Z39.88-2004&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3AScheme+%28programming+language%29&amp;rft.btitle=scheme-faq-standards&amp;rft.date=2009-06-25&amp;rft.genre=unknown&amp;rft_id=http%3A%2F%2Fcommunity.schemewiki.org%2F%3Fscheme-faq-standards%23implementations&amp;rft.pub=Community+Scheme+Wiki&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook" class="Z3988"><span style="display:none;">&#160;</span></span></span></li>
<li id="cite_note-schemers_inc-30"><span class="mw-cite-backlink"><b><a href="#cite_ref-schemers_inc_30-0">^</a></b></span> <span class="reference-text"><cite class="citation web">Ed Martin (2009-07-20). <a rel="nofollow" class="external text" href="http://www.schemers.com/schools.html">"List of Scheme-using schools"</a>. Schemers Inc<span class="reference-accessdate">. Retrieved <span class="nowrap">2009-10-20</span></span>.</cite><span title="ctx_ver=Z39.88-2004&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3AScheme+%28programming+language%29&amp;rft.au=Ed+Martin&amp;rft.btitle=List+of+Scheme-using+schools&amp;rft.date=2009-07-20&amp;rft.genre=unknown&amp;rft_id=http%3A%2F%2Fwww.schemers.com%2Fschools.html&amp;rft.pub=Schemers+Inc.&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook" class="Z3988"><span style="display:none;">&#160;</span></span></span></li>
<li id="cite_note-sicp_adopters-31"><span class="mw-cite-backlink"><b><a href="#cite_ref-sicp_adopters_31-0">^</a></b></span> <span class="reference-text"><cite class="citation web"><a rel="nofollow" class="external text" href="http://mitpress.mit.edu/sicp/adopt-list.html">"List of SICP-using schools"</a>. MIT Press. 1999-01-26<span class="reference-accessdate">. Retrieved <span class="nowrap">2009-10-20</span></span>.</cite><span title="ctx_ver=Z39.88-2004&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3AScheme+%28programming+language%29&amp;rft.btitle=List+of+SICP-using+schools&amp;rft.date=1999-01-26&amp;rft.genre=unknown&amp;rft_id=http%3A%2F%2Fmitpress.mit.edu%2Fsicp%2Fadopt-list.html&amp;rft.pub=MIT+Press&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook" class="Z3988"><span style="display:none;">&#160;</span></span></span></li>
<li id="cite_note-6.001-32"><span class="mw-cite-backlink"><b><a href="#cite_ref-6.001_32-0">^</a></b></span> <span class="reference-text"><cite class="citation web"><a href="/wiki/Eric_Grimson" title="Eric Grimson">Eric Grimson</a> (Spring 2005). <a rel="nofollow" class="external text" href="http://ocw.mit.edu/OcwWeb/Electrical-Engineering-and-Computer-Science/6-001Spring-2005/CourseHome/index.htm">"6.001 Structure and Interpretation of Computer Programs"</a>. MIT Open Courseware<span class="reference-accessdate">. Retrieved <span class="nowrap">2009-10-20</span></span>.</cite><span title="ctx_ver=Z39.88-2004&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3AScheme+%28programming+language%29&amp;rft.au=Eric+Grimson&amp;rft.btitle=6.001+Structure+and+Interpretation+of+Computer+Programs&amp;rft.date=2005&amp;rft.genre=unknown&amp;rft_id=http%3A%2F%2Focw.mit.edu%2FOcwWeb%2FElectrical-Engineering-and-Computer-Science%2F6-001Spring-2005%2FCourseHome%2Findex.htm&amp;rft.pub=MIT+Open+Courseware&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook" class="Z3988"><span style="display:none;">&#160;</span></span></span></li>
<li id="cite_note-6.001_zombies-33"><span class="mw-cite-backlink"><b><a href="#cite_ref-6.001_zombies_33-0">^</a></b></span> <span class="reference-text"><cite class="citation web">Alex Vandiver; Nelson Elhage; et al. (January 2009). <a rel="nofollow" class="external text" href="http://web.mit.edu/alexmv/6.001/">"6.184 - Zombies drink caffeinated 6.001"</a>. MIT CSAIL<span class="reference-accessdate">. Retrieved <span class="nowrap">2009-10-20</span></span>.</cite><span title="ctx_ver=Z39.88-2004&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3AScheme+%28programming+language%29&amp;rft.au=Alex+Vandiver&amp;rft.au=Nelson+Elhage&amp;rft.btitle=6.184+-+Zombies+drink+caffeinated+6.001&amp;rft.date=2009-01&amp;rft.genre=unknown&amp;rft_id=http%3A%2F%2Fweb.mit.edu%2Falexmv%2F6.001%2F&amp;rft.pub=MIT+CSAIL&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook" class="Z3988"><span style="display:none;">&#160;</span></span></span></li>
<li id="cite_note-neu-34"><span class="mw-cite-backlink"><b><a href="#cite_ref-neu_34-0">^</a></b></span> <span class="reference-text"><a rel="nofollow" class="external text" href="http://www.ccs.neu.edu/course/cs2500/">CS 2500: Fundamentals of Computer Science I</a>, <a href="/wiki/Northeastern_University" title="Northeastern University">Northeastern University</a></span></li>
<li id="cite_note-wpi-35"><span class="mw-cite-backlink"><b><a href="#cite_ref-wpi_35-0">^</a></b></span> <span class="reference-text"><a rel="nofollow" class="external text" href="http://web.cs.wpi.edu/~cs1101/a05/details.html#software">CS 1101: Introduction to Program Design (A05): course software</a>, <a href="/wiki/Worcester_Polytechnic_Institute" title="Worcester Polytechnic Institute">Worcester Polytechnic Institute</a></span></li>
<li id="cite_note-rhit-36"><span class="mw-cite-backlink"><b><a href="#cite_ref-rhit_36-0">^</a></b></span> <span class="reference-text"><cite class="citation web"><a rel="nofollow" class="external text" href="https://www.rose-hulman.edu/Users/faculty/young/CS-Classes/csse304/syllabus.html">"CSSE 304: Programming Language Concepts"</a>. <a href="/wiki/Rose-Hulman_Institute_of_Technology" title="Rose-Hulman Institute of Technology">Rose-Hulman Institute of Technology</a>.</cite><span title="ctx_ver=Z39.88-2004&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3AScheme+%28programming+language%29&amp;rft.btitle=CSSE+304%3A+Programming+Language+Concepts&amp;rft.genre=unknown&amp;rft_id=https%3A%2F%2Fwww.rose-hulman.edu%2FUsers%2Ffaculty%2Fyoung%2FCS-Classes%2Fcsse304%2Fsyllabus.html&amp;rft.pub=Rose-Hulman+Institute+of+Technology&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook" class="Z3988"><span style="display:none;">&#160;</span></span></span></li>
<li id="cite_note-61A-37"><span class="mw-cite-backlink"><b><a href="#cite_ref-61A_37-0">^</a></b></span> <span class="reference-text"><cite class="citation web">Brian Harvey (Fall 2009). <a rel="nofollow" class="external text" href="http://inst.eecs.berkeley.edu/~cs61a/">"Computer Science 61A, Berkeley"</a>. Department of Electrical Engineering and Computer Sciences, Berkeley<span class="reference-accessdate">. Retrieved <span class="nowrap">2009-10-20</span></span>.</cite><span title="ctx_ver=Z39.88-2004&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3AScheme+%28programming+language%29&amp;rft.au=Brian+Harvey&amp;rft.btitle=Computer+Science+61A%2C+Berkeley&amp;rft.date=2009&amp;rft.genre=unknown&amp;rft_id=http%3A%2F%2Finst.eecs.berkeley.edu%2F~cs61a%2F&amp;rft.pub=Department+of+Electrical+Engineering+and+Computer+Sciences%2C+Berkeley&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook" class="Z3988"><span style="display:none;">&#160;</span></span></span></li>
<li id="cite_note-yale_cs201-38"><span class="mw-cite-backlink"><b><a href="#cite_ref-yale_cs201_38-0">^</a></b></span> <span class="reference-text"><cite class="citation web">Dana Angluin (Fall 2009). <a rel="nofollow" class="external text" href="http://zoo.cs.yale.edu/classes/cs201/">"Introduction to Computer Science (CPSC 201)"</a>. The Zoo, Yale University Computer Science Department<span class="reference-accessdate">. Retrieved <span class="nowrap">2009-10-20</span></span>.</cite><span title="ctx_ver=Z39.88-2004&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3AScheme+%28programming+language%29&amp;rft.au=Dana+Angluin&amp;rft.btitle=Introduction+to+Computer+Science+%28CPSC+201%29&amp;rft.date=2009&amp;rft.genre=unknown&amp;rft_id=http%3A%2F%2Fzoo.cs.yale.edu%2Fclasses%2Fcs201%2F&amp;rft.pub=The+Zoo%2C+Yale+University+Computer+Science+Department&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook" class="Z3988"><span style="display:none;">&#160;</span></span></span></li>
<li id="cite_note-neu2-39"><span class="mw-cite-backlink"><b><a href="#cite_ref-neu2_39-0">^</a></b></span> <span class="reference-text"><cite class="citation web"><a rel="nofollow" class="external text" href="http://www.ccs.neu.edu/home/matthias/107-f08/readings.html">"Programming Design Paradigms CSG107 Course Readings"</a>. Northeastern University College of Computer and Information Science. Fall 2009<span class="reference-accessdate">. Retrieved <span class="nowrap">2012-08-09</span></span>.</cite><span title="ctx_ver=Z39.88-2004&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3AScheme+%28programming+language%29&amp;rft.btitle=Programming+Design+Paradigms+CSG107+Course+Readings&amp;rft.date=2009&amp;rft.genre=unknown&amp;rft_id=http%3A%2F%2Fwww.ccs.neu.edu%2Fhome%2Fmatthias%2F107-f08%2Freadings.html&amp;rft.pub=Northeastern+University+College+of+Computer+and+Information+Science&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook" class="Z3988"><span style="display:none;">&#160;</span></span></span></li>
<li id="cite_note-umn-40"><span class="mw-cite-backlink"><b><a href="#cite_ref-umn_40-0">^</a></b></span> <span class="reference-text"><a rel="nofollow" class="external text" href="http://www-users.itlabs.umn.edu/classes/Spring-2010/csci1901/">Structure of Computer Programming I</a>, Computer Science Department, University of Minnesota, Spring 2010 (accessed 2010-1-30).</span></li>
<li id="cite_note-dsssl-41"><span class="mw-cite-backlink"><b><a href="#cite_ref-dsssl_41-0">^</a></b></span> <span class="reference-text"><cite class="citation web">Robin Cover (2002-02-25). <a rel="nofollow" class="external text" href="http://xml.coverpages.org/dsssl.html">"DSSSL - Document Style Semantics and Specification Language. ISO/IEC 10179:1996"</a>. Cover Pages<span class="reference-accessdate">. Retrieved <span class="nowrap">2012-08-09</span></span>.</cite><span title="ctx_ver=Z39.88-2004&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3AScheme+%28programming+language%29&amp;rft.au=Robin+Cover&amp;rft.btitle=DSSSL+-+Document+Style+Semantics+and+Specification+Language.+ISO%2FIEC+10179%3A1996&amp;rft.date=2002-02-25&amp;rft.genre=unknown&amp;rft_id=http%3A%2F%2Fxml.coverpages.org%2Fdsssl.html&amp;rft.pub=Cover+Pages&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook" class="Z3988"><span style="display:none;">&#160;</span></span></span></li>
<li id="cite_note-gimp-42"><span class="mw-cite-backlink"><b><a href="#cite_ref-gimp_42-0">^</a></b></span> <span class="reference-text">"<i>The major scripting language for the GIMP that has been attached to it today is Scheme.</i>" From <cite class="citation web">Dov Grobgeld (2002). <a rel="nofollow" class="external text" href="http://www.gimp.org/tutorials/Basic_Scheme/">"The GIMP Basic Scheme Tutorial"</a>. The GIMP Team<span class="reference-accessdate">. Retrieved <span class="nowrap">2012-08-09</span></span>.</cite><span title="ctx_ver=Z39.88-2004&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3AScheme+%28programming+language%29&amp;rft.au=Dov+Grobgeld&amp;rft.btitle=The+GIMP+Basic+Scheme+Tutorial&amp;rft.date=2002&amp;rft.genre=unknown&amp;rft_id=http%3A%2F%2Fwww.gimp.org%2Ftutorials%2FBasic_Scheme%2F&amp;rft.pub=The+GIMP+Team&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook" class="Z3988"><span style="display:none;">&#160;</span></span></span></li>
<li id="cite_note-archive_gnomefaq-43"><span class="mw-cite-backlink"><b><a href="#cite_ref-archive_gnomefaq_43-0">^</a></b></span> <span class="reference-text"><cite class="citation web">Todd Graham Lewis; David Zoll; Julian Missig (2002). <a rel="nofollow" class="external text" href="https://web.archive.org/web/20000522010523/http://www.gnome.org/gnomefaq/html/x930.html">"GNOME FAQ from Internet Archive"</a>. The Gnome Team, gnome.org. Archived from <a rel="nofollow" class="external text" href="http://www.gnome.org/gnomefaq/html/x930.html">the original</a> on 2000-05-22<span class="reference-accessdate">. Retrieved <span class="nowrap">2012-08-09</span></span>.</cite><span title="ctx_ver=Z39.88-2004&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3AScheme+%28programming+language%29&amp;rft.au=David+Zoll&amp;rft.au=Julian+Missig&amp;rft.au=Todd+Graham+Lewis&amp;rft.btitle=GNOME+FAQ+from+Internet+Archive&amp;rft.date=2002&amp;rft.genre=unknown&amp;rft_id=http%3A%2F%2Fwww.gnome.org%2Fgnomefaq%2Fhtml%2Fx930.html&amp;rft.pub=The+Gnome+Team%2C+gnome.org&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook" class="Z3988"><span style="display:none;">&#160;</span></span></span></li>
<li id="cite_note-live_gnome-44"><span class="mw-cite-backlink"><b><a href="#cite_ref-live_gnome_44-0">^</a></b></span> <span class="reference-text"><cite class="citation web"><a rel="nofollow" class="external text" href="https://www.gnu.org/software/guile-gnome/">"guile-gnome"</a>. Free Software Foundation<span class="reference-accessdate">. Retrieved <span class="nowrap">2012-08-09</span></span>.</cite><span title="ctx_ver=Z39.88-2004&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3AScheme+%28programming+language%29&amp;rft.btitle=guile-gnome&amp;rft.genre=unknown&amp;rft_id=https%3A%2F%2Fwww.gnu.org%2Fsoftware%2Fguile-gnome%2F&amp;rft.pub=Free+Software+Foundation&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook" class="Z3988"><span style="display:none;">&#160;</span></span></span></li>
<li id="cite_note-tcad-45"><span class="mw-cite-backlink"><b><a href="#cite_ref-tcad_45-0">^</a></b></span> <span class="reference-text"><cite class="citation web">Laurence Brevard (2006-11-09). <a rel="nofollow" class="external text" href="http://www.synopsys.com/community/interoperability/documents/devforum_pres/2006nov/milkywaysession_mapin_overview.pdf">"Synopsys MAP-in<sup>SM</sup> Program Update: EDA Interoperability Developers' Forum"</a> <span style="font-size:85%;">(PDF)</span>. Synopsis Inc<span class="reference-accessdate">. Retrieved <span class="nowrap">2012-08-09</span></span>.</cite><span title="ctx_ver=Z39.88-2004&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3AScheme+%28programming+language%29&amp;rft.au=Laurence+Brevard&amp;rft.btitle=Synopsys+MAP-in%3Csup%3ESM%3C%2Fsup%3E+Program+Update%3A+EDA+Interoperability+Developers%99+Forum&amp;rft.date=2006-11-09&amp;rft.genre=unknown&amp;rft_id=http%3A%2F%2Fwww.synopsys.com%2Fcommunity%2Finteroperability%2Fdocuments%2Fdevforum_pres%2F2006nov%2Fmilkywaysession_mapin_overview.pdf&amp;rft.pub=Synopsis+Inc&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook" class="Z3988"><span style="display:none;">&#160;</span></span></span></li>
<li id="cite_note-shiro_kawai-46"><span class="mw-cite-backlink"><b><a href="#cite_ref-shiro_kawai_46-0">^</a></b></span> <span class="reference-text"><cite class="citation journal">Kawai, Shiro (October 2002). <a rel="nofollow" class="external text" href="http://practical-scheme.net/docs/ILC2002.html">"Gluing Things Together - Scheme in the Real-time CG Content Production"</a>. <i>Proceedings of the First International Lisp Conference, San Francisco</i>: 342–348<span class="reference-accessdate">. Retrieved <span class="nowrap">2012-08-09</span></span>.</cite><span title="ctx_ver=Z39.88-2004&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3AScheme+%28programming+language%29&amp;rft.atitle=Gluing+Things+Together+-+Scheme+in+the+Real-time+CG+Content+Production&amp;rft.aufirst=Shiro&amp;rft.aulast=Kawai&amp;rft.date=2002-10&amp;rft.genre=article&amp;rft_id=http%3A%2F%2Fpractical-scheme.net%2Fdocs%2FILC2002.html&amp;rft.jtitle=Proceedings+of+the+First+International+Lisp+Conference%2C+San+Francisco&amp;rft.pages=342-348&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Ajournal" class="Z3988"><span style="display:none;">&#160;</span></span></span></li>
<li id="cite_note-android-47"><span class="mw-cite-backlink"><b><a href="#cite_ref-android_47-0">^</a></b></span> <span class="reference-text"><cite class="citation web">Bill Magnuson; Hal Abelson &amp; Mark Friedman (2009-08-11). <a rel="nofollow" class="external text" href="http://googleresearch.blogspot.com/2009/08/under-hood-of-app-inventor-for-android.html">"Under the Hood of App Inventor for Android"</a>. Google Inc, Official Google Research blog<span class="reference-accessdate">. Retrieved <span class="nowrap">2012-08-09</span></span>.</cite><span title="ctx_ver=Z39.88-2004&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3AScheme+%28programming+language%29&amp;rft.au=Bill+Magnuson&amp;rft.au=Hal+Abelson&amp;rft.au=Mark+Friedman&amp;rft.btitle=Under+the+Hood+of+App+Inventor+for+Android&amp;rft.date=2009-08-11&amp;rft.genre=unknown&amp;rft_id=http%3A%2F%2Fgoogleresearch.blogspot.com%2F2009%2F08%2Funder-hood-of-app-inventor-for-android.html&amp;rft.pub=Google+Inc%2C+Official+Google+Research+blog&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook" class="Z3988"><span style="display:none;">&#160;</span></span></span></li>
<li id="cite_note-48"><span class="mw-cite-backlink"><b><a href="#cite_ref-48">^</a></b></span> <span class="reference-text"><cite class="citation news">Felleisen; Findler; Flatt; Krishnamurthi (2004). <a rel="nofollow" class="external text" href="http://www.ccs.neu.edu/scheme/pubs/#jfp2004-fffk">"The Structure and Interpretation of the Computer Science Curriculum"</a>. <i>Journal of Functional Programming</i><span class="reference-accessdate">. Retrieved <span class="nowrap">2012-08-09</span></span>.</cite><span title="ctx_ver=Z39.88-2004&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3AScheme+%28programming+language%29&amp;rft.atitle=The+Structure+and+Interpretation+of+the+Computer+Science+Curriculum&amp;rft.au=Felleisen&amp;rft.au=Findler&amp;rft.au=Flatt&amp;rft.au=Krishnamurthi&amp;rft.date=2004&amp;rft.genre=article&amp;rft_id=http%3A%2F%2Fwww.ccs.neu.edu%2Fscheme%2Fpubs%2F%23jfp2004-fffk&amp;rft.jtitle=Journal+of+Functional+Programming&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Ajournal" class="Z3988"><span style="display:none;">&#160;</span></span></span></li>
<li id="cite_note-49"><span class="mw-cite-backlink"><b><a href="#cite_ref-49">^</a></b></span> <span class="reference-text"><cite class="citation web"><a rel="nofollow" class="external text" href="http://sourceforge.net/projects/nazghul/?source=directory">"Nazghul Project"</a>.</cite><span title="ctx_ver=Z39.88-2004&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3AScheme+%28programming+language%29&amp;rft.btitle=Nazghul+Project&amp;rft.genre=unknown&amp;rft_id=http%3A%2F%2Fsourceforge.net%2Fprojects%2Fnazghul%2F%3Fsource%3Ddirectory&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook" class="Z3988"><span style="display:none;">&#160;</span></span></span></li>
</ol>
</div>
<h2><span class="mw-headline" id="Further_reading">Further reading</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/w/index.php?title=Scheme_(programming_language)&amp;action=edit&amp;section=35" title="Edit section: Further reading">edit</a><span class="mw-editsection-bracket">]</span></span></h2>
<ul>
<li><a rel="nofollow" class="external text" href="ftp://ftp.cs.utexas.edu/pub/garbage/cs345/schintro-v14/schintro_toc.html">An Introduction to Scheme and its Implementation</a> (<a rel="nofollow" class="external text" href="http://icem-www.folkwang-hochschule.de/~finnendahl/cm_kurse/doc/schintro/schintro_toc.html">a mirror</a>)</li>
<li><cite class="citation web">Christopher T. Haynes (1999-06-22). <a rel="nofollow" class="external text" href="http://acm.org/tsc/sstd.html">"The Scheme Programming Language Standardization Experience"</a>.</cite><span title="ctx_ver=Z39.88-2004&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3AScheme+%28programming+language%29&amp;rft.au=Christopher+T.+Haynes&amp;rft.btitle=The+Scheme+Programming+Language+Standardization+Experience&amp;rft.date=1999-06-22&amp;rft.genre=unknown&amp;rft_id=http%3A%2F%2Facm.org%2Ftsc%2Fsstd.html&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook" class="Z3988"><span style="display:none;">&#160;</span></span></li>
<li><cite class="citation web"><a href="/wiki/Guy_L._Steele,_Jr." class="mw-redirect" title="Guy L. Steele, Jr.">Guy L. Steele, Jr.</a>, <a href="/wiki/Richard_P._Gabriel" title="Richard P. Gabriel">Richard P. Gabriel</a>. <a rel="nofollow" class="external text" href="http://www.dreamsongs.org/Files/HOPL2-Uncut.pdf">"The Evolution of Lisp"</a> <span style="font-size:85%;">(PDF)</span>.</cite><span title="ctx_ver=Z39.88-2004&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3AScheme+%28programming+language%29&amp;rft.au=Guy+L.+Steele%2C+Jr.%2C+Richard+P.+Gabriel&amp;rft.btitle=The+Evolution+of+Lisp&amp;rft.genre=unknown&amp;rft_id=http%3A%2F%2Fwww.dreamsongs.org%2FFiles%2FHOPL2-Uncut.pdf&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook" class="Z3988"><span style="display:none;">&#160;</span></span> <span class="citation-comment" style="display:none; color:#33aa33">CS1 maint: Multiple names: authors list (<a href="/wiki/Category:CS1_maint:_Multiple_names:_authors_list" title="Category:CS1 maint: Multiple names: authors list">link</a>)</span></li>
<li><a href="/wiki/Gerald_Sussman" class="mw-redirect" title="Gerald Sussman">Gerald Sussman</a> and <a href="/wiki/Guy_Steele" class="mw-redirect" title="Guy Steele">Guy Steele</a>, <a rel="nofollow" class="external text" href="http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.128.80"><i>SCHEME: An Interpreter for Extended Lambda Calculus</i> AI Memo 349</a>, MIT Artificial Intelligence Laboratory, Cambridge, Massachusetts, December 1975.</li>
</ul>
<h2><span class="mw-headline" id="External_links">External links</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/w/index.php?title=Scheme_(programming_language)&amp;action=edit&amp;section=36" title="Edit section: External links">edit</a><span class="mw-editsection-bracket">]</span></span></h2>
<table role="presentation" class="mbox-small plainlinks sistersitebox" style="border:1px solid #aaa;background-color:#f9f9f9">
<tr>
<td class="mbox-image"><a href="/wiki/File:Commons-logo.svg" class="image"><img alt="" src="//upload.wikimedia.org/wikipedia/en/thumb/4/4a/Commons-logo.svg/30px-Commons-logo.svg.png" width="30" height="40" class="noviewer" srcset="//upload.wikimedia.org/wikipedia/en/thumb/4/4a/Commons-logo.svg/45px-Commons-logo.svg.png 1.5x, //upload.wikimedia.org/wikipedia/en/thumb/4/4a/Commons-logo.svg/59px-Commons-logo.svg.png 2x" data-file-width="1024" data-file-height="1376" /></a></td>
<td class="mbox-text plainlist">Wikimedia Commons has media related to <i><b><a href="https://commons.wikimedia.org/wiki/Category:Scheme_(programming_language)" class="extiw" title="commons:Category:Scheme (programming language)">Scheme (programming language)</a></b></i>.</td>
</tr>
</table>
<table role="presentation" class="mbox-small plainlinks sistersitebox" style="border:1px solid #aaa;background-color:#f9f9f9">
<tr>
<td class="mbox-image"><a href="/wiki/File:Wikibooks-logo-en-noslogan.svg" class="image"><img alt="" src="//upload.wikimedia.org/wikipedia/commons/thumb/d/df/Wikibooks-logo-en-noslogan.svg/40px-Wikibooks-logo-en-noslogan.svg.png" width="40" height="40" class="noviewer" srcset="//upload.wikimedia.org/wikipedia/commons/thumb/d/df/Wikibooks-logo-en-noslogan.svg/60px-Wikibooks-logo-en-noslogan.svg.png 1.5x, //upload.wikimedia.org/wikipedia/commons/thumb/d/df/Wikibooks-logo-en-noslogan.svg/80px-Wikibooks-logo-en-noslogan.svg.png 2x" data-file-width="400" data-file-height="400" /></a></td>
<td class="mbox-text plainlist">Wikibooks has a book on the topic of: <i><b><a href="https://en.wikibooks.org/wiki/Scheme_Programming" class="extiw" title="wikibooks:Scheme Programming">Scheme Programming</a></b></i></td>
</tr>
</table>
<table role="presentation" class="mbox-small plainlinks sistersitebox" style="border:1px solid #aaa;background-color:#f9f9f9">
<tr>
<td class="mbox-image"><a href="/wiki/File:Wikibooks-logo-en-noslogan.svg" class="image"><img alt="" src="//upload.wikimedia.org/wikipedia/commons/thumb/d/df/Wikibooks-logo-en-noslogan.svg/40px-Wikibooks-logo-en-noslogan.svg.png" width="40" height="40" class="noviewer" srcset="//upload.wikimedia.org/wikipedia/commons/thumb/d/df/Wikibooks-logo-en-noslogan.svg/60px-Wikibooks-logo-en-noslogan.svg.png 1.5x, //upload.wikimedia.org/wikipedia/commons/thumb/d/df/Wikibooks-logo-en-noslogan.svg/80px-Wikibooks-logo-en-noslogan.svg.png 2x" data-file-width="400" data-file-height="400" /></a></td>
<td class="mbox-text plainlist">Wikibooks has a book on the topic of: <i><b><a href="https://en.wikibooks.org/wiki/Write_Yourself_a_Scheme_in_48_Hours" class="extiw" title="wikibooks:Write Yourself a Scheme in 48 Hours">Write Yourself a Scheme in 48 Hours</a></b></i></td>
</tr>
</table>
<ul>
<li><a rel="nofollow" class="external text" href="http://www.r7rs.org">The Revised<sup>7</sup> Report on the Algorithmic Language Scheme</a></li>
<li><a rel="nofollow" class="external text" href="http://www.r6rs.org">The Revised<sup>6</sup> Report on the Algorithmic Language Scheme</a></li>
<li><a rel="nofollow" class="external text" href="http://www.ccs.neu.edu/home/dorai/t-y-scheme/t-y-scheme.html">A tutorial for new Scheme programmers</a>, the text of <a href="/wiki/Teach_Yourself_Scheme_in_Fixnum_Days" title="Teach Yourself Scheme in Fixnum Days">Teach Yourself Scheme in Fixnum Days</a> by Dorai Sitaram</li>
<li><a rel="nofollow" class="external text" href="https://www.dmoz.org/Computers/Programming/Languages/Lisp/Scheme">Scheme</a> at <a href="/wiki/DMOZ" title="DMOZ">DMOZ</a></li>
<li><a rel="nofollow" class="external text" href="http://srfi.schemers.org/">Scheme Requests for Implementation (SRFI)</a></li>
<li><a rel="nofollow" class="external text" href="http://www.schemers.org/">Schemers.org</a></li>
<li><a rel="nofollow" class="external text" href="http://dynamo.iro.umontreal.ca/~gambit/wiki/index.php/A_Tour_of_Scheme_in_Gambit">A Tour of Scheme in Gambit</a>, introduction on how to do software development in <a href="/wiki/Gambit_(Scheme_implementation)" class="mw-redirect" title="Gambit (Scheme implementation)">Gambit Scheme</a> for people with experiences in general programming languages.</li>
<li><a rel="nofollow" class="external text" href="http://ted-gao.blogspot.com/2011/08/learning-scheme-using-drracket.html">Learning Scheme R6RS Using the DrRacket IDE</a></li>
<li><a rel="nofollow" class="external text" href="http://library.readscheme.org/">Bibliography of Scheme-related research</a></li>
<li><a rel="nofollow" class="external text" href="http://www.gustavus.edu/+max/concrete-abstractions.html">Concrete Abstractions&#160;: An Introduction to Computer Science Using Scheme</a></li>
</ul>
<table class="navbox">
<caption>Timeline of Lisp dialects<sup>(<a class="external text" href="http://en.wikipedia.org/w/index.php?title=Template:Lisp&amp;action=edit">edit</a>)</sup></caption>
<tr>
<th></th>
<th>1955</th>
<th>1960</th>
<th>1965</th>
<th>1970</th>
<th>1975</th>
<th>1980</th>
<th>1985</th>
<th>1990</th>
<th>1995</th>
<th>2000</th>
<th>2005</th>
<th>2010</th>
<th>2015</th>
</tr>
<tr>
<th>Lisp 1.5</th>
<td align="center" colspan="3" style="background:lightgray"><a href="/wiki/Lisp_(programming_language)" title="Lisp (programming language)">Lisp 1.5</a></td>
<td colspan="1"></td>
<td colspan="1"></td>
<td colspan="1"></td>
<td colspan="1"></td>
<td colspan="1"></td>
<td colspan="1"></td>
<td colspan="1"></td>
<td colspan="1"></td>
<td colspan="1"></td>
<td colspan="1"></td>
</tr>
<tr>
<th>Maclisp</th>
<td colspan="1"></td>
<td colspan="1"></td>
<td align="center" colspan="5" style="background:lightgray"><a href="/wiki/Maclisp" title="Maclisp">Maclisp</a></td>
<td colspan="1"></td>
<td colspan="1"></td>
<td colspan="1"></td>
<td colspan="1"></td>
<td colspan="1"></td>
<td colspan="1"></td>
</tr>
<tr>
<th>Interlisp</th>
<td colspan="1"></td>
<td colspan="1"></td>
<td colspan="1"></td>
<td align="center" colspan="5" style="background:lightgray"><a href="/wiki/Interlisp" title="Interlisp">Interlisp</a></td>
<td colspan="1"></td>
<td colspan="1"></td>
<td colspan="1"></td>
<td colspan="1"></td>
<td colspan="1"></td>
</tr>
<tr>
<th>ZetaLisp</th>
<td colspan="1"></td>
<td colspan="1"></td>
<td colspan="1"></td>
<td colspan="1"></td>
<td align="center" colspan="5" style="background:lightgray"><a href="/wiki/Lisp_Machine_Lisp" title="Lisp Machine Lisp">Lisp Machine Lisp</a></td>
<td colspan="1"></td>
<td colspan="1"></td>
<td colspan="1"></td>
<td colspan="1"></td>
</tr>
<tr>
<th>Scheme</th>
<td colspan="1"></td>
<td colspan="1"></td>
<td colspan="1"></td>
<td colspan="1"></td>
<td align="center" colspan="9" style="background:lightgray"><strong class="selflink">Scheme</strong></td>
</tr>
<tr>
<th>NIL</th>
<td colspan="1"></td>
<td colspan="1"></td>
<td colspan="1"></td>
<td colspan="1"></td>
<td align="center" colspan="2" style="background:lightgray"><a href="/wiki/NIL_(programming_language)" title="NIL (programming language)">NIL</a></td>
<td colspan="1"></td>
<td colspan="1"></td>
<td colspan="1"></td>
<td colspan="1"></td>
<td colspan="1"></td>
<td colspan="1"></td>
<td colspan="1"></td>
</tr>
<tr>
<th>Common Lisp</th>
<td colspan="1"></td>
<td colspan="1"></td>
<td colspan="1"></td>
<td colspan="1"></td>
<td colspan="1"></td>
<td align="center" colspan="8" style="background:lightgray"><a href="/wiki/Common_Lisp" title="Common Lisp">Common Lisp</a></td>
</tr>
<tr>
<th>T</th>
<td colspan="1"></td>
<td colspan="1"></td>
<td colspan="1"></td>
<td colspan="1"></td>
<td colspan="1"></td>
<td colspan="1"></td>
<td align="center" colspan="3" style="background:lightgray"><a href="/wiki/T_(programming_language)" title="T (programming language)">T</a></td>
<td colspan="1"></td>
<td colspan="1"></td>
<td colspan="1"></td>
<td colspan="1"></td>
</tr>
<tr>
<th>Emacs Lisp</th>
<td colspan="1"></td>
<td colspan="1"></td>
<td colspan="1"></td>
<td colspan="1"></td>
<td colspan="1"></td>
<td colspan="1"></td>
<td align="center" colspan="8" style="background:lightgray"><a href="/wiki/Emacs_Lisp" title="Emacs Lisp">Emacs Lisp</a></td>
</tr>
<tr>
<th>AutoLISP</th>
<td colspan="1"></td>
<td colspan="1"></td>
<td colspan="1"></td>
<td colspan="1"></td>
<td colspan="1"></td>
<td colspan="1"></td>
<td align="center" colspan="7" style="background:lightgray"><a href="/wiki/AutoLISP" title="AutoLISP">AutoLISP</a></td>
</tr>
<tr>
<th>ISLISP</th>
<td colspan="1"></td>
<td colspan="1"></td>
<td colspan="1"></td>
<td colspan="1"></td>
<td colspan="1"></td>
<td colspan="1"></td>
<td align="center" colspan="7" style="background:lightgray"><a href="/wiki/ISLISP" title="ISLISP">ISLISP</a></td>
</tr>
<tr>
<th>EuLisp</th>
<td colspan="1"></td>
<td colspan="1"></td>
<td colspan="1"></td>
<td colspan="1"></td>
<td colspan="1"></td>
<td colspan="1"></td>
<td align="center" colspan="4" style="background:lightgray"><a href="/wiki/EuLisp" title="EuLisp">EuLisp</a></td>
<td colspan="1"></td>
<td colspan="1"></td>
<td colspan="1"></td>
</tr>
<tr>
<th>PicoLisp</th>
<td colspan="1"></td>
<td colspan="1"></td>
<td colspan="1"></td>
<td colspan="1"></td>
<td colspan="1"></td>
<td colspan="1"></td>
<td colspan="1"></td>
<td align="center" colspan="6" style="background:lightgray"><a href="/wiki/PicoLisp" title="PicoLisp">PicoLisp</a></td>
</tr>
<tr>
<th>Racket</th>
<td colspan="1"></td>
<td colspan="1"></td>
<td colspan="1"></td>
<td colspan="1"></td>
<td colspan="1"></td>
<td colspan="1"></td>
<td colspan="1"></td>
<td colspan="1"></td>
<td align="center" colspan="5" style="background:lightgray"><a href="/wiki/Racket_(programming_language)" title="Racket (programming language)">Racket</a></td>
</tr>
<tr>
<th>Arc</th>
<td colspan="1"></td>
<td colspan="1"></td>
<td colspan="1"></td>
<td colspan="1"></td>
<td colspan="1"></td>
<td colspan="1"></td>
<td colspan="1"></td>
<td colspan="1"></td>
<td colspan="1"></td>
<td align="center" colspan="4" style="background:lightgray"><a href="/wiki/Arc_(programming_language)" title="Arc (programming language)">Arc</a></td>
</tr>
<tr>
<th>Clojure</th>
<td colspan="1"></td>
<td colspan="1"></td>
<td colspan="1"></td>
<td colspan="1"></td>
<td colspan="1"></td>
<td colspan="1"></td>
<td colspan="1"></td>
<td colspan="1"></td>
<td colspan="1"></td>
<td colspan="1"></td>
<td align="center" colspan="3" style="background:lightgray"><a href="/wiki/Clojure" title="Clojure">Clojure</a></td>
</tr>
<tr>
<th>LFE</th>
<td colspan="1"></td>
<td colspan="1"></td>
<td colspan="1"></td>
<td colspan="1"></td>
<td colspan="1"></td>
<td colspan="1"></td>
<td colspan="1"></td>
<td colspan="1"></td>
<td colspan="1"></td>
<td colspan="1"></td>
<td align="center" colspan="3" style="background:lightgray"><a href="/wiki/LFE_(programming_language)" title="LFE (programming language)">LFE</a></td>
</tr>
<tr>
<th>Hy</th>
<td colspan="1"></td>
<td colspan="1"></td>
<td colspan="1"></td>
<td colspan="1"></td>
<td colspan="1"></td>
<td colspan="1"></td>
<td colspan="1"></td>
<td colspan="1"></td>
<td colspan="1"></td>
<td colspan="1"></td>
<td colspan="1"></td>
<td align="center" colspan="2" style="background:lightgray"><a href="/wiki/Hy" title="Hy">Hy</a></td>
</tr>
</table>


<!-- 
NewPP limit report
Parsed by mw1246
Cached time: 20170202082129
Cache expiry: 86400
Dynamic content: true
CPU time usage: 0.452 seconds
Real time usage: 0.534 seconds
Preprocessor visited node count: 3698/1000000
Preprocessor generated node count: 0/1500000
Post‐expand include size: 114098/2097152 bytes
Template argument size: 5176/2097152 bytes
Highest expansion depth: 20/40
Expensive parser function count: 4/500
Lua time usage: 0.202/10.000 seconds
Lua memory usage: 6.37 MB/50 MB
-->
<!--
Transclusion expansion time report (%,ms,calls,template)
100.00%  438.854      1 -total
 47.57%  208.750      1 Template:Reflist
 23.10%  101.388     34 Template:Cite_web
 19.84%   87.082      2 Template:Infobox
 18.10%   79.427      1 Template:Infobox_programming_language
 11.17%   49.039      8 Template:Cite_journal
  6.13%   26.920      1 Template:Unreferenced_section
  5.46%   23.947      1 Template:Unreferenced
  4.99%   21.919      1 Template:Ambox
  4.46%   19.554      1 Template:Citation_needed
-->

<!-- Saved in parser cache with key enwiki:pcache:idhash:28119-0!*!0!!en!4!* and timestamp 20170202082129 and revision id 762638568
 -->
<noscript><img src="//en.wikipedia.org/wiki/Special:CentralAutoLogin/start?type=1x1" alt="" title="" width="1" height="1" style="border: none; position: absolute;" /></noscript></div>					<div class="printfooter">
						Retrieved from "<a dir="ltr" href="https://en.wikipedia.org/w/index.php?title=Scheme_(programming_language)&amp;oldid=762638568">https://en.wikipedia.org/w/index.php?title=Scheme_(programming_language)&amp;oldid=762638568</a>"					</div>
				<div id="catlinks" class="catlinks" data-mw="interface"><div id="mw-normal-catlinks" class="mw-normal-catlinks"><a href="/wiki/Help:Category" title="Help:Category">Categories</a>: <ul><li><a href="/wiki/Category:Academic_programming_languages" title="Category:Academic programming languages">Academic programming languages</a></li><li><a href="/wiki/Category:Articles_with_example_Scheme_code" title="Category:Articles with example Scheme code">Articles with example Scheme code</a></li><li><a href="/wiki/Category:Dynamically_typed_programming_languages" title="Category:Dynamically typed programming languages">Dynamically typed programming languages</a></li><li><a href="/wiki/Category:Extensible_syntax_programming_languages" title="Category:Extensible syntax programming languages">Extensible syntax programming languages</a></li><li><a href="/wiki/Category:Lisp_programming_language_family" title="Category:Lisp programming language family">Lisp programming language family</a></li><li><a href="/wiki/Category:Multi-paradigm_programming_languages" title="Category:Multi-paradigm programming languages">Multi-paradigm programming languages</a></li><li><a href="/wiki/Category:Programming_languages_created_in_1975" title="Category:Programming languages created in 1975">Programming languages created in 1975</a></li><li><a href="/wiki/Category:Scheme_(programming_language)" title="Category:Scheme (programming language)">Scheme (programming language)</a></li></ul></div><div id="mw-hidden-catlinks" class="mw-hidden-catlinks mw-hidden-cats-hidden">Hidden categories: <ul><li><a href="/wiki/Category:CS1_maint:_Multiple_names:_authors_list" title="Category:CS1 maint: Multiple names: authors list">CS1 maint: Multiple names: authors list</a></li><li><a href="/wiki/Category:Pages_using_ISBN_magic_links" title="Category:Pages using ISBN magic links">Pages using ISBN magic links</a></li><li><a href="/wiki/Category:Pages_using_deprecated_image_syntax" title="Category:Pages using deprecated image syntax">Pages using deprecated image syntax</a></li><li><a href="/wiki/Category:Articles_needing_additional_references_from_May_2013" title="Category:Articles needing additional references from May 2013">Articles needing additional references from May 2013</a></li><li><a href="/wiki/Category:All_articles_needing_additional_references" title="Category:All articles needing additional references">All articles needing additional references</a></li><li><a href="/wiki/Category:All_articles_with_unsourced_statements" title="Category:All articles with unsourced statements">All articles with unsourced statements</a></li><li><a href="/wiki/Category:Articles_with_unsourced_statements_from_August_2013" title="Category:Articles with unsourced statements from August 2013">Articles with unsourced statements from August 2013</a></li><li><a href="/wiki/Category:Commons_category_with_local_link_same_as_on_Wikidata" title="Category:Commons category with local link same as on Wikidata">Commons category with local link same as on Wikidata</a></li><li><a href="/wiki/Category:Articles_with_DMOZ_links" title="Category:Articles with DMOZ links">Articles with DMOZ links</a></li></ul></div></div>				<div class="visualClear"></div>
							</div>
		</div>
		<div id="mw-navigation">
			<h2>Navigation menu</h2>

			<div id="mw-head">
									<div id="p-personal" role="navigation" class="" aria-labelledby="p-personal-label">
						<h3 id="p-personal-label">Personal tools</h3>
						<ul>
							<li id="pt-anonuserpage">Not logged in</li><li id="pt-anontalk"><a href="/wiki/Special:MyTalk" title="Discussion about edits from this IP address [n]" accesskey="n">Talk</a></li><li id="pt-anoncontribs"><a href="/wiki/Special:MyContributions" title="A list of edits made from this IP address [y]" accesskey="y">Contributions</a></li><li id="pt-createaccount"><a href="/w/index.php?title=Special:CreateAccount&amp;returnto=Scheme+%28programming+language%29" title="You are encouraged to create an account and log in; however, it is not mandatory">Create account</a></li><li id="pt-login"><a href="/w/index.php?title=Special:UserLogin&amp;returnto=Scheme+%28programming+language%29" title="You're encouraged to log in; however, it's not mandatory. [o]" accesskey="o">Log in</a></li>						</ul>
					</div>
									<div id="left-navigation">
										<div id="p-namespaces" role="navigation" class="vectorTabs" aria-labelledby="p-namespaces-label">
						<h3 id="p-namespaces-label">Namespaces</h3>
						<ul>
															<li  id="ca-nstab-main" class="selected"><span><a href="/wiki/Scheme_(programming_language)"  title="View the content page [c]" accesskey="c">Article</a></span></li>
															<li  id="ca-talk"><span><a href="/wiki/Talk:Scheme_(programming_language)"  title="Discussion about the content page [t]" accesskey="t" rel="discussion">Talk</a></span></li>
													</ul>
					</div>
										<div id="p-variants" role="navigation" class="vectorMenu emptyPortlet" aria-labelledby="p-variants-label">
												<h3 id="p-variants-label">
							<span>Variants</span><a href="#"></a>
						</h3>

						<div class="menu">
							<ul>
															</ul>
						</div>
					</div>
									</div>
				<div id="right-navigation">
										<div id="p-views" role="navigation" class="vectorTabs" aria-labelledby="p-views-label">
						<h3 id="p-views-label">Views</h3>
						<ul>
															<li id="ca-view" class="selected"><span><a href="/wiki/Scheme_(programming_language)" >Read</a></span></li>
															<li id="ca-edit"><span><a href="/w/index.php?title=Scheme_(programming_language)&amp;action=edit"  title="Edit this page [e]" accesskey="e">Edit</a></span></li>
															<li id="ca-history" class="collapsible"><span><a href="/w/index.php?title=Scheme_(programming_language)&amp;action=history"  title="Past revisions of this page [h]" accesskey="h">View history</a></span></li>
													</ul>
					</div>
										<div id="p-cactions" role="navigation" class="vectorMenu emptyPortlet" aria-labelledby="p-cactions-label">
						<h3 id="p-cactions-label"><span>More</span><a href="#"></a></h3>

						<div class="menu">
							<ul>
															</ul>
						</div>
					</div>
										<div id="p-search" role="search">
						<h3>
							<label for="searchInput">Search</label>
						</h3>

						<form action="/w/index.php" id="searchform">
							<div id="simpleSearch">
							<input type="search" name="search" placeholder="Search Wikipedia" title="Search Wikipedia [f]" accesskey="f" id="searchInput"/><input type="hidden" value="Special:Search" name="title"/><input type="submit" name="fulltext" value="Search" title="Search Wikipedia for this text" id="mw-searchButton" class="searchButton mw-fallbackSearchButton"/><input type="submit" name="go" value="Go" title="Go to a page with this exact name if it exists" id="searchButton" class="searchButton"/>							</div>
						</form>
					</div>
									</div>
			</div>
			<div id="mw-panel">
				<div id="p-logo" role="banner"><a class="mw-wiki-logo" href="/wiki/Main_Page"  title="Visit the main page"></a></div>
						<div class="portal" role="navigation" id='p-navigation' aria-labelledby='p-navigation-label'>
			<h3 id='p-navigation-label'>Navigation</h3>

			<div class="body">
									<ul>
						<li id="n-mainpage-description"><a href="/wiki/Main_Page" title="Visit the main page [z]" accesskey="z">Main page</a></li><li id="n-contents"><a href="/wiki/Portal:Contents" title="Guides to browsing Wikipedia">Contents</a></li><li id="n-featuredcontent"><a href="/wiki/Portal:Featured_content" title="Featured content – the best of Wikipedia">Featured content</a></li><li id="n-currentevents"><a href="/wiki/Portal:Current_events" title="Find background information on current events">Current events</a></li><li id="n-randompage"><a href="/wiki/Special:Random" title="Load a random article [x]" accesskey="x">Random article</a></li><li id="n-sitesupport"><a href="https://donate.wikimedia.org/wiki/Special:FundraiserRedirector?utm_source=donate&amp;utm_medium=sidebar&amp;utm_campaign=C13_en.wikipedia.org&amp;uselang=en" title="Support us">Donate to Wikipedia</a></li><li id="n-shoplink"><a href="//shop.wikimedia.org" title="Visit the Wikipedia store">Wikipedia store</a></li>					</ul>
							</div>
		</div>
			<div class="portal" role="navigation" id='p-interaction' aria-labelledby='p-interaction-label'>
			<h3 id='p-interaction-label'>Interaction</h3>

			<div class="body">
									<ul>
						<li id="n-help"><a href="/wiki/Help:Contents" title="Guidance on how to use and edit Wikipedia">Help</a></li><li id="n-aboutsite"><a href="/wiki/Wikipedia:About" title="Find out about Wikipedia">About Wikipedia</a></li><li id="n-portal"><a href="/wiki/Wikipedia:Community_portal" title="About the project, what you can do, where to find things">Community portal</a></li><li id="n-recentchanges"><a href="/wiki/Special:RecentChanges" title="A list of recent changes in the wiki [r]" accesskey="r">Recent changes</a></li><li id="n-contactpage"><a href="//en.wikipedia.org/wiki/Wikipedia:Contact_us" title="How to contact Wikipedia">Contact page</a></li>					</ul>
							</div>
		</div>
			<div class="portal" role="navigation" id='p-tb' aria-labelledby='p-tb-label'>
			<h3 id='p-tb-label'>Tools</h3>

			<div class="body">
									<ul>
						<li id="t-whatlinkshere"><a href="/wiki/Special:WhatLinksHere/Scheme_(programming_language)" title="List of all English Wikipedia pages containing links to this page [j]" accesskey="j">What links here</a></li><li id="t-recentchangeslinked"><a href="/wiki/Special:RecentChangesLinked/Scheme_(programming_language)" rel="nofollow" title="Recent changes in pages linked from this page [k]" accesskey="k">Related changes</a></li><li id="t-upload"><a href="/wiki/Wikipedia:File_Upload_Wizard" title="Upload files [u]" accesskey="u">Upload file</a></li><li id="t-specialpages"><a href="/wiki/Special:SpecialPages" title="A list of all special pages [q]" accesskey="q">Special pages</a></li><li id="t-permalink"><a href="/w/index.php?title=Scheme_(programming_language)&amp;oldid=762638568" title="Permanent link to this revision of the page">Permanent link</a></li><li id="t-info"><a href="/w/index.php?title=Scheme_(programming_language)&amp;action=info" title="More information about this page">Page information</a></li><li id="t-wikibase"><a href="https://www.wikidata.org/wiki/Q187560" title="Link to connected data repository item [g]" accesskey="g">Wikidata item</a></li><li id="t-cite"><a href="/w/index.php?title=Special:CiteThisPage&amp;page=Scheme_%28programming_language%29&amp;id=762638568" title="Information on how to cite this page">Cite this page</a></li>					</ul>
							</div>
		</div>
			<div class="portal" role="navigation" id='p-coll-print_export' aria-labelledby='p-coll-print_export-label'>
			<h3 id='p-coll-print_export-label'>Print/export</h3>

			<div class="body">
									<ul>
						<li id="coll-create_a_book"><a href="/w/index.php?title=Special:Book&amp;bookcmd=book_creator&amp;referer=Scheme+%28programming+language%29">Create a book</a></li><li id="coll-download-as-rdf2latex"><a href="/w/index.php?title=Special:Book&amp;bookcmd=render_article&amp;arttitle=Scheme+%28programming+language%29&amp;returnto=Scheme+%28programming+language%29&amp;oldid=762638568&amp;writer=rdf2latex">Download as PDF</a></li><li id="t-print"><a href="/w/index.php?title=Scheme_(programming_language)&amp;printable=yes" title="Printable version of this page [p]" accesskey="p">Printable version</a></li>					</ul>
							</div>
		</div>
			<div class="portal" role="navigation" id='p-wikibase-otherprojects' aria-labelledby='p-wikibase-otherprojects-label'>
			<h3 id='p-wikibase-otherprojects-label'>In other projects</h3>

			<div class="body">
									<ul>
						<li class="wb-otherproject-link wb-otherproject-commons"><a href="https://commons.wikimedia.org/wiki/Category:Scheme_(programming_language)" hreflang="en">Wikimedia Commons</a></li><li class="wb-otherproject-link wb-otherproject-wikibooks"><a href="https://en.wikibooks.org/wiki/Scheme_Programming" hreflang="en">Wikibooks</a></li>					</ul>
							</div>
		</div>
			<div class="portal" role="navigation" id='p-lang' aria-labelledby='p-lang-label'>
			<h3 id='p-lang-label'>Languages</h3>

			<div class="body">
									<ul>
						<li class="interlanguage-link interwiki-az"><a href="https://az.wikipedia.org/wiki/Scheme" title="Scheme – Azerbaijani" lang="az" hreflang="az" class="interlanguage-link-target">Azərbaycanca</a></li><li class="interlanguage-link interwiki-bn"><a href="https://bn.wikipedia.org/wiki/%E0%A6%B8%E0%A7%8D%E0%A6%95%E0%A6%BF%E0%A6%AE_(%E0%A6%AA%E0%A7%8D%E0%A6%B0%E0%A7%8B%E0%A6%97%E0%A7%8D%E0%A6%B0%E0%A6%BE%E0%A6%AE%E0%A6%BF%E0%A6%82_%E0%A6%AD%E0%A6%BE%E0%A6%B7%E0%A6%BE)" title="স্কিম (প্রোগ্রামিং ভাষা) – Bangla" lang="bn" hreflang="bn" class="interlanguage-link-target">বাংলা</a></li><li class="interlanguage-link interwiki-be"><a href="https://be.wikipedia.org/wiki/Scheme" title="Scheme – Belarusian" lang="be" hreflang="be" class="interlanguage-link-target">Беларуская</a></li><li class="interlanguage-link interwiki-bg"><a href="https://bg.wikipedia.org/wiki/Scheme_(%D0%B5%D0%B7%D0%B8%D0%BA_%D0%B7%D0%B0_%D0%BF%D1%80%D0%BE%D0%B3%D1%80%D0%B0%D0%BC%D0%B8%D1%80%D0%B0%D0%BD%D0%B5)" title="Scheme (език за програмиране) – Bulgarian" lang="bg" hreflang="bg" class="interlanguage-link-target">Български</a></li><li class="interlanguage-link interwiki-ca"><a href="https://ca.wikipedia.org/wiki/Scheme" title="Scheme – Catalan" lang="ca" hreflang="ca" class="interlanguage-link-target">Català</a></li><li class="interlanguage-link interwiki-cs"><a href="https://cs.wikipedia.org/wiki/Scheme" title="Scheme – Czech" lang="cs" hreflang="cs" class="interlanguage-link-target">Čeština</a></li><li class="interlanguage-link interwiki-da"><a href="https://da.wikipedia.org/wiki/Scheme" title="Scheme – Danish" lang="da" hreflang="da" class="interlanguage-link-target">Dansk</a></li><li class="interlanguage-link interwiki-de"><a href="https://de.wikipedia.org/wiki/Scheme" title="Scheme – German" lang="de" hreflang="de" class="interlanguage-link-target">Deutsch</a></li><li class="interlanguage-link interwiki-et"><a href="https://et.wikipedia.org/wiki/Scheme" title="Scheme – Estonian" lang="et" hreflang="et" class="interlanguage-link-target">Eesti</a></li><li class="interlanguage-link interwiki-el"><a href="https://el.wikipedia.org/wiki/Scheme" title="Scheme – Greek" lang="el" hreflang="el" class="interlanguage-link-target">Ελληνικά</a></li><li class="interlanguage-link interwiki-es"><a href="https://es.wikipedia.org/wiki/Scheme" title="Scheme – Spanish" lang="es" hreflang="es" class="interlanguage-link-target">Español</a></li><li class="interlanguage-link interwiki-eo"><a href="https://eo.wikipedia.org/wiki/Scheme" title="Scheme – Esperanto" lang="eo" hreflang="eo" class="interlanguage-link-target">Esperanto</a></li><li class="interlanguage-link interwiki-fa"><a href="https://fa.wikipedia.org/wiki/%D8%A7%D8%B3%DA%A9%DB%8C%D9%85" title="اسکیم – Persian" lang="fa" hreflang="fa" class="interlanguage-link-target">فارسی</a></li><li class="interlanguage-link interwiki-fr"><a href="https://fr.wikipedia.org/wiki/Scheme" title="Scheme – French" lang="fr" hreflang="fr" class="interlanguage-link-target">Français</a></li><li class="interlanguage-link interwiki-ko"><a href="https://ko.wikipedia.org/wiki/%EC%8A%A4%ED%82%B4_(%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D_%EC%96%B8%EC%96%B4)" title="스킴 (프로그래밍 언어) – Korean" lang="ko" hreflang="ko" class="interlanguage-link-target">한국어</a></li><li class="interlanguage-link interwiki-hy"><a href="https://hy.wikipedia.org/wiki/Scheme" title="Scheme – Armenian" lang="hy" hreflang="hy" class="interlanguage-link-target">Հայերեն</a></li><li class="interlanguage-link interwiki-hr"><a href="https://hr.wikipedia.org/wiki/Scheme" title="Scheme – Croatian" lang="hr" hreflang="hr" class="interlanguage-link-target">Hrvatski</a></li><li class="interlanguage-link interwiki-it"><a href="https://it.wikipedia.org/wiki/Scheme" title="Scheme – Italian" lang="it" hreflang="it" class="interlanguage-link-target">Italiano</a></li><li class="interlanguage-link interwiki-he"><a href="https://he.wikipedia.org/wiki/Scheme" title="Scheme – Hebrew" lang="he" hreflang="he" class="interlanguage-link-target">עברית</a></li><li class="interlanguage-link interwiki-lt"><a href="https://lt.wikipedia.org/wiki/Scheme" title="Scheme – Lithuanian" lang="lt" hreflang="lt" class="interlanguage-link-target">Lietuvių</a></li><li class="interlanguage-link interwiki-hu"><a href="https://hu.wikipedia.org/wiki/Scheme" title="Scheme – Hungarian" lang="hu" hreflang="hu" class="interlanguage-link-target">Magyar</a></li><li class="interlanguage-link interwiki-mg"><a href="https://mg.wikipedia.org/wiki/Scheme" title="Scheme – Malagasy" lang="mg" hreflang="mg" class="interlanguage-link-target">Malagasy</a></li><li class="interlanguage-link interwiki-ml"><a href="https://ml.wikipedia.org/wiki/%E0%B4%B8%E0%B5%8D%E0%B4%95%E0%B5%80%E0%B4%82_(%E0%B4%AA%E0%B5%8D%E0%B4%B0%E0%B5%8B%E0%B4%97%E0%B5%8D%E0%B4%B0%E0%B4%BE%E0%B4%AE%E0%B4%BF%E0%B4%99%E0%B5%8D_%E0%B4%AD%E0%B4%BE%E0%B4%B7)" title="സ്കീം (പ്രോഗ്രാമിങ് ഭാഷ) – Malayalam" lang="ml" hreflang="ml" class="interlanguage-link-target">മലയാളം</a></li><li class="interlanguage-link interwiki-nl"><a href="https://nl.wikipedia.org/wiki/Scheme" title="Scheme – Dutch" lang="nl" hreflang="nl" class="interlanguage-link-target">Nederlands</a></li><li class="interlanguage-link interwiki-ja"><a href="https://ja.wikipedia.org/wiki/Scheme" title="Scheme – Japanese" lang="ja" hreflang="ja" class="interlanguage-link-target">日本語</a></li><li class="interlanguage-link interwiki-no"><a href="https://no.wikipedia.org/wiki/Scheme" title="Scheme – Norwegian" lang="no" hreflang="no" class="interlanguage-link-target">Norsk bokmål</a></li><li class="interlanguage-link interwiki-nn"><a href="https://nn.wikipedia.org/wiki/Scheme" title="Scheme – Norwegian Nynorsk" lang="nn" hreflang="nn" class="interlanguage-link-target">Norsk nynorsk</a></li><li class="interlanguage-link interwiki-pl"><a href="https://pl.wikipedia.org/wiki/Scheme" title="Scheme – Polish" lang="pl" hreflang="pl" class="interlanguage-link-target">Polski</a></li><li class="interlanguage-link interwiki-pt"><a href="https://pt.wikipedia.org/wiki/Scheme" title="Scheme – Portuguese" lang="pt" hreflang="pt" class="interlanguage-link-target">Português</a></li><li class="interlanguage-link interwiki-ro"><a href="https://ro.wikipedia.org/wiki/Scheme_(limbaj_de_programare)" title="Scheme (limbaj de programare) – Romanian" lang="ro" hreflang="ro" class="interlanguage-link-target">Română</a></li><li class="interlanguage-link interwiki-rue"><a href="https://rue.wikipedia.org/wiki/Scheme" title="Scheme – Rusyn" lang="rue" hreflang="rue" class="interlanguage-link-target">Русиньскый</a></li><li class="interlanguage-link interwiki-ru"><a href="https://ru.wikipedia.org/wiki/Scheme" title="Scheme – Russian" lang="ru" hreflang="ru" class="interlanguage-link-target">Русский</a></li><li class="interlanguage-link interwiki-simple"><a href="https://simple.wikipedia.org/wiki/Scheme_(programming_language)" title="Scheme (programming language) – Simple English" lang="simple" hreflang="simple" class="interlanguage-link-target">Simple English</a></li><li class="interlanguage-link interwiki-sk"><a href="https://sk.wikipedia.org/wiki/Scheme_(programovac%C3%AD_jazyk)" title="Scheme (programovací jazyk) – Slovak" lang="sk" hreflang="sk" class="interlanguage-link-target">Slovenčina</a></li><li class="interlanguage-link interwiki-sl"><a href="https://sl.wikipedia.org/wiki/Scheme_(programski_jezik)" title="Scheme (programski jezik) – Slovenian" lang="sl" hreflang="sl" class="interlanguage-link-target">Slovenščina</a></li><li class="interlanguage-link interwiki-sr"><a href="https://sr.wikipedia.org/wiki/Scheme_(programski_jezik)" title="Scheme (programski jezik) – Serbian" lang="sr" hreflang="sr" class="interlanguage-link-target">Српски / srpski</a></li><li class="interlanguage-link interwiki-sh"><a href="https://sh.wikipedia.org/wiki/Scheme_(programski_jezik)" title="Scheme (programski jezik) – Serbo-Croatian" lang="sh" hreflang="sh" class="interlanguage-link-target">Srpskohrvatski / српскохрватски</a></li><li class="interlanguage-link interwiki-fi"><a href="https://fi.wikipedia.org/wiki/Scheme" title="Scheme – Finnish" lang="fi" hreflang="fi" class="interlanguage-link-target">Suomi</a></li><li class="interlanguage-link interwiki-sv"><a href="https://sv.wikipedia.org/wiki/Scheme" title="Scheme – Swedish" lang="sv" hreflang="sv" class="interlanguage-link-target">Svenska</a></li><li class="interlanguage-link interwiki-ta"><a href="https://ta.wikipedia.org/wiki/%E0%AE%87%E0%AE%9A%E0%AF%81%E0%AE%95%E0%AF%80%E0%AE%AE%E0%AF%8D" title="இசுகீம் – Tamil" lang="ta" hreflang="ta" class="interlanguage-link-target">தமிழ்</a></li><li class="interlanguage-link interwiki-tg"><a href="https://tg.wikipedia.org/wiki/Scheme" title="Scheme – Tajik" lang="tg" hreflang="tg" class="interlanguage-link-target">Тоҷикӣ</a></li><li class="interlanguage-link interwiki-tr"><a href="https://tr.wikipedia.org/wiki/Scheme" title="Scheme – Turkish" lang="tr" hreflang="tr" class="interlanguage-link-target">Türkçe</a></li><li class="interlanguage-link interwiki-uk"><a href="https://uk.wikipedia.org/wiki/Scheme" title="Scheme – Ukrainian" lang="uk" hreflang="uk" class="interlanguage-link-target">Українська</a></li><li class="interlanguage-link interwiki-vi"><a href="https://vi.wikipedia.org/wiki/Scheme" title="Scheme – Vietnamese" lang="vi" hreflang="vi" class="interlanguage-link-target">Tiếng Việt</a></li><li class="interlanguage-link interwiki-bat-smg"><a href="https://bat-smg.wikipedia.org/wiki/Scheme" title="Scheme – Samogitian" lang="bat-smg" hreflang="bat-smg" class="interlanguage-link-target">Žemaitėška</a></li><li class="interlanguage-link interwiki-zh"><a href="https://zh.wikipedia.org/wiki/Scheme" title="Scheme – Chinese" lang="zh" hreflang="zh" class="interlanguage-link-target">中文</a></li>					</ul>
				<div class='after-portlet after-portlet-lang'><span class="wb-langlinks-edit wb-langlinks-link"><a href="https://www.wikidata.org/wiki/Q187560#sitelinks-wikipedia" title="Edit interlanguage links" class="wbc-editpage">Edit links</a></span></div>			</div>
		</div>
				</div>
		</div>
		<div id="footer" role="contentinfo">
							<ul id="footer-info">
											<li id="footer-info-lastmod"> This page was last modified on 29 January 2017, at 23:05.</li>
											<li id="footer-info-copyright">Text is available under the <a rel="license" href="//en.wikipedia.org/wiki/Wikipedia:Text_of_Creative_Commons_Attribution-ShareAlike_3.0_Unported_License">Creative Commons Attribution-ShareAlike License</a><a rel="license" href="//creativecommons.org/licenses/by-sa/3.0/" style="display:none;"></a>;
additional terms may apply.  By using this site, you agree to the <a href="//wikimediafoundation.org/wiki/Terms_of_Use">Terms of Use</a> and <a href="//wikimediafoundation.org/wiki/Privacy_policy">Privacy Policy</a>. Wikipedia® is a registered trademark of the <a href="//www.wikimediafoundation.org/">Wikimedia Foundation, Inc.</a>, a non-profit organization.</li>
									</ul>
							<ul id="footer-places">
											<li id="footer-places-privacy"><a href="https://wikimediafoundation.org/wiki/Privacy_policy" class="extiw" title="wmf:Privacy policy">Privacy policy</a></li>
											<li id="footer-places-about"><a href="/wiki/Wikipedia:About" title="Wikipedia:About">About Wikipedia</a></li>
											<li id="footer-places-disclaimer"><a href="/wiki/Wikipedia:General_disclaimer" title="Wikipedia:General disclaimer">Disclaimers</a></li>
											<li id="footer-places-contact"><a href="//en.wikipedia.org/wiki/Wikipedia:Contact_us">Contact Wikipedia</a></li>
											<li id="footer-places-developers"><a href="https://www.mediawiki.org/wiki/Special:MyLanguage/How_to_contribute">Developers</a></li>
											<li id="footer-places-cookiestatement"><a href="https://wikimediafoundation.org/wiki/Cookie_statement">Cookie statement</a></li>
											<li id="footer-places-mobileview"><a href="//en.m.wikipedia.org/w/index.php?title=Scheme_(programming_language)&amp;mobileaction=toggle_view_mobile" class="noprint stopMobileRedirectToggle">Mobile view</a></li>
									</ul>
										<ul id="footer-icons" class="noprint">
											<li id="footer-copyrightico">
							<a href="https://wikimediafoundation.org/"><img src="/static/images/wikimedia-button.png" srcset="/static/images/wikimedia-button-1.5x.png 1.5x, /static/images/wikimedia-button-2x.png 2x" width="88" height="31" alt="Wikimedia Foundation"/></a>						</li>
											<li id="footer-poweredbyico">
							<a href="//www.mediawiki.org/"><img src="/static/images/poweredby_mediawiki_88x31.png" alt="Powered by MediaWiki" srcset="/static/images/poweredby_mediawiki_132x47.png 1.5x, /static/images/poweredby_mediawiki_176x62.png 2x" width="88" height="31"/></a>						</li>
									</ul>
						<div style="clear:both"></div>
		</div>
		<script>(window.RLQ=window.RLQ||[]).push(function(){mw.config.set({"wgPageParseReport":{"limitreport":{"cputime":"0.452","walltime":"0.534","ppvisitednodes":{"value":3698,"limit":1000000},"ppgeneratednodes":{"value":0,"limit":1500000},"postexpandincludesize":{"value":114098,"limit":2097152},"templateargumentsize":{"value":5176,"limit":2097152},"expansiondepth":{"value":20,"limit":40},"expensivefunctioncount":{"value":4,"limit":500},"entityaccesscount":{"value":1,"limit":400},"timingprofile":["100.00%  438.854      1 -total"," 47.57%  208.750      1 Template:Reflist"," 23.10%  101.388     34 Template:Cite_web"," 19.84%   87.082      2 Template:Infobox"," 18.10%   79.427      1 Template:Infobox_programming_language"," 11.17%   49.039      8 Template:Cite_journal","  6.13%   26.920      1 Template:Unreferenced_section","  5.46%   23.947      1 Template:Unreferenced","  4.99%   21.919      1 Template:Ambox","  4.46%   19.554      1 Template:Citation_needed"]},"scribunto":{"limitreport-timeusage":{"value":"0.202","limit":"10.000"},"limitreport-memusage":{"value":6674872,"limit":52428800}},"cachereport":{"origin":"mw1246","timestamp":"20170202082129","ttl":86400,"transientcontent":true}}});});</script><script>(window.RLQ=window.RLQ||[]).push(function(){mw.config.set({"wgBackendResponseTime":614,"wgHostname":"mw1246"});});</script>
	</body>
</html>
