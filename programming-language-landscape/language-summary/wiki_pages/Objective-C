<!DOCTYPE html>
<html class="client-nojs" lang="en" dir="ltr">
<head>
<meta charset="UTF-8"/>
<title>Objective-C - Wikipedia</title>
<script>document.documentElement.className = document.documentElement.className.replace( /(^|\s)client-nojs(\s|$)/, "$1client-js$2" );</script>
<script>(window.RLQ=window.RLQ||[]).push(function(){mw.config.set({"wgCanonicalNamespace":"","wgCanonicalSpecialPageName":false,"wgNamespaceNumber":0,"wgPageName":"Objective-C","wgTitle":"Objective-C","wgCurRevisionId":759531147,"wgRevisionId":759531147,"wgArticleId":39809523,"wgIsArticle":true,"wgIsRedirect":false,"wgAction":"view","wgUserName":null,"wgUserGroups":["*"],"wgCategories":["All articles with unsourced statements","Articles with unsourced statements from April 2013","Articles with unsourced statements from August 2015","Articles with unsourced statements from November 2013","Articles needing additional references from November 2012","All articles needing additional references","Articles needing additional references from December 2011","Use dmy dates from January 2012","Wikipedia articles with GND identifiers","C programming language family","Class-based programming languages","Dynamically typed programming languages","GNUstep","NeXT","Object-oriented programming languages","Objective-C","Programming languages created in 1986"],"wgBreakFrames":false,"wgPageContentLanguage":"en","wgPageContentModel":"wikitext","wgSeparatorTransformTable":["",""],"wgDigitTransformTable":["",""],"wgDefaultDateFormat":"dmy","wgMonthNames":["","January","February","March","April","May","June","July","August","September","October","November","December"],"wgMonthNamesShort":["","Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"wgRelevantPageName":"Objective-C","wgRelevantArticleId":39809523,"wgRequestId":"WJMvHApAMFUAALyCqCYAAAAW","wgIsProbablyEditable":true,"wgRestrictionEdit":[],"wgRestrictionMove":[],"wgFlaggedRevsParams":{"tags":{}},"wgStableRevisionId":null,"wgWikiEditorEnabledModules":{"toolbar":true,"dialogs":true,"preview":false,"publish":false},"wgBetaFeaturesFeatures":[],"wgMediaViewerOnClick":true,"wgMediaViewerEnabledByDefault":true,"wgVisualEditor":{"pageLanguageCode":"en","pageLanguageDir":"ltr","usePageImages":true,"usePageDescriptions":true},"wgPreferredVariant":"en","wgMFDisplayWikibaseDescriptions":{"search":true,"nearby":true,"watchlist":true,"tagline":true},"wgRelatedArticles":null,"wgRelatedArticlesUseCirrusSearch":true,"wgRelatedArticlesOnlyUseCirrusSearch":false,"wgULSCurrentAutonym":"English","wgNoticeProject":"wikipedia","wgCentralNoticeCookiesToDelete":[],"wgCentralNoticeCategoriesUsingLegacy":["Fundraising","fundraising"],"wgCategoryTreePageCategoryOptions":"{\"mode\":0,\"hideprefix\":20,\"showcount\":true,\"namespaces\":false}","wgWikibaseItemId":"Q188531","wgCentralAuthMobileDomain":false,"wgVisualEditorToolbarScrollOffset":0,"wgEditSubmitButtonLabelPublish":false});mw.loader.state({"ext.globalCssJs.user.styles":"ready","ext.globalCssJs.site.styles":"ready","site.styles":"ready","noscript":"ready","user.styles":"ready","user":"ready","user.options":"loading","user.tokens":"loading","ext.cite.styles":"ready","ext.pygments":"ready","wikibase.client.init":"ready","ext.visualEditor.desktopArticleTarget.noscript":"ready","ext.uls.interlanguage":"ready","ext.wikimediaBadges":"ready","mediawiki.legacy.shared":"ready","mediawiki.legacy.commonPrint":"ready","mediawiki.sectionAnchor":"ready","mediawiki.skinning.interface":"ready","skins.vector.styles":"ready","ext.globalCssJs.user":"ready","ext.globalCssJs.site":"ready"});mw.loader.implement("user.options@0j3lz3q",function($,jQuery,require,module){mw.user.options.set({"variant":"en"});});mw.loader.implement("user.tokens@1dqfd7l",function ( $, jQuery, require, module ) {
mw.user.tokens.set({"editToken":"+\\","patrolToken":"+\\","watchToken":"+\\","csrfToken":"+\\"});/*@nomin*/;

});mw.loader.load(["ext.cite.a11y","mediawiki.toc","mediawiki.action.view.postEdit","site","mediawiki.page.startup","mediawiki.user","mediawiki.hidpi","mediawiki.page.ready","mediawiki.legacy.wikibits","mediawiki.searchSuggest","ext.gadget.teahouse","ext.gadget.ReferenceTooltips","ext.gadget.watchlist-notice","ext.gadget.DRN-wizard","ext.gadget.charinsert","ext.gadget.refToolbar","ext.gadget.extra-toolbar-buttons","ext.gadget.switcher","ext.gadget.featured-articles-links","ext.centralauth.centralautologin","mmv.head","mmv.bootstrap.autostart","ext.visualEditor.desktopArticleTarget.init","ext.visualEditor.targetLoader","ext.eventLogging.subscriber","ext.wikimediaEvents","ext.navigationTiming","ext.uls.eventlogger","ext.uls.init","ext.uls.interface","ext.quicksurveys.init","ext.centralNotice.geoIP","ext.centralNotice.startUp","skins.vector.js"]);});</script>
<link rel="stylesheet" href="/w/load.php?debug=false&amp;lang=en&amp;modules=ext.cite.styles%7Cext.pygments%2CwikimediaBadges%7Cext.uls.interlanguage%7Cext.visualEditor.desktopArticleTarget.noscript%7Cmediawiki.legacy.commonPrint%2Cshared%7Cmediawiki.sectionAnchor%7Cmediawiki.skinning.interface%7Cskins.vector.styles%7Cwikibase.client.init&amp;only=styles&amp;skin=vector"/>
<script async="" src="/w/load.php?debug=false&amp;lang=en&amp;modules=startup&amp;only=scripts&amp;skin=vector"></script>
<meta name="ResourceLoaderDynamicStyles" content=""/>
<link rel="stylesheet" href="/w/load.php?debug=false&amp;lang=en&amp;modules=site.styles&amp;only=styles&amp;skin=vector"/>
<meta name="generator" content="MediaWiki 1.29.0-wmf.9"/>
<meta name="referrer" content="origin-when-cross-origin"/>
<link rel="alternate" href="android-app://org.wikipedia/http/en.m.wikipedia.org/wiki/Objective-C"/>
<link rel="alternate" type="application/x-wiki" title="Edit this page" href="/w/index.php?title=Objective-C&amp;action=edit"/>
<link rel="edit" title="Edit this page" href="/w/index.php?title=Objective-C&amp;action=edit"/>
<link rel="apple-touch-icon" href="/static/apple-touch/wikipedia.png"/>
<link rel="shortcut icon" href="/static/favicon/wikipedia.ico"/>
<link rel="search" type="application/opensearchdescription+xml" href="/w/opensearch_desc.php" title="Wikipedia (en)"/>
<link rel="EditURI" type="application/rsd+xml" href="//en.wikipedia.org/w/api.php?action=rsd"/>
<link rel="copyright" href="//creativecommons.org/licenses/by-sa/3.0/"/>
<link rel="canonical" href="https://en.wikipedia.org/wiki/Objective-C"/>
<link rel="dns-prefetch" href="//login.wikimedia.org"/>
<link rel="dns-prefetch" href="//meta.wikimedia.org" />
</head>
<body class="mediawiki ltr sitedir-ltr mw-hide-empty-elt ns-0 ns-subject page-Objective-C rootpage-Objective-C skin-vector action-view">		<div id="mw-page-base" class="noprint"></div>
		<div id="mw-head-base" class="noprint"></div>
		<div id="content" class="mw-body" role="main">
			<a id="top"></a>

							<div id="siteNotice"><!-- CentralNotice --></div>
						<div class="mw-indicators">
</div>
			<h1 id="firstHeading" class="firstHeading" lang="en">Objective-C</h1>
									<div id="bodyContent" class="mw-body-content">
									<div id="siteSub">From Wikipedia, the free encyclopedia</div>
								<div id="contentSub"></div>
												<div id="jump-to-nav" class="mw-jump">
					Jump to:					<a href="#mw-head">navigation</a>, 					<a href="#p-search">search</a>
				</div>
				<div id="mw-content-text" lang="en" dir="ltr" class="mw-content-ltr"><script>function mfTempOpenSection(id){var block=document.getElementById("mf-section-"+id);block.className+=" open-block";block.previousSibling.className+=" open-block";}</script><table class="infobox vevent" style="width:22em">
<caption class="summary">Objective-C</caption>
<tr>
<th scope="row"><a href="/wiki/Programming_paradigm" title="Programming paradigm">Paradigm</a></th>
<td><a href="/wiki/Reflection_(computer_science)" class="mw-redirect" title="Reflection (computer science)">Reflective</a>, <a href="/wiki/Class-based_programming" title="Class-based programming">class-based</a> <a href="/wiki/Object-oriented_programming" title="Object-oriented programming">object-oriented</a></td>
</tr>
<tr>
<th scope="row"><a href="/wiki/Software_design" title="Software design">Designed&#160;by</a></th>
<td>Tom Love and <a href="/wiki/Brad_Cox" title="Brad Cox">Brad Cox</a></td>
</tr>
<tr>
<th scope="row">First&#160;appeared</th>
<td>1984<span class="noprint">; 33&#160;years ago</span><span style="display:none">&#160;(<span class="bday dtstart published updated">1984</span>)</span></td>
</tr>
<tr>
<td colspan="2" style="text-align:center"></td>
</tr>
<tr>
<th scope="row" style="white-space: nowrap;"><a href="/wiki/Software_release_life_cycle" title="Software release life cycle">Stable release</a></th>
<td>
<div style="margin:0px;">2.0<sup id="cite_ref-1" class="reference"><a href="#cite_note-1">[1]</a></sup></div>
</td>
</tr>
<tr>
<th scope="row"><a href="/wiki/Type_system" title="Type system">Typing discipline</a></th>
<td><a href="/wiki/Static_typing" class="mw-redirect" title="Static typing">static</a>, <a href="/wiki/Dynamic_typing" class="mw-redirect" title="Dynamic typing">dynamic</a>, <a href="/wiki/Weak_typing" class="mw-redirect" title="Weak typing">weak</a></td>
</tr>
<tr>
<th scope="row"><a href="/wiki/Operating_system" title="Operating system">OS</a></th>
<td><a href="/wiki/Cross-platform" title="Cross-platform">Cross-platform</a></td>
</tr>
<tr>
<th scope="row"><a href="/wiki/Filename_extension" title="Filename extension">Filename extensions</a></th>
<td>.h, .m, .mm, .C</td>
</tr>
<tr>
<th scope="row">Website</th>
<td><span class="url"><a rel="nofollow" class="external text" href="http://developer.apple.com/library/mac/navigation">developer<wbr />.apple<wbr />.com<wbr />/library<wbr />/mac<wbr />/navigation</a></span></td>
</tr>
<tr>
<th colspan="2" style="text-align:center;background-color: #eee;">Major <a href="/wiki/Programming_language_implementation" title="Programming language implementation">implementations</a></th>
</tr>
<tr>
<td colspan="2" style="text-align:center"><a href="/wiki/Clang" title="Clang">Clang</a>, <a href="/wiki/GNU_Compiler_Collection" title="GNU Compiler Collection">GCC</a></td>
</tr>
<tr>
<th colspan="2" style="text-align:center;background-color: #eee;">Influenced by</th>
</tr>
<tr>
<td colspan="2" style="text-align:center"><a href="/wiki/C_(programming_language)" title="C (programming language)">C</a>, <a href="/wiki/Smalltalk" title="Smalltalk">Smalltalk</a></td>
</tr>
<tr>
<th colspan="2" style="text-align:center;background-color: #eee;">Influenced</th>
</tr>
<tr>
<td colspan="2" style="text-align:center"><a href="/wiki/Groovy_(programming_language)" title="Groovy (programming language)">Groovy</a>, <a href="/wiki/Java_(programming_language)" title="Java (programming language)">Java</a>, <a href="/wiki/Nu_(programming_language)" title="Nu (programming language)">Nu</a>, <a href="/wiki/Objective-J" title="Objective-J">Objective-J</a>, <a href="/wiki/TOM_(object-oriented_programming_language)" title="TOM (object-oriented programming language)">TOM</a>, <a href="/wiki/Swift_(programming_language)" title="Swift (programming language)">Swift</a><sup id="cite_ref-lattner2014_2-0" class="reference"><a href="#cite_note-lattner2014-2">[2]</a></sup></td>
</tr>
<tr>
<td colspan="2" class="hlist" style="text-align:center;border-top: 1px solid #aaa; padding-top: 3px;">
<ul>
<li><a href="/wiki/File:Wikibooks-logo-en-noslogan.svg" class="image"><img alt="" src="//upload.wikimedia.org/wikipedia/commons/thumb/d/df/Wikibooks-logo-en-noslogan.svg/16px-Wikibooks-logo-en-noslogan.svg.png" width="16" height="16" class="noviewer" srcset="//upload.wikimedia.org/wikipedia/commons/thumb/d/df/Wikibooks-logo-en-noslogan.svg/24px-Wikibooks-logo-en-noslogan.svg.png 1.5x, //upload.wikimedia.org/wikipedia/commons/thumb/d/df/Wikibooks-logo-en-noslogan.svg/32px-Wikibooks-logo-en-noslogan.svg.png 2x" data-file-width="400" data-file-height="400" /></a> <a href="https://en.wikibooks.org/wiki/Objective-C_Programming" class="extiw" title="wikibooks:Objective-C Programming">Objective-C Programming</a> at Wikibooks</li>
</ul>
</td>
</tr>
</table>
<p><b>Objective-C</b> is a <a href="/wiki/General-purpose_programming_language" title="General-purpose programming language">general-purpose</a>, <a href="/wiki/Object-oriented_programming" title="Object-oriented programming">object-oriented</a> <a href="/wiki/Programming_language" title="Programming language">programming language</a> that adds <a href="/wiki/Smalltalk" title="Smalltalk">Smalltalk</a>-style <a href="/wiki/Message_passing" title="Message passing">messaging</a> to the <a href="/wiki/C_(programming_language)" title="C (programming language)">C</a> programming language. It was the main programming language used by <a href="/wiki/Apple_Inc." title="Apple Inc.">Apple</a> for the <a href="/wiki/OS_X" class="mw-redirect" title="OS X">OS X</a> and <a href="/wiki/IOS" title="IOS">iOS</a> operating systems, and their respective <a href="/wiki/Application_programming_interface" title="Application programming interface">application programming interfaces</a> (APIs) <a href="/wiki/Cocoa_(API)" title="Cocoa (API)">Cocoa</a> and <a href="/wiki/Cocoa_Touch" title="Cocoa Touch">Cocoa Touch</a> prior to the introduction of <a href="/wiki/Swift_(programming_language)" title="Swift (programming language)">Swift</a>.</p>
<p>The programming language Objective-C was originally developed in the early 1980s. It was selected as the main language used by <a href="/wiki/NeXT" title="NeXT">NeXT</a> for its <a href="/wiki/NeXTSTEP" title="NeXTSTEP">NeXTSTEP</a> operating system, from which OS X and iOS are derived.<sup id="cite_ref-3" class="reference"><a href="#cite_note-3">[3]</a></sup> Portable Objective-C programs that do not use the <a href="/wiki/Cocoa_(API)" title="Cocoa (API)">Cocoa</a> or <a href="/wiki/Cocoa_Touch" title="Cocoa Touch">Cocoa Touch</a> libraries, or those using parts that may be ported or reimplemented for other systems, can also be compiled for any system supported by <a href="/wiki/GNU_Compiler_Collection" title="GNU Compiler Collection">GNU Compiler Collection</a> (GCC) or <a href="/wiki/Clang" title="Clang">Clang</a>.</p>
<p>Objective-C source code 'implementation' program files usually have <tt>.m</tt> filename extensions, while Objective-C 'header/interface' files have <tt>.h</tt> extensions, the same as C header files. Objective-C++ files are denoted with a <tt>.mm</tt> file extension.</p>
<p></p>
<div id="toc" class="toc">
<div id="toctitle">
<h2>Contents</h2>
</div>
<ul>
<li class="toclevel-1 tocsection-1"><a href="#History"><span class="tocnumber">1</span> <span class="toctext">History</span></a>
<ul>
<li class="toclevel-2 tocsection-2"><a href="#Popularization_through_NeXT"><span class="tocnumber">1.1</span> <span class="toctext">Popularization through NeXT</span></a></li>
<li class="toclevel-2 tocsection-3"><a href="#Apple_development_and_Swift"><span class="tocnumber">1.2</span> <span class="toctext">Apple development and Swift</span></a></li>
</ul>
</li>
<li class="toclevel-1 tocsection-4"><a href="#Syntax"><span class="tocnumber">2</span> <span class="toctext">Syntax</span></a>
<ul>
<li class="toclevel-2 tocsection-5"><a href="#Messages"><span class="tocnumber">2.1</span> <span class="toctext">Messages</span></a></li>
<li class="toclevel-2 tocsection-6"><a href="#Interfaces_and_implementations"><span class="tocnumber">2.2</span> <span class="toctext">Interfaces and implementations</span></a>
<ul>
<li class="toclevel-3 tocsection-7"><a href="#Interface"><span class="tocnumber">2.2.1</span> <span class="toctext">Interface</span></a></li>
<li class="toclevel-3 tocsection-8"><a href="#Implementation"><span class="tocnumber">2.2.2</span> <span class="toctext">Implementation</span></a></li>
<li class="toclevel-3 tocsection-9"><a href="#Instantiation"><span class="tocnumber">2.2.3</span> <span class="toctext">Instantiation</span></a></li>
</ul>
</li>
<li class="toclevel-2 tocsection-10"><a href="#Protocols"><span class="tocnumber">2.3</span> <span class="toctext">Protocols</span></a></li>
<li class="toclevel-2 tocsection-11"><a href="#Dynamic_typing"><span class="tocnumber">2.4</span> <span class="toctext">Dynamic typing</span></a></li>
<li class="toclevel-2 tocsection-12"><a href="#Forwarding"><span class="tocnumber">2.5</span> <span class="toctext">Forwarding</span></a>
<ul>
<li class="toclevel-3 tocsection-13"><a href="#Example"><span class="tocnumber">2.5.1</span> <span class="toctext">Example</span></a></li>
<li class="toclevel-3 tocsection-14"><a href="#Notes"><span class="tocnumber">2.5.2</span> <span class="toctext">Notes</span></a></li>
</ul>
</li>
<li class="toclevel-2 tocsection-15"><a href="#Categories"><span class="tocnumber">2.6</span> <span class="toctext">Categories</span></a>
<ul>
<li class="toclevel-3 tocsection-16"><a href="#Example_usage_of_categories"><span class="tocnumber">2.6.1</span> <span class="toctext">Example usage of categories</span></a></li>
<li class="toclevel-3 tocsection-17"><a href="#Notes_2"><span class="tocnumber">2.6.2</span> <span class="toctext">Notes</span></a></li>
</ul>
</li>
<li class="toclevel-2 tocsection-18"><a href="#Posing"><span class="tocnumber">2.7</span> <span class="toctext">Posing</span></a></li>
<li class="toclevel-2 tocsection-19"><a href="#.23import"><span class="tocnumber">2.8</span> <span class="toctext">#import</span></a></li>
</ul>
</li>
<li class="toclevel-1 tocsection-20"><a href="#Other_features"><span class="tocnumber">3</span> <span class="toctext">Other features</span></a></li>
<li class="toclevel-1 tocsection-21"><a href="#Language_variants"><span class="tocnumber">4</span> <span class="toctext">Language variants</span></a>
<ul>
<li class="toclevel-2 tocsection-22"><a href="#Objective-C.2B.2B"><span class="tocnumber">4.1</span> <span class="toctext">Objective-C++</span></a></li>
<li class="toclevel-2 tocsection-23"><a href="#Objective-C_2.0"><span class="tocnumber">4.2</span> <span class="toctext">Objective-C 2.0</span></a>
<ul>
<li class="toclevel-3 tocsection-24"><a href="#Garbage_collection"><span class="tocnumber">4.2.1</span> <span class="toctext">Garbage collection</span></a></li>
<li class="toclevel-3 tocsection-25"><a href="#Properties"><span class="tocnumber">4.2.2</span> <span class="toctext">Properties</span></a></li>
<li class="toclevel-3 tocsection-26"><a href="#Non-fragile_instance_variables"><span class="tocnumber">4.2.3</span> <span class="toctext">Non-fragile instance variables</span></a></li>
<li class="toclevel-3 tocsection-27"><a href="#Fast_enumeration"><span class="tocnumber">4.2.4</span> <span class="toctext">Fast enumeration</span></a></li>
<li class="toclevel-3 tocsection-28"><a href="#Class_extensions"><span class="tocnumber">4.2.5</span> <span class="toctext">Class extensions</span></a></li>
<li class="toclevel-3 tocsection-29"><a href="#Implications_for_Cocoa_development"><span class="tocnumber">4.2.6</span> <span class="toctext">Implications for Cocoa development</span></a></li>
</ul>
</li>
<li class="toclevel-2 tocsection-30"><a href="#Blocks"><span class="tocnumber">4.3</span> <span class="toctext">Blocks</span></a></li>
<li class="toclevel-2 tocsection-31"><a href="#Modern_Objective-C"><span class="tocnumber">4.4</span> <span class="toctext">Modern Objective-C</span></a>
<ul>
<li class="toclevel-3 tocsection-32"><a href="#Automatic_Reference_Counting"><span class="tocnumber">4.4.1</span> <span class="toctext">Automatic Reference Counting</span></a></li>
<li class="toclevel-3 tocsection-33"><a href="#Literals"><span class="tocnumber">4.4.2</span> <span class="toctext">Literals</span></a></li>
<li class="toclevel-3 tocsection-34"><a href="#Subscripting"><span class="tocnumber">4.4.3</span> <span class="toctext">Subscripting</span></a></li>
</ul>
</li>
<li class="toclevel-2 tocsection-35"><a href="#.22Modern.22_Objective-C_syntax_.281997.29"><span class="tocnumber">4.5</span> <span class="toctext">"Modern" Objective-C syntax (1997)</span></a></li>
<li class="toclevel-2 tocsection-36"><a href="#Portable_Object_Compiler"><span class="tocnumber">4.6</span> <span class="toctext">Portable Object Compiler</span></a></li>
<li class="toclevel-2 tocsection-37"><a href="#GEOS_Objective-C"><span class="tocnumber">4.7</span> <span class="toctext">GEOS Objective-C</span></a></li>
<li class="toclevel-2 tocsection-38"><a href="#Clang"><span class="tocnumber">4.8</span> <span class="toctext">Clang</span></a></li>
</ul>
</li>
<li class="toclevel-1 tocsection-39"><a href="#Library_use"><span class="tocnumber">5</span> <span class="toctext">Library use</span></a></li>
<li class="toclevel-1 tocsection-40"><a href="#Analysis_of_the_language"><span class="tocnumber">6</span> <span class="toctext">Analysis of the language</span></a>
<ul>
<li class="toclevel-2 tocsection-41"><a href="#Memory_management"><span class="tocnumber">6.1</span> <span class="toctext">Memory management</span></a></li>
<li class="toclevel-2 tocsection-42"><a href="#Philosophical_differences_between_Objective-C_and_C.2B.2B"><span class="tocnumber">6.2</span> <span class="toctext">Philosophical differences between Objective-C and C++</span></a></li>
</ul>
</li>
<li class="toclevel-1 tocsection-43"><a href="#See_also"><span class="tocnumber">7</span> <span class="toctext">See also</span></a></li>
<li class="toclevel-1 tocsection-44"><a href="#References"><span class="tocnumber">8</span> <span class="toctext">References</span></a></li>
<li class="toclevel-1 tocsection-45"><a href="#Further_reading"><span class="tocnumber">9</span> <span class="toctext">Further reading</span></a></li>
<li class="toclevel-1 tocsection-46"><a href="#External_links"><span class="tocnumber">10</span> <span class="toctext">External links</span></a></li>
</ul>
</div>
<p></p>
<h2><span class="mw-headline" id="History">History</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/w/index.php?title=Objective-C&amp;action=edit&amp;section=1" title="Edit section: History">edit</a><span class="mw-editsection-bracket">]</span></span></h2>
<p>Objective-C was created primarily by <a href="/wiki/Brad_Cox" title="Brad Cox">Brad Cox</a> and Tom Love in the early 1980s at their company <a href="/wiki/Stepstone" title="Stepstone">Stepstone</a>.<sup id="cite_ref-Wired1_4-0" class="reference"><a href="#cite_note-Wired1-4">[4]</a></sup> Both had been introduced to <a href="/wiki/Smalltalk" title="Smalltalk">Smalltalk</a> while at <a href="/wiki/ITT_Corporation" title="ITT Corporation">ITT Corporation</a>'s Programming Technology Center in 1981. The earliest work on Objective-C traces back to around that time.<sup id="cite_ref-5" class="reference"><a href="#cite_note-5">[5]</a></sup> Cox was intrigued by problems of true reusability in <a href="/wiki/Software_engineering" title="Software engineering">software design</a> and programming. He realized that a language like Smalltalk would be invaluable in building development environments for system developers at ITT. However, he and Tom Love also recognized that backward compatibility with C was critically important in ITT's telecom engineering milieu.<sup id="cite_ref-love2009_6-0" class="reference"><a href="#cite_note-love2009-6">[6]</a></sup></p>
<p>Cox began writing a pre-processor for C to add some of the abilities of Smalltalk. He soon had a working implementation of an object-oriented extension to the C language, which he called "OOPC" for Object-Oriented Pre-Compiler.<sup id="cite_ref-7" class="reference"><a href="#cite_note-7">[7]</a></sup> Love was hired by Schlumberger Research in 1982 and had the opportunity to acquire the first commercial copy of Smalltalk-80, which further influenced the development of their brainchild.</p>
<p>In order to demonstrate that real progress could be made, Cox showed that making interchangeable <a href="/wiki/Software_component" class="mw-redirect" title="Software component">software components</a> really needed only a few practical changes to existing tools. Specifically, they needed to support objects in a flexible manner, come supplied with a usable set of libraries, and allow for the code (and any resources needed by the code) to be bundled into one cross-platform format.</p>
<p>Love and Cox eventually formed a new venture, <a href="/wiki/Stepstone" title="Stepstone">Productivity Products International</a> (PPI), to commercialize their product, which coupled an Objective-C compiler with class libraries. In 1986, Cox published the main description of Objective-C in its original form in the book <i>Object-Oriented Programming, An Evolutionary Approach</i>. Although he was careful to point out that there is more to the problem of reusability than just the language, Objective-C often found itself compared feature for feature with other languages.</p>
<h3><span class="mw-headline" id="Popularization_through_NeXT">Popularization through NeXT</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/w/index.php?title=Objective-C&amp;action=edit&amp;section=2" title="Edit section: Popularization through NeXT">edit</a><span class="mw-editsection-bracket">]</span></span></h3>
<p>In 1988, <a href="/wiki/NeXT" title="NeXT">NeXT</a> licensed Objective-C from StepStone (the new name of PPI, the owner of the Objective-C trademark) and extended the <a href="/wiki/GNU_Compiler_Collection" title="GNU Compiler Collection">GCC</a> compiler to support Objective-C. NeXT developed the <a href="/wiki/Application_Kit" title="Application Kit">AppKit</a> and <a href="/wiki/Foundation_Kit" title="Foundation Kit">Foundation Kit</a> libraries on which the <a href="/wiki/NeXTSTEP" title="NeXTSTEP">NeXTSTEP</a> user interface and Interface Builder were based. While the NeXT workstations failed to make a great impact in the marketplace, the tools were widely lauded in the industry. This led NeXT to drop hardware production and focus on software tools, selling NeXTSTEP (and OpenStep) as a platform for custom programming.</p>
<p>In order to circumvent the terms of the <a href="/wiki/GPL" class="mw-redirect" title="GPL">GPL</a>, NeXT had originally intended to ship the Objective-C frontend separately, allowing the user to link it with GCC to produce the compiler executable. After being initially accepted by <a href="/wiki/Richard_M._Stallman" class="mw-redirect" title="Richard M. Stallman">Richard M. Stallman</a>, this plan was rejected after Stallman consulted with GNU's lawyers and NeXT agreed to make Objective-C part of GCC.<sup id="cite_ref-8" class="reference"><a href="#cite_note-8">[8]</a></sup></p>
<p>The work to extend <a href="/wiki/GNU_Compiler_Collection" title="GNU Compiler Collection">GCC</a> was led by Steve Naroff, who joined NeXT from StepStone. The compiler changes were made available as per <a href="/wiki/GNU_Public_License" class="mw-redirect" title="GNU Public License">GPL</a> license terms, but the runtime libraries were not, rendering the open source contribution unusable to the general public. This led to other parties developing such runtime libraries under open source license. Later, Steve Naroff was also principal contributor to work at Apple to build the Objective-C frontend to <a href="/wiki/Clang" title="Clang">Clang</a>.</p>
<p>The <a href="/wiki/GNU" title="GNU">GNU</a> project started work on its free software implementation of Cocoa, named <a href="/wiki/GNUstep" title="GNUstep">GNUstep</a>, based on the <a href="/wiki/OpenStep" title="OpenStep">OpenStep</a> standard.<sup id="cite_ref-GNUstep_site_9-0" class="reference"><a href="#cite_note-GNUstep_site-9">[9]</a></sup> Dennis Glatting wrote the first GNU Objective-C <a href="/wiki/Run_time_system" class="mw-redirect" title="Run time system">runtime</a> in 1992. The GNU Objective-C runtime, which has been in use since 1993, is the one developed by Kresten Krab Thorup when he was a university student in <a href="/wiki/Denmark" title="Denmark">Denmark</a>.<sup class="noprint Inline-Template Template-Fact" style="white-space:nowrap;">[<i><a href="/wiki/Wikipedia:Citation_needed" title="Wikipedia:Citation needed"><span title="This claim needs references to reliable sources. (April 2013)">citation needed</span></a></i>]</sup> Thorup also worked at NeXT from 1993 to 1996.<sup id="cite_ref-10" class="reference"><a href="#cite_note-10">[10]</a></sup></p>
<h3><span class="mw-headline" id="Apple_development_and_Swift">Apple development and Swift</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/w/index.php?title=Objective-C&amp;action=edit&amp;section=3" title="Edit section: Apple development and Swift">edit</a><span class="mw-editsection-bracket">]</span></span></h3>
<p>After acquiring NeXT in 1996, <a href="/wiki/Apple_Computer" class="mw-redirect" title="Apple Computer">Apple Computer</a> used OpenStep in its new operating system, <a href="/wiki/OS_X" class="mw-redirect" title="OS X">OS X</a>. This included Objective-C, NeXT's Objective-C-based developer tool, <a href="/wiki/Project_Builder" title="Project Builder">Project Builder</a>, and its interface design tool, <a href="/wiki/Interface_Builder" title="Interface Builder">Interface Builder</a>, both now merged into one <a href="/wiki/Xcode" title="Xcode">Xcode</a> application. Most of Apple's current <a href="/wiki/Cocoa_(API)" title="Cocoa (API)">Cocoa API</a> is based on OpenStep interface objects and is the most significant Objective-C environment being used for active development.</p>
<p>At <a href="/wiki/WWDC" class="mw-redirect" title="WWDC">WWDC</a> 2014, Apple introduced a new language, <a href="/wiki/Swift_(programming_language)" title="Swift (programming language)">Swift</a>, which was characterized as "Objective-C without the C".</p>
<h2><span class="mw-headline" id="Syntax">Syntax</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/w/index.php?title=Objective-C&amp;action=edit&amp;section=4" title="Edit section: Syntax">edit</a><span class="mw-editsection-bracket">]</span></span></h2>
<p>Objective-C is a thin layer atop C, and is a "strict <a href="/wiki/Superset" class="mw-redirect" title="Superset">superset</a>" of C, meaning that it is possible to compile any C program with an Objective-C compiler, and to freely include C language code within an Objective-C class.<sup id="cite_ref-11" class="reference"><a href="#cite_note-11">[11]</a></sup><sup id="cite_ref-12" class="reference"><a href="#cite_note-12">[12]</a></sup><sup id="cite_ref-13" class="reference"><a href="#cite_note-13">[13]</a></sup><sup id="cite_ref-14" class="reference"><a href="#cite_note-14">[14]</a></sup><sup id="cite_ref-15" class="reference"><a href="#cite_note-15">[15]</a></sup><sup id="cite_ref-16" class="reference"><a href="#cite_note-16">[16]</a></sup></p>
<p>Objective-C derives its object syntax from <a href="/wiki/Smalltalk" title="Smalltalk">Smalltalk</a>. All of the syntax for non-object-oriented operations (including primitive variables, pre-processing, expressions, function declarations, and function calls) are identical to those of C, while the syntax for object-oriented features is an implementation of Smalltalk-style messaging.</p>
<h3><span class="mw-headline" id="Messages">Messages</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/w/index.php?title=Objective-C&amp;action=edit&amp;section=5" title="Edit section: Messages">edit</a><span class="mw-editsection-bracket">]</span></span></h3>
<p>The Objective-C model of object-oriented programming is based on <a href="/wiki/Message_passing" title="Message passing">message passing</a> to object instances. In Objective-C one does not <i>call a method</i>; one <i>sends a message</i>. This is unlike the <a href="/wiki/Simula" title="Simula">Simula</a>-style programming model used by <a href="/wiki/C%2B%2B" title="C++">C++</a>. The difference between these two concepts is in how the code referenced by the method or message name is executed. In a Simula-style language, the method name is in most cases <a href="/wiki/Name_binding" title="Name binding">bound</a> to a section of code in the target class by the compiler. In <a href="/wiki/Smalltalk" title="Smalltalk">Smalltalk</a> and Objective-C, the target of a message is resolved at runtime, with the receiving object itself interpreting the message. A method is identified by a <i>selector</i> or <tt>SEL</tt> — a <tt>NUL</tt>-terminated string representing its name — and resolved to a C method <a href="/wiki/Pointer_(computer_programming)" title="Pointer (computer programming)">pointer</a> implementing it: an <tt>IMP</tt>.<sup id="cite_ref-17" class="reference"><a href="#cite_note-17">[17]</a></sup> A consequence of this is that the message-passing system has no type checking. The object to which the message is directed — the <i>receiver</i> — is not guaranteed to respond to a message, and if it does not, it raises an exception.<sup id="cite_ref-18" class="reference"><a href="#cite_note-18">[18]</a></sup></p>
<p>Sending the message <tt>method</tt> to the object pointed to by the pointer <tt>obj</tt> would require the following code in <a href="/wiki/C%2B%2B" title="C++">C++</a>:</p>
<div class="mw-highlight mw-content-ltr" dir="ltr">
<pre>
<span class="n">obj</span><span class="o">-&gt;</span><span class="n">method</span><span class="p">(</span><span class="n">argument</span><span class="p">);</span>
</pre></div>
<p>In Objective-C, this is written as follows:</p>
<div class="mw-highlight mw-content-ltr" dir="ltr">
<pre>
<span class="p">[</span><span class="n">obj</span> <span class="nl">method</span><span class="p">:</span><span class="n">argument</span><span class="p">];</span>
</pre></div>
<p>Both styles of programming have their strengths and weaknesses. Object-oriented programming in the Simula (C++) style allows <a href="/wiki/Multiple_inheritance" title="Multiple inheritance">multiple inheritance</a> and faster execution by using <a href="/wiki/Compile-time_binding" class="mw-redirect" title="Compile-time binding">compile-time binding</a> whenever possible, but it does not support <a href="/wiki/Dynamic_dispatch" title="Dynamic dispatch">dynamic binding</a> by default. It also forces all methods to have a corresponding implementation unless they are <a href="/wiki/Abstract_method" class="mw-redirect" title="Abstract method">abstract</a>. The Smalltalk-style programming as used in Objective-C allows messages to go unimplemented, with the method resolved to its implementation at runtime. For example, a message may be sent to a collection of objects, to which only some will be expected to respond, without fear of producing runtime errors. Message passing also does not require that an object be defined at compile time. An implementation is still required for the method to be called in the derived object. (See the <a href="#Dynamic_typing">dynamic typing</a> section below for more advantages of dynamic (late) binding.)</p>
<h3><span class="mw-headline" id="Interfaces_and_implementations">Interfaces and implementations</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/w/index.php?title=Objective-C&amp;action=edit&amp;section=6" title="Edit section: Interfaces and implementations">edit</a><span class="mw-editsection-bracket">]</span></span></h3>
<p>Objective-C requires that the interface and implementation of a class be in separately declared code blocks. By convention, developers place the interface in a <a href="/wiki/Header_file" class="mw-redirect" title="Header file">header file</a> and the implementation in a code file. The header files, normally suffixed .h, are similar to C header files while the implementation (method) files, normally suffixed .m, can be very similar to C code files.</p>
<h4><span class="mw-headline" id="Interface">Interface</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/w/index.php?title=Objective-C&amp;action=edit&amp;section=7" title="Edit section: Interface">edit</a><span class="mw-editsection-bracket">]</span></span></h4>
<p>In other programming languages, this is called a "class declaration".</p>
<p>The interface of a class is usually defined in a header file. A common convention is to name the header file after the name of the class, e.g. <tt>Ball.h</tt> would contain the interface for the class <tt>Ball</tt>.</p>
<p>An interface declaration takes the form:</p>
<div class="mw-highlight mw-content-ltr" dir="ltr">
<pre>
<span class="k">@interface</span> <span class="nc">classname</span> : <span class="nc">superclassname</span> <span class="p">{</span>
 <span class="c1">// instance variables</span>
<span class="p">}</span>
<span class="p">+</span> <span class="nf">classMethod1</span><span class="p">;</span>
<span class="p">+</span> <span class="p">(</span><span class="n">return_type</span><span class="p">)</span><span class="nf">classMethod2</span><span class="p">;</span>
<span class="p">+</span> <span class="p">(</span><span class="n">return_type</span><span class="p">)</span><span class="nf">classMethod3:</span><span class="p">(</span><span class="n">param1_type</span><span class="p">)</span><span class="nv">param1_varName</span><span class="p">;</span>

<span class="p">-</span> <span class="p">(</span><span class="n">return_type</span><span class="p">)</span><span class="nf">instanceMethod1With1Parameter:</span><span class="p">(</span><span class="n">param1_type</span><span class="p">)</span><span class="nv">param1_varName</span><span class="p">;</span>
<span class="p">-</span> <span class="p">(</span><span class="n">return_type</span><span class="p">)</span><span class="nf">instanceMethod2With2Parameters:</span><span class="p">(</span><span class="n">param1_type</span><span class="p">)</span><span class="nv">param1_varName</span> <span class="nf">param2_callName:</span><span class="p">(</span><span class="n">param2_type</span><span class="p">)</span><span class="nv">param2_varName</span><span class="p">;</span>
<span class="k">@end</span>
</pre></div>
<p>In the above, plus signs denote <a href="/wiki/Class_method" class="mw-redirect" title="Class method">class methods</a>, or methods that can be called on the class itself (not on an instance), and minus signs denote <a href="/wiki/Instance_method" class="mw-redirect" title="Instance method">instance methods</a>, which can only be called on a particular instance of the class. Class methods also have no access to instance variables.</p>
<p>The code above is roughly equivalent to the following <a href="/wiki/C%2B%2B" title="C++">C++</a> interface:</p>
<div class="mw-highlight mw-content-ltr" dir="ltr">
<pre>
<span class="k">class</span> <span class="nc">classname</span> <span class="o">:</span> <span class="k">public</span> <span class="n">superclassname</span> <span class="p">{</span>
 <span class="k">protected</span><span class="o">:</span>
 <span class="c1">// instance variables</span>

 <span class="k">public</span><span class="o">:</span>
 <span class="c1">// Class (static) functions</span>
 <span class="k">static</span> <span class="kt">void</span> <span class="o">*</span> <span class="n">classMethod1</span><span class="p">();</span>
 <span class="k">static</span> <span class="n">return_type</span> <span class="nf">classMethod2</span><span class="p">();</span>
 <span class="k">static</span> <span class="n">return_type</span> <span class="nf">classMethod3</span><span class="p">(</span><span class="n">param1_type</span> <span class="n">param1_varName</span><span class="p">);</span>

 <span class="c1">// Instance (member) functions</span>
 <span class="n">return_type</span> <span class="nf">instanceMethod1With1Parameter</span> <span class="p">(</span><span class="n">param1_type</span> <span class="n">param1_varName</span><span class="p">);</span>
 <span class="n">return_type</span> <span class="nf">instanceMethod2With2Parameters</span> <span class="p">(</span><span class="n">param1_type</span> <span class="n">param1_varName</span><span class="p">,</span> <span class="n">param2_type</span> <span class="n">param2_varName</span><span class="o">=</span><span class="k">default</span><span class="p">);</span>
<span class="p">};</span>
</pre></div>
<p>Note that <tt>instanceMethod2With2Parameters:param2_callName:</tt> demonstrates the interleaving of selector segments with argument expressions, for which there is no direct equivalent in C/C++.</p>
<p>Return types can be any standard C type, a pointer to a generic Objective-C object, a pointer to a specific type of object such as NSArray *, NSImage *, or NSString *, or a pointer to the class to which the method belongs (instancetype). The default return type is the generic Objective-C type <tt>id</tt>.</p>
<p>Method arguments begin with a name labeling the argument that is part of the method name, followed by a colon followed by the expected argument type in parentheses and the argument name. The label can be omitted.</p>
<div class="mw-highlight mw-content-ltr" dir="ltr">
<pre>
<span class="p">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">setRangeStart:</span><span class="p">(</span><span class="kt">int</span><span class="p">)</span><span class="nv">start</span> <span class="nf">end:</span><span class="p">(</span><span class="kt">int</span><span class="p">)</span><span class="nv">end</span><span class="p">;</span>
<span class="p">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">importDocumentWithName:</span><span class="p">(</span><span class="bp">NSString</span> <span class="o">*</span><span class="p">)</span><span class="nv">name</span> <span class="nf">withSpecifiedPreferences:</span>
<span class="p">(</span><span class="n">Preferences</span> <span class="o">*</span><span class="p">)</span><span class="nv">prefs</span> <span class="nf">beforePage:</span><span class="p">(</span><span class="kt">int</span><span class="p">)</span><span class="nv">insertPage</span><span class="p">;</span>
</pre></div>
<h4><span class="mw-headline" id="Implementation">Implementation</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/w/index.php?title=Objective-C&amp;action=edit&amp;section=8" title="Edit section: Implementation">edit</a><span class="mw-editsection-bracket">]</span></span></h4>
<p>The interface only declares the class interface and not the methods themselves: the actual code is written in the implementation file. Implementation (method) files normally have the file extension <code>.m</code>, which originally signified "messages".<sup id="cite_ref-19" class="reference"><a href="#cite_note-19">[19]</a></sup></p>
<div class="mw-highlight mw-content-ltr" dir="ltr">
<pre>
<span class="k">@implementation</span> <span class="nc">classname</span>
<span class="p">+</span> <span class="p">(</span><span class="n">return_type</span><span class="p">)</span><span class="nf">classMethod</span>
<span class="p">{</span>
 <span class="c1">// implementation</span>
<span class="p">}</span>
<span class="p">-</span> <span class="p">(</span><span class="n">return_type</span><span class="p">)</span><span class="nf">instanceMethod</span>
<span class="p">{</span>
 <span class="c1">// implementation</span>
<span class="p">}</span>
<span class="k">@end</span>
</pre></div>
<p>Methods are written using their interface declarations. Comparing Objective-C and C:</p>
<div class="mw-highlight mw-content-ltr" dir="ltr">
<pre>
<span class="p">-</span> <span class="p">(</span><span class="kt">int</span><span class="p">)</span><span class="nf">method:</span><span class="p">(</span><span class="kt">int</span><span class="p">)</span><span class="nv">i</span>
<span class="p">{</span>
 <span class="k">return</span> <span class="p">[</span><span class="nb">self</span> <span class="nl">square_root</span><span class="p">:</span><span class="n">i</span><span class="p">];</span>
<span class="p">}</span>
</pre></div>
<div class="mw-highlight mw-content-ltr" dir="ltr">
<pre>
<span class="kt">int</span> <span class="nf">function</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span><span class="p">)</span>
<span class="p">{</span>
 <span class="k">return</span> <span class="n">square_root</span><span class="p">(</span><span class="n">i</span><span class="p">);</span>
<span class="p">}</span>
</pre></div>
<p>The syntax allows pseudo-<a href="/wiki/Named_parameter" title="Named parameter">naming of arguments</a>.</p>
<div class="mw-highlight mw-content-ltr" dir="ltr">
<pre>
<span class="p">-</span> <span class="p">(</span><span class="kt">int</span><span class="p">)</span><span class="nf">changeColorToRed:</span><span class="p">(</span><span class="kt">float</span><span class="p">)</span><span class="nv">red</span> <span class="nf">green:</span><span class="p">(</span><span class="kt">float</span><span class="p">)</span><span class="nv">green</span> <span class="nf">blue:</span><span class="p">(</span><span class="kt">float</span><span class="p">)</span><span class="nv">blue</span><span class="p">;</span>

<span class="p">[</span><span class="n">myColor</span> <span class="nl">changeColorToRed</span><span class="p">:</span><span class="mf">5.0</span> <span class="nl">green</span><span class="p">:</span><span class="mf">2.0</span> <span class="nl">blue</span><span class="p">:</span><span class="mf">6.0</span><span class="p">];</span>
</pre></div>
<p>Internal representations of a method vary between different implementations of Objective-C. If myColor is of the class <tt>Color</tt>, instance method <tt>-changeColorToRed:green:blue:</tt> might be internally labeled <tt>_i_Color_changeColorToRed_green_blue</tt>. The <tt>i</tt> is to refer to an instance method, with the class and then method names appended and colons changed to underscores. As the order of parameters is part of the method name, it cannot be changed to suit coding style or expression as with true named parameters.</p>
<p>However, internal names of the function are rarely used directly. Generally, messages are converted to function calls defined in the Objective-C runtime library. It is not necessarily known at link time which method will be called because the class of the receiver (the object being sent the message) need not be known until runtime.</p>
<h4><span class="mw-headline" id="Instantiation">Instantiation</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/w/index.php?title=Objective-C&amp;action=edit&amp;section=9" title="Edit section: Instantiation">edit</a><span class="mw-editsection-bracket">]</span></span></h4>
<p>Once an Objective-C class is written, it can be instantiated. This is done by first allocating an uninitialized instance of the class (an object) and then by initializing it. An object is not fully functional until both steps have been completed. These steps should be accomplished with one line of code so that there is never an allocated object that hasn't undergone initialization (and because it is unwise to keep the intermediate result since <code>-init</code> can return a different object than that on which it is called).</p>
<p>Instantiation with the default, no-parameter initializer:</p>
<div class="mw-highlight mw-content-ltr" dir="ltr">
<pre>
<span class="n">MyObject</span> <span class="o">*</span><span class="n">o</span> <span class="o">=</span> <span class="p">[[</span><span class="n">MyObject</span> <span class="n">alloc</span><span class="p">]</span> <span class="n">init</span><span class="p">];</span>
</pre></div>
<p>Instantiation with a custom initializer:</p>
<div class="mw-highlight mw-content-ltr" dir="ltr">
<pre>
<span class="n">MyObject</span> <span class="o">*</span><span class="n">o</span> <span class="o">=</span> <span class="p">[[</span><span class="n">MyObject</span> <span class="n">alloc</span><span class="p">]</span> <span class="nl">initWithString</span><span class="p">:</span><span class="n">myString</span><span class="p">];</span>
</pre></div>
<p>In the case where no custom initialization is being performed, the "new" method can often be used in place of the alloc-init messages:</p>
<div class="mw-highlight mw-content-ltr" dir="ltr">
<pre>
<span class="n">MyObject</span> <span class="o">*</span><span class="n">o</span> <span class="o">=</span> <span class="p">[</span><span class="n">MyObject</span> <span class="n">new</span><span class="p">];</span>
</pre></div>
<p>Also, some classes implement class method initializers. Like <code>+new</code>, they combine <code>+alloc</code> and <code>-init</code>, but unlike <code>+new</code>, they return an autoreleased instance. Some class method initializers take parameters:</p>
<div class="mw-highlight mw-content-ltr" dir="ltr">
<pre>
<span class="n">MyObject</span> <span class="o">*</span><span class="n">o</span> <span class="o">=</span> <span class="p">[</span><span class="n">MyObject</span> <span class="n">object</span><span class="p">];</span>
<span class="n">MyObject</span> <span class="o">*</span><span class="n">o2</span> <span class="o">=</span> <span class="p">[</span><span class="n">MyObject</span> <span class="nl">objectWithString</span><span class="p">:</span><span class="n">myString</span><span class="p">];</span>
</pre></div>
<p>The <i>alloc</i> message allocates enough memory to hold all the instance variables for an object, sets all the instance variables to zero values, and turns the memory into an instance of the class; at no point during the initialization is the memory an instance of the superclass.</p>
<p>The <i>init</i> message performs the set-up of the instance upon creation. The <i>init</i> method is often written as follows:</p>
<div class="mw-highlight mw-content-ltr" dir="ltr">
<pre>
<span class="p">-</span> <span class="p">(</span><span class="kt">id</span><span class="p">)</span><span class="nf">init</span> <span class="p">{</span>
    <span class="nb">self</span> <span class="o">=</span> <span class="p">[</span><span class="nb">super</span> <span class="n">init</span><span class="p">];</span>
    <span class="k">if</span> <span class="p">(</span><span class="nb">self</span><span class="p">)</span> <span class="p">{</span>
        <span class="c1">// perform initialization of object here</span>
    <span class="p">}</span>
    <span class="k">return</span> <span class="nb">self</span><span class="p">;</span>
<span class="p">}</span>
</pre></div>
<p>In the above example, notice the <code>id</code> return type. This type stands for "pointer to any object" in Objective-C (See the <a href="#Dynamic_typing">Dynamic typing</a> section).</p>
<p>The initializer pattern is used to assure that the object is properly initialized by its superclass before the init method performs its initialization. It performs the following actions:</p>
<ol>
<li>self = [super init]
<dl>
<dd>Sends the superclass instance an <i>init</i> message and assigns the result to <i>self</i> (pointer to the current object).</dd>
</dl>
</li>
<li>if (self)
<dl>
<dd>Checks if the returned object pointer is valid before performing any initialization.</dd>
</dl>
</li>
<li>return self
<dl>
<dd>Returns the value of self to the caller.</dd>
</dl>
</li>
</ol>
<p>A non-valid object pointer has the value <i>nil</i>; conditional statements like "if" treat nil like a null pointer, so the initialization code will not be executed if [super init] returned nil. If there is an error in initialization the init method should perform any necessary cleanup, including sending a "release" message to self, and return <i>nil</i> to indicate that initialization failed. Any checking for such errors must only be performed after having called the superclass initialization to ensure that destroying the object will be done correctly.</p>
<p>If a class has more than one initialization method, only one of them (the "designated initializer") needs to follow this pattern; others should call the designated initializer instead of the superclass initializer.</p>
<h3><span class="mw-headline" id="Protocols">Protocols</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/w/index.php?title=Objective-C&amp;action=edit&amp;section=10" title="Edit section: Protocols">edit</a><span class="mw-editsection-bracket">]</span></span></h3>
<p>In other programming languages, these are called "interfaces".</p>
<p>Objective-C was extended at <a href="/wiki/NeXT" title="NeXT">NeXT</a> to introduce the concept of <a href="/wiki/Multiple_inheritance" title="Multiple inheritance">multiple inheritance</a> of specification, but not implementation, through the introduction of <a href="/wiki/Protocol_(object-oriented_programming)" title="Protocol (object-oriented programming)">protocols</a>. This is a pattern achievable either as an abstract multiple inherited base class in <a href="/wiki/C%2B%2B" title="C++">C++</a>, or as an "interface" (as in Java and C#). Objective-C makes use of ad hoc protocols called <i>informal protocols</i> and compiler-enforced protocols called <i>formal protocols</i>.</p>
<p>An informal protocol is a list of methods that a class can opt to implement. It is specified in the documentation, since it has no presence in the language. Informal protocols are implemented as a <a href="/wiki/Objective-C#Categories" title="Objective-C">category</a> (see below) on NSObject and often include optional methods, which, if implemented, can change the behavior of a class. For example, a text field class might have a <a href="/wiki/Delegation_(programming)" class="mw-redirect" title="Delegation (programming)">delegate</a> that implements an informal protocol with an optional method for performing auto-completion of user-typed text. The text field discovers whether the delegate implements that method (via <a href="/wiki/Reflection_(computer_programming)" title="Reflection (computer programming)">reflection</a>) and, if so, calls the delegate's method to support the auto-complete feature.</p>
<p>A formal protocol is similar to an <a href="/wiki/Interface_(computer_science)" class="mw-redirect" title="Interface (computer science)">interface</a> in Java, C#, and <a href="/wiki/Ada_(programming_language)" title="Ada (programming language)">Ada 2005</a>. It is a list of methods that any class can declare itself to implement. Versions of Objective-C before 2.0 required that a class must implement all methods in a protocol it declares itself as adopting; the compiler will emit an error if the class does not implement every method from its declared protocols. Objective-C 2.0 added support for marking certain methods in a protocol optional, and the compiler will not enforce implementation of optional methods.</p>
<p>A class must be declared to implement that protocol to be said to conform to it. This is detectable at runtime. Formal protocols cannot provide any implementations; they simply assure callers that classes that conform to the protocol will provide implementations. In the NeXT/Apple library, protocols are frequently used by the Distributed Objects system to represent the abilities of an object executing on a remote system.</p>
<p>The syntax</p>
<div class="mw-highlight mw-content-ltr" dir="ltr">
<pre>
<span class="k">@protocol</span> <span class="bp">NSLocking</span>
<span class="p">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">lock</span><span class="p">;</span>
<span class="p">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">unlock</span><span class="p">;</span>
<span class="k">@end</span>
</pre></div>
<p>denotes that there is the abstract idea of locking. By stating in the class definition that the protocol is implemented,</p>
<div class="mw-highlight mw-content-ltr" dir="ltr">
<pre>
<span class="k">@interface</span> <span class="bp">NSLock</span> : <span class="bp">NSObject</span> <span class="o">&lt;</span><span class="bp">NSLocking</span><span class="o">&gt;</span>
<span class="c1">//...</span>
<span class="k">@end</span>
</pre></div>
<p>instances of NSLock claim that they will provide an implementation for the two instance methods.</p>
<h3><span class="mw-headline" id="Dynamic_typing">Dynamic typing</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/w/index.php?title=Objective-C&amp;action=edit&amp;section=11" title="Edit section: Dynamic typing">edit</a><span class="mw-editsection-bracket">]</span></span></h3>
<p>Objective-C, like Smalltalk, can use <a href="/wiki/Dynamic_typing" class="mw-redirect" title="Dynamic typing">dynamic typing</a>: an object can be sent a message that is not specified in its interface. This can allow for increased flexibility, as it allows an object to "capture" a message and send the message to a different object that can respond to the message appropriately, or likewise send the message on to another object. This behavior is known as <i>message forwarding</i> or <i>delegation</i> (see below). Alternatively, an error handler can be used in case the message cannot be forwarded. If an object does not forward a message, respond to it, or handle an error, then the system will generate a runtime exception.<sup id="cite_ref-20" class="reference"><a href="#cite_note-20">[20]</a></sup> If messages are sent to <i>nil</i> (the null object pointer), they will be silently ignored or raise a generic exception, depending on compiler options.</p>
<p>Static typing information may also optionally be added to variables. This information is then checked at compile time. In the following four statements, increasingly specific type information is provided. The statements are equivalent at runtime, but the extra information allows the compiler to warn the programmer if the passed argument does not match the type specified.</p>
<div class="mw-highlight mw-content-ltr" dir="ltr">
<pre>
<span class="p">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">setMyValue:</span><span class="p">(</span><span class="kt">id</span><span class="p">)</span><span class="nv">foo</span><span class="p">;</span>
</pre></div>
<p>In the above statement, <i>foo</i> may be of any class.</p>
<div class="mw-highlight mw-content-ltr" dir="ltr">
<pre>
<span class="p">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">setMyValue:</span><span class="p">(</span><span class="kt">id</span><span class="o">&lt;</span><span class="bp">NSCopying</span><span class="o">&gt;</span><span class="p">)</span><span class="nv">foo</span><span class="p">;</span>
</pre></div>
<p>In the above statement, <i>foo</i> may be an instance of any class that conforms to the <i><code>NSCopying</code></i> protocol.</p>
<div class="mw-highlight mw-content-ltr" dir="ltr">
<pre>
<span class="p">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">setMyValue:</span><span class="p">(</span><span class="bp">NSNumber</span> <span class="o">*</span><span class="p">)</span><span class="nv">foo</span><span class="p">;</span>
</pre></div>
<p>In the above statement, <i>foo</i> must be an instance of the <i>NSNumber</i> class.</p>
<div class="mw-highlight mw-content-ltr" dir="ltr">
<pre>
<span class="p">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">setMyValue:</span><span class="p">(</span><span class="bp">NSNumber</span><span class="o">&lt;</span><span class="bp">NSCopying</span><span class="o">&gt;</span> <span class="o">*</span><span class="p">)</span><span class="nv">foo</span><span class="p">;</span>
</pre></div>
<p>In the above statement, <i>foo</i> must be an instance of the <i>NSNumber</i> class, and it must conform to the <i><code>NSCopying</code></i> protocol.</p>
<h3><span class="mw-headline" id="Forwarding">Forwarding</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/w/index.php?title=Objective-C&amp;action=edit&amp;section=12" title="Edit section: Forwarding">edit</a><span class="mw-editsection-bracket">]</span></span></h3>
<p>Objective-C permits the sending of a message to an object that may not respond. Rather than responding or simply dropping the message, an object can forward the message to an object that can respond. Forwarding can be used to simplify implementation of certain <a href="/wiki/Design_pattern_(computer_science)" class="mw-redirect" title="Design pattern (computer science)">design patterns</a>, such as the <a href="/wiki/Observer_pattern" title="Observer pattern">observer pattern</a> or the <a href="/wiki/Proxy_pattern" title="Proxy pattern">proxy pattern</a>.</p>
<p>The Objective-C runtime specifies a pair of methods in <tt>Object</tt></p>
<ul>
<li>forwarding methods:
<div class="mw-highlight mw-content-ltr" dir="ltr">
<pre>
<span class="p">-</span> <span class="p">(</span><span class="n">retval_t</span><span class="p">)</span><span class="nf">forward:</span><span class="p">(</span><span class="kt">SEL</span><span class="p">)</span><span class="nv">sel</span> <span class="nf">args:</span><span class="p">(</span><span class="n">arglist_t</span><span class="p">)</span><span class="nv">args</span><span class="p">;</span> <span class="c1">// with GCC</span>
<span class="p">-</span> <span class="p">(</span><span class="kt">id</span><span class="p">)</span><span class="nf">forward:</span><span class="p">(</span><span class="kt">SEL</span><span class="p">)</span><span class="nv">sel</span> <span class="nf">args:</span><span class="p">(</span><span class="n">marg_list</span><span class="p">)</span><span class="nv">args</span><span class="p">;</span> <span class="c1">// with NeXT/Apple systems</span>
</pre></div>
</li>
<li>action methods:
<div class="mw-highlight mw-content-ltr" dir="ltr">
<pre>
<span class="p">-</span> <span class="p">(</span><span class="n">retval_t</span><span class="p">)</span><span class="nf">performv:</span><span class="p">(</span><span class="kt">SEL</span><span class="p">)</span><span class="nv">sel</span> <span class="nf">args:</span><span class="p">(</span><span class="n">arglist_t</span><span class="p">)</span><span class="nv">args</span><span class="p">;</span> <span class="c1">// with GCC</span>
<span class="p">-</span> <span class="p">(</span><span class="kt">id</span><span class="p">)</span><span class="nf">performv:</span><span class="p">(</span><span class="kt">SEL</span><span class="p">)</span><span class="nv">sel</span> <span class="nf">args:</span><span class="p">(</span><span class="n">marg_list</span><span class="p">)</span><span class="nv">args</span><span class="p">;</span> <span class="c1">// with NeXT/Apple systems</span>
</pre></div>
</li>
</ul>
<p>An object wishing to implement forwarding needs only to override the forwarding method with a new method to define the forwarding behavior. The action method <tt>performv::</tt> need not be overridden, as this method merely performs an action based on the selector and arguments. Notice the <code lang="objc">SEL</code> type, which is the type of messages in Objective-C.</p>
<p>Note: in OpenStep, Cocoa, and GNUstep, the commonly used frameworks of Objective-C, one does not use the <tt>Object</tt> class. The <tt>- (void)forwardInvocation:(NSInvocation *)anInvocation</tt> method of the <tt>NSObject</tt> class is used to do forwarding.</p>
<h4><span class="mw-headline" id="Example">Example</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/w/index.php?title=Objective-C&amp;action=edit&amp;section=13" title="Edit section: Example">edit</a><span class="mw-editsection-bracket">]</span></span></h4>
<p>Here is an example of a program that demonstrates the basics of forwarding.</p>
<dl>
<dt><i>Forwarder.h</i></dt>
</dl>
<div class="mw-highlight mw-content-ltr" dir="ltr">
<pre>
<span class="cp"># import &lt;objc/Object.h&gt;</span>

<span class="k">@interface</span> <span class="nc">Forwarder</span> : <span class="nc">Object</span> <span class="p">{</span>
 <span class="kt">id</span> <span class="n">recipient</span><span class="p">;</span> <span class="c1">//The object we want to forward the message to.</span>
<span class="p">}</span>

<span class="c1">//Accessor methods.</span>
<span class="p">-</span> <span class="p">(</span><span class="kt">id</span><span class="p">)</span><span class="nf">recipient</span><span class="p">;</span>
<span class="p">-</span> <span class="p">(</span><span class="kt">id</span><span class="p">)</span><span class="nf">setRecipient:</span><span class="p">(</span><span class="kt">id</span><span class="p">)</span><span class="nv">_recipient</span><span class="p">;</span>

<span class="k">@end</span>
</pre></div>
<dl>
<dt><i>Forwarder.m</i></dt>
</dl>
<div class="mw-highlight mw-content-ltr" dir="ltr">
<pre>
<span class="cp"># import "Forwarder.h"</span>

<span class="k">@implementation</span> <span class="nc">Forwarder</span>

<span class="p">-</span> <span class="p">(</span><span class="n">retval_t</span><span class="p">)</span><span class="nf">forward:</span><span class="p">(</span><span class="kt">SEL</span><span class="p">)</span><span class="nv">sel</span> <span class="nf">args:</span><span class="p">(</span><span class="n">arglist_t</span><span class="p">)</span> <span class="nv">args</span> <span class="p">{</span>
 <span class="cm">/*</span>
<span class="cm"> * Check whether the recipient actually responds to the message.</span>
<span class="cm"> * This may or may not be desirable, for example, if a recipient</span>
<span class="cm"> * in turn does not respond to the message, it might do forwarding</span>
<span class="cm"> * itself.</span>
<span class="cm"> */</span>
 <span class="k">if</span><span class="p">([</span><span class="n">recipient</span> <span class="nl">respondsToSelector</span><span class="p">:</span><span class="n">sel</span><span class="p">])</span> <span class="p">{</span>
  <span class="k">return</span> <span class="p">[</span><span class="n">recipient</span> <span class="nl">performv</span><span class="p">:</span><span class="n">sel</span> <span class="nl">args</span><span class="p">:</span><span class="n">args</span><span class="p">];</span>
 <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
  <span class="k">return</span> <span class="p">[</span><span class="nb">self</span> <span class="nl">error</span><span class="p">:</span><span class="s">"Recipient does not respond"</span><span class="p">];</span>
 <span class="p">}</span>
<span class="p">}</span>

<span class="p">-</span> <span class="p">(</span><span class="kt">id</span><span class="p">)</span><span class="nf">setRecipient:</span><span class="p">(</span><span class="kt">id</span><span class="p">)</span><span class="nv">_recipient</span> <span class="p">{</span>
 <span class="p">[</span><span class="n">recipient</span> <span class="n">autorelease</span><span class="p">];</span>
 <span class="n">recipient</span> <span class="o">=</span> <span class="p">[</span><span class="n">_recipient</span> <span class="k">retain</span><span class="p">];</span>
 <span class="k">return</span> <span class="nb">self</span><span class="p">;</span>
<span class="p">}</span>

<span class="p">-</span> <span class="p">(</span><span class="kt">id</span><span class="p">)</span> <span class="nf">recipient</span> <span class="p">{</span>
 <span class="k">return</span> <span class="n">recipient</span><span class="p">;</span>
<span class="p">}</span>
<span class="k">@end</span>
</pre></div>
<dl>
<dt><i>Recipient.h</i></dt>
</dl>
<div class="mw-highlight mw-content-ltr" dir="ltr">
<pre>
<span class="cp"># import &lt;objc/Object.h&gt;</span>

<span class="c1">// A simple Recipient object.</span>
<span class="k">@interface</span> <span class="nc">Recipient</span> : <span class="nc">Object</span>
<span class="p">-</span> <span class="p">(</span><span class="kt">id</span><span class="p">)</span><span class="nf">hello</span><span class="p">;</span>
<span class="k">@end</span>
</pre></div>
<dl>
<dt><i>Recipient.m</i></dt>
</dl>
<div class="mw-highlight mw-content-ltr" dir="ltr">
<pre>
<span class="cp"># import "Recipient.h"</span>

<span class="k">@implementation</span> <span class="nc">Recipient</span>

<span class="p">-</span> <span class="p">(</span><span class="kt">id</span><span class="p">)</span><span class="nf">hello</span> <span class="p">{</span>
 <span class="n">printf</span><span class="p">(</span><span class="s">"Recipient says hello!</span><span class="se">\n</span><span class="s">"</span><span class="p">);</span>

 <span class="k">return</span> <span class="nb">self</span><span class="p">;</span>
<span class="p">}</span>

<span class="k">@end</span>
</pre></div>
<dl>
<dt><i>main.m</i></dt>
</dl>
<div class="mw-highlight mw-content-ltr" dir="ltr">
<pre>
<span class="cp"># import "Forwarder.h"</span>
<span class="cp"># import "Recipient.h"</span>

<span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span> <span class="p">{</span>
 <span class="n">Forwarder</span> <span class="o">*</span><span class="n">forwarder</span> <span class="o">=</span> <span class="p">[</span><span class="n">Forwarder</span> <span class="n">new</span><span class="p">];</span>
 <span class="n">Recipient</span> <span class="o">*</span><span class="n">recipient</span> <span class="o">=</span> <span class="p">[</span><span class="n">Recipient</span> <span class="n">new</span><span class="p">];</span>

 <span class="p">[</span><span class="n">forwarder</span> <span class="nl">setRecipient</span><span class="p">:</span><span class="n">recipient</span><span class="p">];</span> <span class="c1">//Set the recipient.</span>
 <span class="cm">/*</span>
<span class="cm"> * Observe forwarder does not respond to a hello message! It will</span>
<span class="cm"> * be forwarded. All unrecognized methods will be forwarded to</span>
<span class="cm"> * the recipient</span>
<span class="cm"> * (if the recipient responds to them, as written in the Forwarder)</span>
<span class="cm"> */</span>
 <span class="p">[</span><span class="n">forwarder</span> <span class="n">hello</span><span class="p">];</span>

 <span class="p">[</span><span class="n">recipient</span> <span class="k">release</span><span class="p">];</span>
 <span class="p">[</span><span class="n">forwarder</span> <span class="k">release</span><span class="p">];</span>

 <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</pre></div>
<h4><span class="mw-headline" id="Notes">Notes</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/w/index.php?title=Objective-C&amp;action=edit&amp;section=14" title="Edit section: Notes">edit</a><span class="mw-editsection-bracket">]</span></span></h4>
<p>When compiled using <a href="/wiki/GNU_Compiler_Collection" title="GNU Compiler Collection">gcc</a>, the compiler reports:</p>
<pre>
$ gcc -x objective-c -Wno-import Forwarder.m Recipient.m main.m -lobjc
main.m: In function `main':
main.m:12: warning: `Forwarder' does not respond to `hello'
$
</pre>
<p>The compiler is reporting the point made earlier, that <tt>Forwarder</tt> does not respond to hello messages. In this circumstance, it is safe to ignore the warning since forwarding was implemented. Running the program produces this output:</p>
<pre>
$ ./a.out
Recipient says hello!
</pre>
<h3><span class="mw-headline" id="Categories">Categories</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/w/index.php?title=Objective-C&amp;action=edit&amp;section=15" title="Edit section: Categories">edit</a><span class="mw-editsection-bracket">]</span></span></h3>
<p>During the design of Objective-C, one of the main concerns was the maintainability of large code bases. Experience from the <a href="/wiki/Structured_programming" title="Structured programming">structured programming</a> world had shown that one of the main ways to improve code was to break it down into smaller pieces. Objective-C borrowed and extended the concept of <i>categories</i> from Smalltalk implementations to help with this process.<sup id="cite_ref-21" class="reference"><a href="#cite_note-21">[21]</a></sup></p>
<p>Furthermore, the methods within a category are added to a class at <a href="/wiki/Run_time_(program_lifecycle_phase)" title="Run time (program lifecycle phase)">run-time</a>. Thus, categories permit the programmer to add methods to an existing class without the need to recompile that class or even have access to its source code. For example, if a system does not contain a <a href="/wiki/Spell_checker" title="Spell checker">spell checker</a> in its String implementation, it could be added without modifying the String source code.</p>
<p>Methods within categories become indistinguishable from the methods in a class when the program is run. A category has full access to all of the instance variables within the class, including private variables.</p>
<p>If a category declares a method with the same <a href="/wiki/Method_signature" class="mw-redirect" title="Method signature">method signature</a> as an existing method in a class, the category's method is adopted. Thus categories can not only add methods to a class, but also replace existing methods. This feature can be used to fix bugs in other classes by rewriting their methods, or to cause a global change to a class's behavior within a program. If two categories have methods with the same name (not to be confused with method signature), it is undefined which category's method is adopted.</p>
<p>Other languages have attempted to add this feature in a variety of ways. <a href="/wiki/TOM_(object-oriented_programming_language)" title="TOM (object-oriented programming language)">TOM</a> took the Objective-C system a step further and allowed for the addition of variables also. Other languages have used <a href="/wiki/Prototype-based_programming" title="Prototype-based programming">prototype-based</a> solutions instead, the most notable being <a href="/wiki/Self_(programming_language)" title="Self (programming language)">Self</a>.</p>
<p>The C# and Visual Basic.NET languages implement superficially similar functionality in the form of <a href="/wiki/Extension_method" title="Extension method">extension methods</a>, but these lack access to the private variables of the class.<sup id="cite_ref-22" class="reference"><a href="#cite_note-22">[22]</a></sup> <a href="/wiki/Ruby_(programming_language)" title="Ruby (programming language)">Ruby</a> and several other dynamic programming languages refer to the technique as "<a href="/wiki/Monkey_patch" title="Monkey patch">monkey patching</a>".</p>
<p><a href="/wiki/Logtalk" title="Logtalk">Logtalk</a> implements a concept of categories (as first-class entities) that subsumes Objective-C categories functionality (Logtalk categories can also be used as fine-grained units of composition when defining e.g. new classes or prototypes; in particular, a Logtalk category can be virtually imported by any number of classes and prototypes).</p>
<h4><span class="mw-headline" id="Example_usage_of_categories">Example usage of categories</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/w/index.php?title=Objective-C&amp;action=edit&amp;section=16" title="Edit section: Example usage of categories">edit</a><span class="mw-editsection-bracket">]</span></span></h4>
<p>This example builds up an <tt>Integer</tt> class, by defining first a basic class with only <a href="/wiki/Method_(computer_science)" class="mw-redirect" title="Method (computer science)">accessor methods</a> implemented, and adding two categories, <tt>Arithmetic</tt> and <tt>Display</tt>, which extend the basic class. While categories can access the base class's private data members, it is often good practice to access these private data members through the accessor methods, which helps keep categories more independent from the base class. Implementing such accessors is one typical usage of categories. Another is to use categories to add methods to the base class. However, it is not regarded as good practice to use categories for subclass overriding, also known as <a href="/wiki/Monkey_patch" title="Monkey patch">monkey patching</a>. Informal protocols are implemented as a category on the base <tt>NSObject</tt> class. By convention, files containing categories that extend base classes will take the name <u>BaseClass+ExtensionClass.h</u>.</p>
<dl>
<dt><i>Integer.h</i></dt>
</dl>
<div class="mw-highlight mw-content-ltr" dir="ltr">
<pre>
<span class="cp"># import &lt;objc/Object.h&gt;</span>

<span class="k">@interface</span> <span class="nc">Integer</span> : <span class="nc">Object</span> <span class="p">{</span>
 <span class="kt">int</span> <span class="n">integer</span><span class="p">;</span>
<span class="p">}</span>

<span class="p">-</span> <span class="p">(</span><span class="kt">int</span><span class="p">)</span> <span class="nf">integer</span><span class="p">;</span>
<span class="p">-</span> <span class="p">(</span><span class="kt">id</span><span class="p">)</span> <span class="nf">integer:</span> <span class="p">(</span><span class="kt">int</span><span class="p">)</span> <span class="nv">_integer</span><span class="p">;</span>
<span class="k">@end</span>
</pre></div>
<dl>
<dt><i>Integer.m</i></dt>
</dl>
<div class="mw-highlight mw-content-ltr" dir="ltr">
<pre>
<span class="cp"># import "Integer.h"</span>

<span class="k">@implementation</span> <span class="nc">Integer</span>
<span class="p">-</span> <span class="p">(</span><span class="kt">int</span><span class="p">)</span> <span class="nf">integer</span> <span class="p">{</span>
 <span class="k">return</span> <span class="n">integer</span><span class="p">;</span>
<span class="p">}</span>

<span class="p">-</span> <span class="p">(</span><span class="kt">id</span><span class="p">)</span> <span class="nf">integer:</span> <span class="p">(</span><span class="kt">int</span><span class="p">)</span> <span class="nv">_integer</span> <span class="p">{</span>
 <span class="n">integer</span> <span class="o">=</span> <span class="n">_integer</span><span class="p">;</span>

 <span class="k">return</span> <span class="nb">self</span><span class="p">;</span>
<span class="p">}</span>
<span class="k">@end</span>
</pre></div>
<dl>
<dt><i>Integer+Arithmetic.h</i></dt>
</dl>
<div class="mw-highlight mw-content-ltr" dir="ltr">
<pre>
<span class="cp"># import "Integer.h"</span>

<span class="k">@interface</span> <span class="nc">Integer</span> <span class="nl">(Arithmetic)</span>
<span class="p">-</span> <span class="p">(</span><span class="kt">id</span><span class="p">)</span> <span class="nf">add:</span> <span class="p">(</span><span class="n">Integer</span> <span class="o">*</span><span class="p">)</span> <span class="nv">addend</span><span class="p">;</span>
<span class="p">-</span> <span class="p">(</span><span class="kt">id</span><span class="p">)</span> <span class="nf">sub:</span> <span class="p">(</span><span class="n">Integer</span> <span class="o">*</span><span class="p">)</span> <span class="nv">subtrahend</span><span class="p">;</span>
<span class="k">@end</span>
</pre></div>
<dl>
<dt><i>Integer+Arithmetic.m</i></dt>
</dl>
<div class="mw-highlight mw-content-ltr" dir="ltr">
<pre>
<span class="cp"># import "Integer+Arithmetic.h"</span>

<span class="k">@implementation</span> <span class="nc">Integer</span> <span class="nl">(Arithmetic)</span>
<span class="p">-</span> <span class="p">(</span><span class="kt">id</span><span class="p">)</span> <span class="nf">add:</span> <span class="p">(</span><span class="n">Integer</span> <span class="o">*</span><span class="p">)</span> <span class="nv">addend</span> <span class="p">{</span>
 <span class="k">return</span> <span class="p">[</span><span class="nb">self</span> <span class="nl">integer</span><span class="p">:</span> <span class="p">[</span><span class="nb">self</span> <span class="n">integer</span><span class="p">]</span> <span class="o">+</span> <span class="p">[</span><span class="n">addend</span> <span class="n">integer</span><span class="p">]];</span>
<span class="p">}</span>

<span class="p">-</span> <span class="p">(</span><span class="kt">id</span><span class="p">)</span> <span class="nf">sub:</span> <span class="p">(</span><span class="n">Integer</span> <span class="o">*</span><span class="p">)</span> <span class="nv">subtrahend</span> <span class="p">{</span>
 <span class="k">return</span> <span class="p">[</span><span class="nb">self</span> <span class="nl">integer</span><span class="p">:</span> <span class="p">[</span><span class="nb">self</span> <span class="n">integer</span><span class="p">]</span> <span class="o">-</span> <span class="p">[</span><span class="n">subtrahend</span> <span class="n">integer</span><span class="p">]];</span>
<span class="p">}</span>
<span class="k">@end</span>
</pre></div>
<dl>
<dt><i>Integer+Display.h</i></dt>
</dl>
<div class="mw-highlight mw-content-ltr" dir="ltr">
<pre>
<span class="cp"># import "Integer.h"</span>

<span class="k">@interface</span> <span class="nc">Integer</span> <span class="nl">(Display)</span>
<span class="p">-</span> <span class="p">(</span><span class="kt">id</span><span class="p">)</span> <span class="nf">showstars</span><span class="p">;</span>
<span class="p">-</span> <span class="p">(</span><span class="kt">id</span><span class="p">)</span> <span class="nf">showint</span><span class="p">;</span>
<span class="k">@end</span>
</pre></div>
<dl>
<dt><i>Integer+Display.m</i></dt>
</dl>
<div class="mw-highlight mw-content-ltr" dir="ltr">
<pre>
<span class="cp"># import "Integer+Display.h"</span>

<span class="k">@implementation</span> <span class="nc">Integer</span> <span class="nl">(Display)</span>
<span class="p">-</span> <span class="p">(</span><span class="kt">id</span><span class="p">)</span> <span class="nf">showstars</span> <span class="p">{</span>
 <span class="kt">int</span> <span class="n">i</span><span class="p">,</span> <span class="n">x</span> <span class="o">=</span> <span class="p">[</span><span class="nb">self</span> <span class="n">integer</span><span class="p">];</span>
 <span class="k">for</span> <span class="p">(</span><span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">x</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
 <span class="n">printf</span><span class="p">(</span><span class="s">"*"</span><span class="p">);</span>
 <span class="p">}</span>
 <span class="n">printf</span><span class="p">(</span><span class="s">"</span><span class="se">\n</span><span class="s">"</span><span class="p">);</span>

 <span class="k">return</span> <span class="nb">self</span><span class="p">;</span>
<span class="p">}</span>

<span class="p">-</span> <span class="p">(</span><span class="kt">id</span><span class="p">)</span> <span class="nf">showint</span> <span class="p">{</span>
 <span class="n">printf</span><span class="p">(</span><span class="s">"%d</span><span class="se">\n</span><span class="s">"</span><span class="p">,</span> <span class="p">[</span><span class="nb">self</span> <span class="n">integer</span><span class="p">]);</span>

 <span class="k">return</span> <span class="nb">self</span><span class="p">;</span>
<span class="p">}</span>
<span class="k">@end</span>
</pre></div>
<dl>
<dt><i>main.m</i></dt>
</dl>
<div class="mw-highlight mw-content-ltr" dir="ltr">
<pre>
<span class="cp"># import "Integer.h"</span>
<span class="cp"># import "Integer+Arithmetic.h"</span>
<span class="cp"># import "Integer+Display.h"</span>

<span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span> <span class="p">{</span>
 <span class="n">Integer</span> <span class="o">*</span><span class="n">num1</span> <span class="o">=</span> <span class="p">[</span><span class="n">Integer</span> <span class="n">new</span><span class="p">],</span> <span class="o">*</span><span class="n">num2</span> <span class="o">=</span> <span class="p">[</span><span class="n">Integer</span> <span class="n">new</span><span class="p">];</span>
 <span class="kt">int</span> <span class="n">x</span><span class="p">;</span>

 <span class="n">printf</span><span class="p">(</span><span class="s">"Enter an integer: "</span><span class="p">);</span>
 <span class="n">scanf</span><span class="p">(</span><span class="s">"%d"</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">x</span><span class="p">);</span>

 <span class="p">[</span><span class="n">num1</span> <span class="nl">integer</span><span class="p">:</span><span class="n">x</span><span class="p">];</span>
 <span class="p">[</span><span class="n">num1</span> <span class="n">showstars</span><span class="p">];</span>

 <span class="n">printf</span><span class="p">(</span><span class="s">"Enter an integer: "</span><span class="p">);</span>
 <span class="n">scanf</span><span class="p">(</span><span class="s">"%d"</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">x</span><span class="p">);</span>

 <span class="p">[</span><span class="n">num2</span> <span class="nl">integer</span><span class="p">:</span><span class="n">x</span><span class="p">];</span>
 <span class="p">[</span><span class="n">num2</span> <span class="n">showstars</span><span class="p">];</span>

 <span class="p">[</span><span class="n">num1</span> <span class="nl">add</span><span class="p">:</span><span class="n">num2</span><span class="p">];</span>
 <span class="p">[</span><span class="n">num1</span> <span class="n">showint</span><span class="p">];</span>

 <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</pre></div>
<h4><span class="mw-headline" id="Notes_2">Notes</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/w/index.php?title=Objective-C&amp;action=edit&amp;section=17" title="Edit section: Notes">edit</a><span class="mw-editsection-bracket">]</span></span></h4>
<p>Compilation is performed, for example, by:</p>
<pre>
gcc -x objective-c main.m Integer.m Integer+Arithmetic.m Integer+Display.m -lobjc
</pre>
<p>One can experiment by leaving out the <tt>#import "Integer+Arithmetic.h"</tt> and <tt>[num1 add:num2]</tt> lines and omitting <tt>Integer+Arithmetic.m</tt> in compilation. The program will still run. This means that it is possible to <i>mix-and-match</i> added categories if needed; if a category does not need to have some ability, it can simply not be compile in.</p>
<h3><span class="mw-headline" id="Posing">Posing</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/w/index.php?title=Objective-C&amp;action=edit&amp;section=18" title="Edit section: Posing">edit</a><span class="mw-editsection-bracket">]</span></span></h3>
<p>Objective-C permits a class to wholly replace another class within a program. The replacing class is said to "pose as" the target class.</p>
<p>Class posing was declared deprecated with <a href="/wiki/Mac_OS_X_v10.5" class="mw-redirect" title="Mac OS X v10.5">Mac OS X v10.5</a>, and is unavailable in the 64-bit runtime. Similar functionality can be achieved by using method swizzling in categories, that swaps one method's implementation with another's that have the same signature.</p>
<p>For the versions still supporting posing, all messages sent to the target class are instead received by the posing class. There are several restrictions:</p>
<ul>
<li>A class may only pose as one of its direct or indirect superclasses.</li>
<li>The posing class must not define any new instance variables that are absent from the target class (though it may define or override methods).</li>
<li>The target class may not have received any messages prior to the posing.</li>
</ul>
<p>Posing, similarly with categories, allows global augmentation of existing classes. Posing permits two features absent from categories:</p>
<ul>
<li>A posing class can call overridden methods through super, thus incorporating the implementation of the target class.</li>
<li>A posing class can override methods defined in categories.</li>
</ul>
<p>For example,</p>
<div class="mw-highlight mw-content-ltr" dir="ltr">
<pre>
<span class="k">@interface</span> <span class="nc">CustomNSApplication</span> : <span class="nc">NSApplication</span>
<span class="k">@end</span>

<span class="k">@implementation</span> <span class="nc">CustomNSApplication</span>
<span class="p">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span> <span class="nf">setMainMenu:</span> <span class="p">(</span><span class="n">NSMenu</span><span class="o">*</span><span class="p">)</span> <span class="nv">menu</span> <span class="p">{</span>
 <span class="c1">// do something with menu</span>
<span class="p">}</span>
<span class="k">@end</span>

<span class="n">class_poseAs</span> <span class="p">([</span><span class="n">CustomNSApplication</span> <span class="k">class</span><span class="p">],</span> <span class="p">[</span><span class="n">NSApplication</span> <span class="k">class</span><span class="p">]);</span>
</pre></div>
<p>This intercepts every invocation of setMainMenu to NSApplication.</p>
<h3><span class="mw-headline" id=".23import">#import</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/w/index.php?title=Objective-C&amp;action=edit&amp;section=19" title="Edit section: #import">edit</a><span class="mw-editsection-bracket">]</span></span></h3>
<p>In the C language, the <code>#include</code> pre-compile directive always causes a file's contents to be inserted into the source at that point. Objective-C has the <code>#import</code> directive, equivalent except that each file is included only once per compilation unit, obviating the need for <a href="/wiki/Include_guard" title="Include guard">include guards</a>.</p>
<h2><span class="mw-headline" id="Other_features">Other features</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/w/index.php?title=Objective-C&amp;action=edit&amp;section=20" title="Edit section: Other features">edit</a><span class="mw-editsection-bracket">]</span></span></h2>
<p>Objective-C's features often allow for flexible, and often easy, solutions to programming issues.</p>
<ul>
<li>Delegating methods to other objects and <a href="/wiki/Remote_procedure_call" title="Remote procedure call">remote invocation</a> can be easily implemented using categories and message forwarding.</li>
<li><a href="/wiki/Pointer_swizzling" title="Pointer swizzling">Swizzling</a> of the <var>isa</var> pointer allows for classes to change at runtime. Typically used for <a href="/wiki/Debugging" title="Debugging">debugging</a> where freed objects are swizzled into zombie objects whose only purpose is to report an error when someone calls them. Swizzling was also used in <a href="/wiki/Enterprise_Objects_Framework" title="Enterprise Objects Framework">Enterprise Objects Framework</a> to create database faults<sup class="noprint Inline-Template Template-Fact" style="white-space:nowrap;">[<i><a href="/wiki/Wikipedia:Citation_needed" title="Wikipedia:Citation needed"><span title="This claim needs references to reliable sources. (August 2015)">citation needed</span></a></i>]</sup>. Swizzling is used today by Apple's Foundation Framework to implement <a href="/w/index.php?title=Key-Value_Observing&amp;action=edit&amp;redlink=1" class="new" title="Key-Value Observing (page does not exist)">Key-Value Observing</a>.</li>
</ul>
<h2><span class="mw-headline" id="Language_variants">Language variants</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/w/index.php?title=Objective-C&amp;action=edit&amp;section=21" title="Edit section: Language variants">edit</a><span class="mw-editsection-bracket">]</span></span></h2>
<h3><span class="mw-headline" id="Objective-C.2B.2B">Objective-C++</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/w/index.php?title=Objective-C&amp;action=edit&amp;section=22" title="Edit section: Objective-C++">edit</a><span class="mw-editsection-bracket">]</span></span></h3>
<p>Objective-C++ is a language variant accepted by the front-end to the <a href="/wiki/GNU_Compiler_Collection" title="GNU Compiler Collection">GNU Compiler Collection</a> and <a href="/wiki/Clang" title="Clang">Clang</a>, which can compile source files that use a combination of C++ and Objective-C syntax. Objective-C++ adds to C++ the extensions that Objective-C adds to C. As nothing is done to unify the semantics behind the various language features, certain restrictions apply:</p>
<ul>
<li>A C++ class cannot derive from an Objective-C class and vice versa.</li>
<li>C++ namespaces cannot be declared inside an Objective-C declaration.</li>
<li>Objective-C declarations may appear only in global scope, not inside a C++ namespace</li>
<li>Objective-C classes cannot have instance variables of C++ classes that lack a default constructor or that have one or more virtual methods,<sup class="noprint Inline-Template Template-Fact" style="white-space:nowrap;">[<i><a href="/wiki/Wikipedia:Citation_needed" title="Wikipedia:Citation needed"><span title="This claim needs references to reliable sources. (November 2013)">citation needed</span></a></i>]</sup> but pointers to C++ objects can be used as instance variables without restriction (allocate them with new in the -init method).</li>
<li>C++ "by value" semantics cannot be applied to Objective-C objects, which are only accessible through pointers.</li>
<li>An Objective-C declaration cannot be within a C++ template declaration and vice versa. However, Objective-C types, (e.g., Classname *) can be used as C++ template parameters.</li>
<li>Objective-C and C++ exception handling is distinct; the handlers of each cannot handle exceptions of the other type. This is mitigated in recent runtimes as Objective-C exceptions are either replaced by C++ exceptions completely (Apple runtime), or partly when Objective-C++ library is linked (GNUstep libobjc2).</li>
<li>Care must be taken since the destructor calling conventions of Objective-C and C++'s exception run-time models do not match (i.e., a C++ destructor will not be called when an Objective-C exception exits the C++ object's scope). The new 64-bit runtime resolves this by introducing interoperability with C++ exceptions in this sense.<sup id="cite_ref-23" class="reference"><a href="#cite_note-23">[23]</a></sup></li>
<li>Objective-C blocks and C++11 lambdas are distinct entities. However, a block is transparently generated on Mac OS X when passing a lambda where a block is expected.<sup id="cite_ref-24" class="reference"><a href="#cite_note-24">[24]</a></sup></li>
</ul>
<h3><span class="mw-headline" id="Objective-C_2.0">Objective-C 2.0</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/w/index.php?title=Objective-C&amp;action=edit&amp;section=23" title="Edit section: Objective-C 2.0">edit</a><span class="mw-editsection-bracket">]</span></span></h3>
<p>At the 2006 <a href="/wiki/Worldwide_Developers_Conference" class="mw-redirect" title="Worldwide Developers Conference">Worldwide Developers Conference</a>, Apple announced the release of "Objective-C 2.0," a revision of the Objective-C language to include "modern garbage collection, syntax enhancements,<sup id="cite_ref-25" class="reference"><a href="#cite_note-25">[25]</a></sup> runtime performance improvements,<sup id="cite_ref-26" class="reference"><a href="#cite_note-26">[26]</a></sup> and 64-bit support". <a href="/wiki/Mac_OS_X_v10.5" class="mw-redirect" title="Mac OS X v10.5">Mac OS X v10.5</a>, released in October 2007, included an Objective-C 2.0 compiler. <a href="/wiki/GNU_Compiler_Collection" title="GNU Compiler Collection">GCC 4.6</a> supports many new Objective-C features, such as declared and synthesized properties, dot syntax, fast enumeration, optional protocol methods, method/protocol/class attributes, class extensions and a new GNU Objective-C runtime API.<sup id="cite_ref-27" class="reference"><a href="#cite_note-27">[27]</a></sup></p>
<h4><span class="mw-headline" id="Garbage_collection">Garbage collection</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/w/index.php?title=Objective-C&amp;action=edit&amp;section=24" title="Edit section: Garbage collection">edit</a><span class="mw-editsection-bracket">]</span></span></h4>
<p>Objective-C 2.0 provided an optional conservative, generational <a href="/wiki/Garbage_collection_(computer_science)" title="Garbage collection (computer science)">garbage collector</a>. When run in <a href="/wiki/Backwards-compatible" class="mw-redirect" title="Backwards-compatible">backwards-compatible</a> mode, the runtime turned <a href="/wiki/Reference_counting" title="Reference counting">reference counting</a> operations such as "retain" and "release" into <a href="/wiki/No-op" class="mw-redirect" title="No-op">no-ops</a>. All objects were subject to garbage collection when garbage collection was enabled. Regular C pointers could be qualified with "__strong" to also trigger the underlying write-barrier compiler intercepts and thus participate in garbage collection.<sup id="cite_ref-28" class="reference"><a href="#cite_note-28">[28]</a></sup> A zero-ing weak subsystem was also provided such that pointers marked as "__weak" are set to zero when the object (or more simply, GC memory) is collected. The garbage collector does not exist on the iOS implementation of Objective-C 2.0.<sup id="cite_ref-29" class="reference"><a href="#cite_note-29">[29]</a></sup> Garbage collection in Objective-C runs on a low-priority background thread, and can halt on user events, with the intention of keeping the user experience responsive.<sup id="cite_ref-30" class="reference"><a href="#cite_note-30">[30]</a></sup></p>
<p>Garbage collection was deprecated in OS X v10.8 in favor of <a href="/wiki/Automatic_Reference_Counting" title="Automatic Reference Counting">Automatic Reference Counting</a> (ARC).<sup id="cite_ref-31" class="reference"><a href="#cite_note-31">[31]</a></sup> Objective-C on <a href="/wiki/IOS_7" title="IOS 7">iOS 7</a> running on <a href="/wiki/ARM64" class="mw-redirect" title="ARM64">ARM64</a> uses 19 bits out of a 64-bit word to store the reference count, as a form of <a href="/wiki/Tagged_pointer" title="Tagged pointer">tagged pointers</a>.<sup id="cite_ref-32" class="reference"><a href="#cite_note-32">[32]</a></sup><sup id="cite_ref-33" class="reference"><a href="#cite_note-33">[33]</a></sup></p>
<h4><span class="mw-headline" id="Properties">Properties</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/w/index.php?title=Objective-C&amp;action=edit&amp;section=25" title="Edit section: Properties">edit</a><span class="mw-editsection-bracket">]</span></span></h4>
<p>Objective-C 2.0 introduces a new syntax to declare instance variables as <a href="/wiki/Property_(programming)" title="Property (programming)">properties</a>, with optional attributes to configure the generation of accessor methods. Properties are, in a sense, public instance variables; that is, declaring an instance variable as a property provides external classes with access (possibly limited, e.g. read only) to that property. A property may be declared as "readonly", and may be provided with storage semantics such as <code>assign</code>, <code>copy</code> or <code>retain</code>. By default, properties are considered <code>atomic</code>, which results in a lock preventing multiple threads from accessing them at the same time. A property can be declared as <code>nonatomic</code>, which removes this lock.</p>
<div class="mw-highlight mw-content-ltr" dir="ltr">
<pre>
<span class="k">@interface</span> <span class="nc">Person</span> : <span class="bp">NSObject</span> <span class="p">{</span>
 <span class="k">@public</span>
 <span class="bp">NSString</span> <span class="o">*</span><span class="n">name</span><span class="p">;</span>
 <span class="k">@private</span>
 <span class="kt">int</span> <span class="n">age</span><span class="p">;</span>
<span class="p">}</span>

<span class="k">@property</span><span class="p">(</span><span class="k">copy</span><span class="p">)</span> <span class="bp">NSString</span> <span class="o">*</span><span class="n">name</span><span class="p">;</span>
<span class="k">@property</span><span class="p">(</span><span class="k">readonly</span><span class="p">)</span> <span class="kt">int</span> <span class="n">age</span><span class="p">;</span>

<span class="p">-(</span><span class="kt">id</span><span class="p">)</span><span class="nf">initWithAge:</span><span class="p">(</span><span class="kt">int</span><span class="p">)</span><span class="nv">age</span><span class="p">;</span>
<span class="k">@end</span>
</pre></div>
<p>Properties are implemented by way of the <code>@synthesize</code> keyword, which generates getter (and setter, if not read-only) methods according to the property declaration. Alternatively, the getter and setter methods must be implemented explicitly, or the <code>@dynamic</code> keyword can be used to indicate that accessor methods will be provided by other means. When compiled using clang 3.1 or higher, all properties which are not explicitly declared with <code>@dynamic</code>, marked <code>readonly</code> or have complete user-implemented getter and setter will be automatically implicitly <code>@synthesize</code>'d.</p>
<div class="mw-highlight mw-content-ltr" dir="ltr">
<pre>
<span class="k">@implementation</span> <span class="nc">Person</span>
<span class="k">@synthesize</span> <span class="n">name</span><span class="p">;</span>

<span class="p">-(</span><span class="kt">id</span><span class="p">)</span><span class="nf">initWithAge:</span><span class="p">(</span><span class="kt">int</span><span class="p">)</span><span class="nv">initAge</span> <span class="p">{</span>
 <span class="nb">self</span> <span class="o">=</span> <span class="p">[</span><span class="nb">super</span> <span class="n">init</span><span class="p">];</span>
 <span class="k">if</span> <span class="p">(</span><span class="nb">self</span><span class="p">)</span> <span class="p">{</span>
 <span class="n">age</span> <span class="o">=</span> <span class="n">initAge</span><span class="p">;</span> <span class="c1">// NOTE: direct instance variable assignment, not property setter</span>
 <span class="p">}</span>
 <span class="k">return</span> <span class="nb">self</span><span class="p">;</span>
<span class="p">}</span>

<span class="p">-(</span><span class="kt">int</span><span class="p">)</span><span class="nf">age</span> <span class="p">{</span>
 <span class="k">return</span> <span class="n">age</span><span class="p">;</span>
<span class="p">}</span>
<span class="k">@end</span>
</pre></div>
<p>Properties can be accessed using the traditional message passing syntax, dot notation, or, in Key-Value Coding, by name via the "valueForKey:"/"setValue:forKey:" methods.</p>
<div class="mw-highlight mw-content-ltr" dir="ltr">
<pre>
<span class="n">Person</span> <span class="o">*</span><span class="n">aPerson</span> <span class="o">=</span> <span class="p">[[</span><span class="n">Person</span> <span class="n">alloc</span><span class="p">]</span> <span class="nl">initWithAge</span><span class="p">:</span> <span class="mi">53</span><span class="p">];</span>
<span class="n">aPerson</span><span class="p">.</span><span class="n">name</span> <span class="o">=</span> <span class="s">@"Steve"</span><span class="p">;</span> <span class="c1">// NOTE: dot notation, uses synthesized setter,</span>
 <span class="c1">// equivalent to [aPerson setName: @"Steve"];</span>
<span class="n">NSLog</span><span class="p">(</span><span class="s">@"Access by message (%@), dot notation(%@),</span>
<span class="n">property</span> <span class="nf">name</span><span class="p">(</span><span class="o">%</span><span class="p">@)</span> <span class="n">and</span> <span class="n">direct</span> <span class="n">instance</span> <span class="n">variable</span> <span class="n">access</span> <span class="p">(</span><span class="o">%</span><span class="p">@)</span><span class="s">",</span>
 <span class="p">[</span><span class="n">aPerson</span> <span class="n">name</span><span class="p">],</span> <span class="n">aPerson</span><span class="p">.</span><span class="n">name</span><span class="p">,</span> <span class="p">[</span><span class="n">aPerson</span> <span class="nl">valueForKey</span><span class="p">:</span><span class="s">@"name"</span><span class="p">],</span> <span class="n">aPerson</span><span class="o">-&gt;</span><span class="n">name</span><span class="p">);</span>
</pre></div>
<p>In order to use dot notation to invoke property accessors within an instance method, the "self" keyword should be used:</p>
<div class="mw-highlight mw-content-ltr" dir="ltr">
<pre>
<span class="p">-(</span><span class="kt">void</span><span class="p">)</span> <span class="nf">introduceMyselfWithProperties:</span><span class="p">(</span><span class="kt">BOOL</span><span class="p">)</span><span class="nv">useGetter</span> <span class="p">{</span>
 <span class="n">NSLog</span><span class="p">(</span><span class="s">@"Hi, my name is %@."</span><span class="p">,</span> <span class="p">(</span><span class="n">useGetter</span> <span class="o">?</span> <span class="nb">self</span><span class="p">.</span><span class="nl">name</span> <span class="p">:</span> <span class="n">name</span><span class="p">));</span>
<span class="c1">// NOTE: getter vs. ivar access</span>
<span class="p">}</span>
</pre></div>
<p>A class or protocol's properties may be dynamically <a href="/wiki/Type_introspection" title="Type introspection">introspected</a>.</p>
<div class="mw-highlight mw-content-ltr" dir="ltr">
<pre>
<span class="kt">int</span> <span class="n">i</span><span class="p">;</span>
<span class="kt">int</span> <span class="n">propertyCount</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
<span class="n">objc_property_t</span> <span class="o">*</span><span class="n">propertyList</span> <span class="o">=</span> <span class="n">class_copyPropertyList</span><span class="p">([</span><span class="n">aPerson</span> <span class="k">class</span><span class="p">],</span> <span class="o">&amp;</span><span class="n">propertyCount</span><span class="p">);</span>

<span class="k">for</span> <span class="p">(</span><span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">propertyCount</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
 <span class="n">objc_property_t</span> <span class="o">*</span><span class="n">thisProperty</span> <span class="o">=</span> <span class="n">propertyList</span> <span class="o">+</span> <span class="n">i</span><span class="p">;</span>
 <span class="k">const</span> <span class="kt">char</span><span class="o">*</span> <span class="n">propertyName</span> <span class="o">=</span> <span class="n">property_getName</span><span class="p">(</span><span class="o">*</span><span class="n">thisProperty</span><span class="p">);</span>
 <span class="n">NSLog</span><span class="p">(</span><span class="s">@"Person has a property: '%s'"</span><span class="p">,</span> <span class="n">propertyName</span><span class="p">);</span>
<span class="p">}</span>
</pre></div>
<h4><span class="mw-headline" id="Non-fragile_instance_variables">Non-fragile instance variables</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/w/index.php?title=Objective-C&amp;action=edit&amp;section=26" title="Edit section: Non-fragile instance variables">edit</a><span class="mw-editsection-bracket">]</span></span></h4>
<p>Objective-C 2.0 provides non-fragile instance variables where supported by the runtime (i.e. when building code for 64-bit Mac OS X, and all iOS). Under the modern runtime, an extra layer of indirection is added to instance variable access, allowing the dynamic linker to adjust instance layout at runtime. This feature allows for two important improvements to Objective-C code:</p>
<ul>
<li>It eliminates the <a href="/wiki/Fragile_binary_interface_problem" title="Fragile binary interface problem">fragile binary interface problem</a>; superclasses can change sizes without affecting binary compatibility.</li>
<li>It allows instance variables that provide the backing for properties to be synthesized at runtime without them being declared in the class's interface.</li>
</ul>
<h4><span class="mw-headline" id="Fast_enumeration">Fast enumeration</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/w/index.php?title=Objective-C&amp;action=edit&amp;section=27" title="Edit section: Fast enumeration">edit</a><span class="mw-editsection-bracket">]</span></span></h4>
<p>Instead of using an NSEnumerator object or indices to iterate through a collection, Objective-C 2.0 offers the fast enumeration syntax. In Objective-C 2.0, the following loops are functionally equivalent, but have different performance traits.</p>
<div class="mw-highlight mw-content-ltr" dir="ltr">
<pre>
<span class="c1">// Using NSEnumerator</span>
<span class="bp">NSEnumerator</span> <span class="o">*</span><span class="n">enumerator</span> <span class="o">=</span> <span class="p">[</span><span class="n">thePeople</span> <span class="n">objectEnumerator</span><span class="p">];</span>
<span class="n">Person</span> <span class="o">*</span><span class="n">p</span><span class="p">;</span>

<span class="k">while</span> <span class="p">((</span><span class="n">p</span> <span class="o">=</span> <span class="p">[</span><span class="n">enumerator</span> <span class="n">nextObject</span><span class="p">])</span> <span class="o">!=</span> <span class="nb">nil</span><span class="p">)</span> <span class="p">{</span>
 <span class="n">NSLog</span><span class="p">(</span><span class="s">@"%@ is %i years old."</span><span class="p">,</span> <span class="p">[</span><span class="n">p</span> <span class="n">name</span><span class="p">],</span> <span class="p">[</span><span class="n">p</span> <span class="n">age</span><span class="p">]);</span>
<span class="p">}</span>
</pre></div>
<div class="mw-highlight mw-content-ltr" dir="ltr">
<pre>
<span class="c1">// Using indexes</span>
<span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="p">[</span><span class="n">thePeople</span> <span class="n">count</span><span class="p">];</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
 <span class="n">Person</span> <span class="o">*</span><span class="n">p</span> <span class="o">=</span> <span class="p">[</span><span class="n">thePeople</span> <span class="nl">objectAtIndex</span><span class="p">:</span><span class="n">i</span><span class="p">];</span>
 <span class="n">NSLog</span><span class="p">(</span><span class="s">@"%@ is %i years old."</span><span class="p">,</span> <span class="p">[</span><span class="n">p</span> <span class="n">name</span><span class="p">],</span> <span class="p">[</span><span class="n">p</span> <span class="n">age</span><span class="p">]);</span>
<span class="p">}</span>
</pre></div>
<div class="mw-highlight mw-content-ltr" dir="ltr">
<pre>
<span class="c1">// Using fast enumeration</span>
<span class="k">for</span> <span class="p">(</span><span class="n">Person</span> <span class="o">*</span><span class="n">p</span> <span class="k">in</span> <span class="n">thePeople</span><span class="p">)</span> <span class="p">{</span>
 <span class="n">NSLog</span><span class="p">(</span><span class="s">@"%@ is %i years old."</span><span class="p">,</span> <span class="p">[</span><span class="n">p</span> <span class="n">name</span><span class="p">],</span> <span class="p">[</span><span class="n">p</span> <span class="n">age</span><span class="p">]);</span>
<span class="p">}</span>
</pre></div>
<p>Fast enumeration generates more efficient code than standard enumeration because method calls to enumerate over objects are replaced by pointer arithmetic using the NSFastEnumeration protocol.<sup id="cite_ref-34" class="reference"><a href="#cite_note-34">[34]</a></sup></p>
<h4><span class="mw-headline" id="Class_extensions">Class extensions</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/w/index.php?title=Objective-C&amp;action=edit&amp;section=28" title="Edit section: Class extensions">edit</a><span class="mw-editsection-bracket">]</span></span></h4>
<p>A class extension has the same syntax as a category declaration with no category name, and the methods and properties declared in it are added directly to the main class. It is mostly used as an alternative to a category to add methods to a class without advertising them in the public headers, with the advantage that for class extensions the compiler checks that all the privately declared methods are actually implemented.<sup id="cite_ref-35" class="reference"><a href="#cite_note-35">[35]</a></sup></p>
<h4><span class="mw-headline" id="Implications_for_Cocoa_development">Implications for Cocoa development</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/w/index.php?title=Objective-C&amp;action=edit&amp;section=29" title="Edit section: Implications for Cocoa development">edit</a><span class="mw-editsection-bracket">]</span></span></h4>
<table class="plainlinks metadata ambox ambox-content ambox-Unreferenced" role="presentation">
<tr>
<td class="mbox-image">
<div style="width:52px"><a href="/wiki/File:Question_book-new.svg" class="image"><img alt="" src="//upload.wikimedia.org/wikipedia/en/thumb/9/99/Question_book-new.svg/50px-Question_book-new.svg.png" width="50" height="39" srcset="//upload.wikimedia.org/wikipedia/en/thumb/9/99/Question_book-new.svg/75px-Question_book-new.svg.png 1.5x, //upload.wikimedia.org/wikipedia/en/thumb/9/99/Question_book-new.svg/100px-Question_book-new.svg.png 2x" data-file-width="512" data-file-height="399" /></a></div>
</td>
<td class="mbox-text"><span class="mbox-text-span">This section <b>does not <a href="/wiki/Wikipedia:Citing_sources" title="Wikipedia:Citing sources">cite</a> any <a href="/wiki/Wikipedia:Verifiability" title="Wikipedia:Verifiability">sources</a></b>. <span class="hide-when-compact">Please help <a class="external text" href="//en.wikipedia.org/w/index.php?title=Objective-C&amp;action=edit">improve this section</a> by <a href="/wiki/Help:Introduction_to_referencing_with_Wiki_Markup/1" title="Help:Introduction to referencing with Wiki Markup/1">adding citations to reliable sources</a>. Unsourced material may be challenged and <a href="/wiki/Wikipedia:Verifiability#Burden_of_evidence" title="Wikipedia:Verifiability">removed</a>.</span> <small><i>(November 2012)</i></small> <small class="hide-when-compact"><i>(<a href="/wiki/Help:Maintenance_template_removal" title="Help:Maintenance template removal">Learn how and when to remove this template message</a>)</i></small></span></td>
</tr>
</table>
<p>All Objective-C applications developed for Mac OS X that make use of the above improvements for Objective-C 2.0 are incompatible with all operating systems prior to 10.5 (Leopard). Since fast enumeration does not generate exactly the same binaries as standard enumeration, its use will cause an application to crash on OS X version 10.4 or earlier.</p>
<h3><span class="mw-headline" id="Blocks">Blocks</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/w/index.php?title=Objective-C&amp;action=edit&amp;section=30" title="Edit section: Blocks">edit</a><span class="mw-editsection-bracket">]</span></span></h3>
<div role="note" class="hatnote">Main article: <a href="/wiki/Blocks_(C_language_extension)" title="Blocks (C language extension)">Blocks (C language extension)</a></div>
<p>Blocks is a nonstandard extension for Objective-C (and <a href="/wiki/C_(programming_language)" title="C (programming language)">C</a> and <a href="/wiki/C%2B%2B" title="C++">C++</a>) that uses special syntax to create <a href="/wiki/Closure_(programming)" class="mw-redirect" title="Closure (programming)">closures</a>. Blocks are only supported in <a href="/wiki/Mac_OS_X_Snow_Leopard" title="Mac OS X Snow Leopard">Mac OS X 10.6 "Snow Leopard"</a> or later, <a href="/wiki/IOS_4" title="IOS 4">iOS 4</a> or later, and GNUstep with libobjc2 1.7 and compiling with <a href="/wiki/Clang" title="Clang">clang</a> 3.1 or later.<sup id="cite_ref-Blocks_requirements_36-0" class="reference"><a href="#cite_note-Blocks_requirements-36">[36]</a></sup></p>
<div class="mw-highlight mw-content-ltr" dir="ltr">
<pre>
<span class="cp">#include</span> <span class="cpf">&lt;stdio.h&gt;</span>
<span class="cp">#include</span> <span class="cpf">&lt;Block.h&gt;</span>
<span class="k">typedef</span> <span class="nf">int</span> <span class="p">(</span><span class="o">^</span><span class="n">IntBlock</span><span class="p">)();</span>

<span class="n">IntBlock</span> <span class="nf">MakeCounter</span><span class="p">(</span><span class="kt">int</span> <span class="n">start</span><span class="p">,</span> <span class="kt">int</span> <span class="n">increment</span><span class="p">)</span> <span class="p">{</span>
	<span class="k">__block</span> <span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="n">start</span><span class="p">;</span>
	
	<span class="k">return</span> <span class="n">Block_copy</span><span class="p">(</span> <span class="o">^</span> <span class="p">{</span>
		<span class="kt">int</span> <span class="n">ret</span> <span class="o">=</span> <span class="n">i</span><span class="p">;</span>
		<span class="n">i</span> <span class="o">+=</span> <span class="n">increment</span><span class="p">;</span>
		<span class="k">return</span> <span class="n">ret</span><span class="p">;</span>
	<span class="p">});</span>
	
<span class="p">}</span>

<span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span> <span class="p">{</span>
	<span class="n">IntBlock</span> <span class="n">mycounter</span> <span class="o">=</span> <span class="n">MakeCounter</span><span class="p">(</span><span class="mi">5</span><span class="p">,</span> <span class="mi">2</span><span class="p">);</span>
	<span class="n">printf</span><span class="p">(</span><span class="s">"First call: %d</span><span class="se">\n</span><span class="s">"</span><span class="p">,</span> <span class="n">mycounter</span><span class="p">());</span>
	<span class="n">printf</span><span class="p">(</span><span class="s">"Second call: %d</span><span class="se">\n</span><span class="s">"</span><span class="p">,</span> <span class="n">mycounter</span><span class="p">());</span>
	<span class="n">printf</span><span class="p">(</span><span class="s">"Third call: %d</span><span class="se">\n</span><span class="s">"</span><span class="p">,</span> <span class="n">mycounter</span><span class="p">());</span>
	
	<span class="cm">/* because it was copied, it must also be released */</span>
	<span class="n">Block_release</span><span class="p">(</span><span class="n">mycounter</span><span class="p">);</span>
	
	<span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
<span class="cm">/* Output:</span>
<span class="cm">	First call: 5</span>
<span class="cm">	Second call: 7</span>
<span class="cm">	Third call: 9</span>
<span class="cm">*/</span>
</pre></div>
<h3><span class="mw-headline" id="Modern_Objective-C">Modern Objective-C</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/w/index.php?title=Objective-C&amp;action=edit&amp;section=31" title="Edit section: Modern Objective-C">edit</a><span class="mw-editsection-bracket">]</span></span></h3>
<h4><span class="mw-headline" id="Automatic_Reference_Counting">Automatic Reference Counting</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/w/index.php?title=Objective-C&amp;action=edit&amp;section=32" title="Edit section: Automatic Reference Counting">edit</a><span class="mw-editsection-bracket">]</span></span></h4>
<div role="note" class="hatnote">Main article: <a href="/wiki/Automatic_Reference_Counting" title="Automatic Reference Counting">Automatic Reference Counting</a></div>
<p>Automatic Reference Counting (ARC) is a compile-time feature that eliminates the need for programmers to manually manage retain counts using <code>retain</code> and <code>release</code>.<sup id="cite_ref-Transitioning_to_ARC_37-0" class="reference"><a href="#cite_note-Transitioning_to_ARC-37">[37]</a></sup> Unlike <a href="/wiki/Garbage_collection_(computer_science)" title="Garbage collection (computer science)">garbage collection</a>, which occurs at run time, ARC eliminates the overhead of a separate process managing retain counts. ARC and manual memory management are not mutually exclusive; programmers can continue to use non-ARC code in ARC-enabled projects by disabling ARC for individual code files. XCode can also attempt to automatically upgrade a project to ARC.</p>
<h4><span class="mw-headline" id="Literals">Literals</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/w/index.php?title=Objective-C&amp;action=edit&amp;section=33" title="Edit section: Literals">edit</a><span class="mw-editsection-bracket">]</span></span></h4>
<p>NeXT and Apple Obj-C runtimes have long included a short-form way to create new strings, using the literal syntax <code>@"a new string"</code>, or drop to CoreFoundation constants <code>kCFBooleanTrue</code> and <code>kCFBooleanFalse</code> for <code>NSNumber</code> with Boolean values. Using this format saves the programmer from having to use the longer <code>initWithString</code> or similar methods when doing certain operations.</p>
<p>When using Apple <a href="/wiki/LLVM" title="LLVM">LLVM</a> compiler 4.0 or later, arrays, dictionaries, and numbers (<code>NSArray</code>, <code>NSDictionary</code>, <code>NSNumber</code> classes) can also be created using literal syntax instead of methods.<sup id="cite_ref-Programming_with_Obj-C_.E2.80.93_Values_and_Collections_38-0" class="reference"><a href="#cite_note-Programming_with_Obj-C_.E2.80.93_Values_and_Collections-38">[38]</a></sup></p>
<p>Example without literals:</p>
<div class="mw-highlight mw-content-ltr" dir="ltr">
<pre>
<span class="bp">NSArray</span> <span class="o">*</span><span class="n">myArray</span> <span class="o">=</span> <span class="p">[</span><span class="bp">NSArray</span> <span class="nl">arrayWithObjects</span><span class="p">:</span><span class="n">object1</span><span class="p">,</span><span class="n">object2</span><span class="p">,</span><span class="n">object3</span><span class="p">,</span><span class="nb">nil</span><span class="p">];</span>
<span class="bp">NSDictionary</span> <span class="o">*</span><span class="n">myDictionary1</span> <span class="o">=</span> <span class="p">[</span><span class="bp">NSDictionary</span> <span class="nl">dictionaryWithObject</span><span class="p">:</span><span class="n">someObject</span> <span class="nl">forKey</span><span class="p">:</span><span class="s">@"key"</span><span class="p">];</span>
<span class="bp">NSDictionary</span> <span class="o">*</span><span class="n">myDictionary2</span> <span class="o">=</span> <span class="p">[</span><span class="bp">NSDictionary</span> <span class="nl">dictionaryWithObjectsAndKeys</span><span class="p">:</span><span class="n">object1</span><span class="p">,</span> <span class="n">key1</span><span class="p">,</span> <span class="n">object2</span><span class="p">,</span> <span class="n">key2</span><span class="p">,</span> <span class="nb">nil</span><span class="p">];</span>
<span class="bp">NSNumber</span> <span class="o">*</span><span class="n">myNumber</span> <span class="o">=</span> <span class="p">[</span><span class="bp">NSNumber</span> <span class="nl">numberWithInt</span><span class="p">:</span><span class="n">myInt</span><span class="p">];</span>
<span class="bp">NSNumber</span> <span class="o">*</span><span class="n">mySumNumber</span><span class="o">=</span> <span class="p">[</span><span class="bp">NSNumber</span> <span class="nl">numberWithInt</span><span class="p">:(</span><span class="mi">2</span> <span class="o">+</span> <span class="mi">3</span><span class="p">)];</span>
<span class="bp">NSNumber</span> <span class="o">*</span><span class="n">myBoolNumber</span> <span class="o">=</span> <span class="p">[</span><span class="bp">NSNumber</span> <span class="nl">numberWithBool</span><span class="p">:</span><span class="nb">YES</span><span class="p">];</span>
</pre></div>
<p>Example with literals:</p>
<div class="mw-highlight mw-content-ltr" dir="ltr">
<pre>
<span class="bp">NSArray</span> <span class="o">*</span><span class="n">myArray</span> <span class="o">=</span> <span class="l">@[</span> <span class="n">object1</span><span class="p">,</span> <span class="n">object2</span><span class="p">,</span> <span class="n">object3</span> <span class="l">]</span><span class="p">;</span>
<span class="bp">NSDictionary</span> <span class="o">*</span><span class="n">myDictionary1</span> <span class="o">=</span> <span class="l">@{</span> <span class="s">@"key"</span> <span class="o">:</span> <span class="n">someObject</span> <span class="l">}</span><span class="p">;</span>
<span class="bp">NSDictionary</span> <span class="o">*</span><span class="n">myDictionary2</span> <span class="o">=</span> <span class="l">@{</span> <span class="nl">key1</span><span class="p">:</span> <span class="n">object1</span><span class="p">,</span> <span class="nl">key2</span><span class="p">:</span> <span class="n">object2</span> <span class="l">}</span><span class="p">;</span>
<span class="bp">NSNumber</span> <span class="o">*</span><span class="n">myNumber</span> <span class="o">=</span> <span class="l">@(</span><span class="n">myInt</span><span class="l">)</span><span class="p">;</span>
<span class="bp">NSNumber</span> <span class="o">*</span><span class="n">mySumNumber</span> <span class="o">=</span> <span class="l">@(</span><span class="mi">2</span><span class="o">+</span><span class="mi">3</span><span class="l">)</span><span class="p">;</span>
<span class="bp">NSNumber</span> <span class="o">*</span><span class="n">myBoolNumber</span> <span class="o">=</span> <span class="m">@YES</span><span class="p">;</span>
<span class="bp">NSNumber</span> <span class="o">*</span><span class="n">myIntegerNumber</span> <span class="o">=</span> <span class="mi">@8</span><span class="p">;</span>
</pre></div>
<p>However, different from <a href="/wiki/String_literal" title="String literal">string literals</a>, which compile to constants in the executable, these literals compile to code equivalent to the above method calls. In particular, under manually reference-counted memory management, these objects are autoreleased, which requires added care when e.g., used with function-static variables or other kinds of globals.</p>
<h4><span class="mw-headline" id="Subscripting">Subscripting</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/w/index.php?title=Objective-C&amp;action=edit&amp;section=34" title="Edit section: Subscripting">edit</a><span class="mw-editsection-bracket">]</span></span></h4>
<p>When using Apple <a href="/wiki/LLVM" title="LLVM">LLVM</a> compiler 4.0 or later, arrays and dictionaries (<code>NSArray</code> and <code>NSDictionary</code> classes) can be manipulated using subscripting.<sup id="cite_ref-Programming_with_Obj-C_.E2.80.93_Values_and_Collections_38-1" class="reference"><a href="#cite_note-Programming_with_Obj-C_.E2.80.93_Values_and_Collections-38">[38]</a></sup> Subscripting can be used to retrieve values from indexes (array) or keys (dictionary), and with mutable objects, can also be used to set objects to indexes or keys. In code, subscripting is represented using brackets <code>[ ]</code>.<sup id="cite_ref-ObjCLiterals_39-0" class="reference"><a href="#cite_note-ObjCLiterals-39">[39]</a></sup></p>
<p>Example without subscripting:</p>
<div class="mw-highlight mw-content-ltr" dir="ltr">
<pre>
<span class="kt">id</span> <span class="n">object1</span> <span class="o">=</span> <span class="p">[</span><span class="n">someArray</span> <span class="nl">objectAtIndex</span><span class="p">:</span><span class="mi">0</span><span class="p">];</span>
<span class="kt">id</span> <span class="n">object2</span> <span class="o">=</span> <span class="p">[</span><span class="n">someDictionary</span> <span class="nl">objectForKey</span><span class="p">:</span><span class="s">@"key"</span><span class="p">];</span>
<span class="p">[</span><span class="n">someMutableArray</span> <span class="nl">replaceObjectAtIndex</span><span class="p">:</span><span class="mi">0</span> <span class="nl">withObject</span><span class="p">:</span><span class="n">object3</span><span class="p">];</span>
<span class="p">[</span><span class="n">someMutableDictionary</span> <span class="nl">setObject</span><span class="p">:</span><span class="n">object4</span> <span class="nl">forKey</span><span class="p">:</span><span class="s">@"key"</span><span class="p">];</span>
</pre></div>
<p>Example with subscripting:</p>
<div class="mw-highlight mw-content-ltr" dir="ltr">
<pre>
<span class="kt">id</span> <span class="n">object1</span> <span class="o">=</span> <span class="n">someArray</span><span class="p">[</span><span class="mi">0</span><span class="p">];</span>
<span class="kt">id</span> <span class="n">object2</span> <span class="o">=</span> <span class="n">someDictionary</span><span class="p">[</span><span class="s">@"key"</span><span class="p">];</span>
<span class="n">someMutableArray</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">=</span> <span class="n">object3</span><span class="p">;</span>
<span class="n">someMutableDictionary</span><span class="p">[</span><span class="s">@"key"</span><span class="p">]</span> <span class="o">=</span> <span class="n">object4</span><span class="p">;</span>
</pre></div>
<h3><span class="mw-headline" id=".22Modern.22_Objective-C_syntax_.281997.29">"Modern" Objective-C syntax (1997)</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/w/index.php?title=Objective-C&amp;action=edit&amp;section=35" title="Edit section: &quot;Modern&quot; Objective-C syntax (1997)">edit</a><span class="mw-editsection-bracket">]</span></span></h3>
<p>After the purchase of NeXT by Apple, attempts were made to make the language more acceptable to programmers more familiar with <a href="/wiki/Java_(programming_language)" title="Java (programming language)">Java</a> than Smalltalk. One of these attempts was introducing what was dubbed "Modern Syntax" for Objective-C at the time<sup id="cite_ref-40" class="reference"><a href="#cite_note-40">[40]</a></sup> (as opposed to the current, "classic" syntax). There was no change in behaviour, this was merely an alternative syntax. Instead of writing a method invocation like</p>
<pre>
   object = [[MyClass alloc] init];
   [object firstLabel: param1 secondLabel: param2];
</pre>
<p>It was instead written as</p>
<pre>
   object = (MyClass.alloc).init;
   object.firstLabel ( param1, param2 );
</pre>
<p>Similarly, declarations went from the form</p>
<pre>
   -(void) firstLabel: (int)param1 secondLabel: (int)param2;
</pre>
<p>to</p>
<pre>
   -(void) firstLabel ( int param1, int param2 );
</pre>
<p>This "modern" syntax is no longer supported in current dialects of the Objective-C language.</p>
<h3><span class="mw-headline" id="Portable_Object_Compiler">Portable Object Compiler</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/w/index.php?title=Objective-C&amp;action=edit&amp;section=36" title="Edit section: Portable Object Compiler">edit</a><span class="mw-editsection-bracket">]</span></span></h3>
<p>Besides the <a href="/wiki/GNU_Compiler_Collection" title="GNU Compiler Collection">GCC</a>/<a href="/wiki/NeXT" title="NeXT">NeXT</a>/<a href="/wiki/Apple_Inc." title="Apple Inc.">Apple</a> implementation, which added several extensions to the original <a href="/wiki/Stepstone" title="Stepstone">Stepstone</a> implementation, another <a href="/wiki/Free_and_open_source_software" class="mw-redirect" title="Free and open source software">free, open-source</a> Objective-C implementation called the Portable Object Compiler<sup id="cite_ref-41" class="reference"><a href="#cite_note-41">[41]</a></sup> also exists. The set of extensions implemented by the Portable Object Compiler differs from the GCC/NeXT/Apple implementation; in particular, it includes <a href="/wiki/Smalltalk" title="Smalltalk">Smalltalk</a>-like blocks for Objective-C, while it lacks protocols and categories, two features used extensively in OpenStep and its derivatives and relatives. Overall, POC represents an older, pre-NeXT stage in the language's evolution, roughly conformant to Brad Cox's 1991 book.</p>
<p>It also includes a runtime library called ObjectPak, which is based on Cox's original ICPak101 library (which in turn derives from the Smalltalk-80 class library), and is quite radically different from the OpenStep FoundationKit.</p>
<h3><span class="mw-headline" id="GEOS_Objective-C">GEOS Objective-C</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/w/index.php?title=Objective-C&amp;action=edit&amp;section=37" title="Edit section: GEOS Objective-C">edit</a><span class="mw-editsection-bracket">]</span></span></h3>
<p>The <a href="/wiki/GEOS_(16-bit_operating_system)" title="GEOS (16-bit operating system)">PC GEOS</a> system used a programming language known as <b>GEOS Objective-C</b> or <b>goc</b>;<sup id="cite_ref-42" class="reference"><a href="#cite_note-42">[42]</a></sup> despite the name similarity, the two languages are similar only in overall concept and the use of keywords prefixed with an @ sign.</p>
<h3><span class="mw-headline" id="Clang">Clang</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/w/index.php?title=Objective-C&amp;action=edit&amp;section=38" title="Edit section: Clang">edit</a><span class="mw-editsection-bracket">]</span></span></h3>
<p>The <a href="/wiki/Clang" title="Clang">Clang</a> compiler suite, part of the <a href="/wiki/LLVM" title="LLVM">LLVM</a> project, implements Objective-C, and other languages.</p>
<h2><span class="mw-headline" id="Library_use">Library use</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/w/index.php?title=Objective-C&amp;action=edit&amp;section=39" title="Edit section: Library use">edit</a><span class="mw-editsection-bracket">]</span></span></h2>
<p>Objective-C today is often used in tandem with a fixed library of standard objects (often known as a "kit" or "framework"), such as <a href="/wiki/Cocoa_(API)" title="Cocoa (API)">Cocoa</a>, <a href="/wiki/GNUstep" title="GNUstep">GNUstep</a> or <a href="/w/index.php?title=ObjFW&amp;action=edit&amp;redlink=1" class="new" title="ObjFW (page does not exist)">ObjFW</a>. These libraries often come with the operating system: the GNUstep libraries often come with <a href="/wiki/Linux" title="Linux">Linux</a>-based distributions and Cocoa comes with OS X. The programmer is not forced to inherit functionality from the existing base class (NSObject / OFObject). Objective-C allows for the declaration of new root classes that do not inherit any existing functionality. Originally, Objective-C-based programming environments typically offered an Object class as the base class from which almost all other classes inherited. With the introduction of OpenStep, NeXT created a new base class named NSObject, which offered additional features over Object (an emphasis on using object references and reference counting instead of raw pointers, for example). Almost all classes in Cocoa inherit from NSObject.</p>
<p>Not only did the renaming serve to differentiate the new default behavior of classes within the OpenStep API, but it allowed code that used Object—the original base class used on NeXTSTEP (and, more or less, other Objective-C class libraries)—to co-exist in the same runtime with code that used NSObject (with some limitations). The introduction of the two letter prefix also became a simplistic form of namespaces, which Objective-C lacks. Using a prefix to create an informal packaging identifier became an informal coding standard in the Objective-C community, and continues to this day.</p>
<p>More recently, package managers have started appearing, such as <a href="/wiki/CocoaPods" title="CocoaPods">CocoaPods</a>, which aims to be both a package manager and a repository of packages. A lot of open-source Objective-C code that was written in the last few years can now be installed using CocoaPods.</p>
<h2><span class="mw-headline" id="Analysis_of_the_language">Analysis of the language</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/w/index.php?title=Objective-C&amp;action=edit&amp;section=40" title="Edit section: Analysis of the language">edit</a><span class="mw-editsection-bracket">]</span></span></h2>
<table class="plainlinks metadata ambox ambox-content ambox-Refimprove" role="presentation">
<tr>
<td class="mbox-image">
<div style="width:52px"><a href="/wiki/File:Question_book-new.svg" class="image"><img alt="" src="//upload.wikimedia.org/wikipedia/en/thumb/9/99/Question_book-new.svg/50px-Question_book-new.svg.png" width="50" height="39" srcset="//upload.wikimedia.org/wikipedia/en/thumb/9/99/Question_book-new.svg/75px-Question_book-new.svg.png 1.5x, //upload.wikimedia.org/wikipedia/en/thumb/9/99/Question_book-new.svg/100px-Question_book-new.svg.png 2x" data-file-width="512" data-file-height="399" /></a></div>
</td>
<td class="mbox-text"><span class="mbox-text-span">This section <b>needs additional citations for <a href="/wiki/Wikipedia:Verifiability" title="Wikipedia:Verifiability">verification</a></b>. <span class="hide-when-compact">Please help <a class="external text" href="//en.wikipedia.org/w/index.php?title=Objective-C&amp;action=edit">improve this article</a> by <a href="/wiki/Help:Introduction_to_referencing_with_Wiki_Markup/1" title="Help:Introduction to referencing with Wiki Markup/1">adding citations to reliable sources</a>. Unsourced material may be challenged and removed.</span> <small><i>(December 2011)</i></small> <small class="hide-when-compact"><i>(<a href="/wiki/Help:Maintenance_template_removal" title="Help:Maintenance template removal">Learn how and when to remove this template message</a>)</i></small></span></td>
</tr>
</table>
<p>Objective-C implementations use a thin <a href="/wiki/Run_time_system" class="mw-redirect" title="Run time system">runtime system</a> written in C, which adds little to the size of the application. In contrast, most object-oriented systems at the time that it was created used large <a href="/wiki/Virtual_machine" title="Virtual machine">virtual machine</a> runtimes. Programs written in Objective-C tend to be not much larger than the size of their code and that of the libraries (which generally do not need to be included in the software distribution), in contrast to Smalltalk systems where a large amount of memory was used just to open a window. Objective-C applications tend to be larger than similar C or C++ applications because Objective-C dynamic typing does not allow methods to be stripped or inlined. Since the programmer has such freedom to delegate, forward calls, build selectors on the fly and pass them to the runtime system, the Objective-C compiler cannot assume it is safe to remove unused methods or to inline calls.</p>
<p>Likewise, the language can be implemented atop extant C compilers (in <a href="/wiki/GNU_Compiler_Collection" title="GNU Compiler Collection">GCC</a>, first as a preprocessor, then as a module) rather than as a new compiler. This allows Objective-C to leverage the huge existing collection of C code, libraries, tools, etc. Existing C libraries can be wrapped in Objective-C <a href="/wiki/Adapter_pattern" title="Adapter pattern">wrappers</a> to provide an OO-style interface. In this aspect, it is similar to <a href="/wiki/GObject" title="GObject">GObject</a> library and <a href="/wiki/Vala_(programming_language)" title="Vala (programming language)">Vala</a> language, which are widely used in development of <a href="/wiki/GTK" class="mw-redirect" title="GTK">GTK</a> applications.</p>
<p>All of these practical changes lowered the <a href="/wiki/Barriers_to_entry" title="Barriers to entry">barrier to entry</a>, likely the biggest problem for the widespread acceptance of Smalltalk in the 1980s.</p>
<p>A common criticism is that Objective-C does not have language support for <a href="/wiki/Namespaces" class="mw-redirect" title="Namespaces">namespaces</a>. Instead, programmers are forced to add prefixes to their class names, which are traditionally shorter than namespace names and thus more prone to collisions. As of 2007, all Mac OS X classes and functions in the <a href="/wiki/Cocoa_(software)" class="mw-redirect" title="Cocoa (software)">Cocoa</a> programming environment are prefixed with "NS" (e.g. NSObject, NSButton) to identify them as belonging to the Mac OS X or iOS core; the "NS" derives from the names of the classes as defined during the development of <a href="/wiki/NeXTSTEP" title="NeXTSTEP">NeXTSTEP</a>.</p>
<p>Since Objective-C is a strict superset of C, it does not treat C primitive types as <a href="/wiki/First-class_object" class="mw-redirect" title="First-class object">first-class objects</a>.</p>
<p>Unlike <a href="/wiki/C%2B%2B" title="C++">C++</a>, Objective-C does not support <a href="/wiki/Operator_overloading" title="Operator overloading">operator overloading</a>. Also unlike C++, Objective-C allows an object to directly inherit only from one class (forbidding <a href="/wiki/Multiple_inheritance" title="Multiple inheritance">multiple inheritance</a>). However, in most cases, categories and protocols may be used as alternative ways to achieve the same results.</p>
<p>Because Objective-C uses dynamic runtime typing and because all method calls are function calls (or, in some cases, syscalls), many common performance optimizations cannot be applied to Objective-C methods (for example: inlining, constant propagation, interprocedural optimizations, and scalar replacement of aggregates). This limits the performance of Objective-C abstractions relative to similar abstractions in languages such as C++ where such optimizations are possible.</p>
<h3><span class="mw-headline" id="Memory_management">Memory management</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/w/index.php?title=Objective-C&amp;action=edit&amp;section=41" title="Edit section: Memory management">edit</a><span class="mw-editsection-bracket">]</span></span></h3>
<p>The first versions of Objective-C did not support <a href="/wiki/Garbage_collection_(computer_science)" title="Garbage collection (computer science)">garbage collection</a>. At the time this decision was a matter of some debate, and many people considered long "dead times" (when Smalltalk performed collection) to render the entire system unusable. Some 3rd party implementations have added this feature (most notably GNUstep) and Apple has implemented it as of <a href="/wiki/Mac_OS_X_v10.5" class="mw-redirect" title="Mac OS X v10.5">Mac OS X v10.5</a>.<sup id="cite_ref-43" class="reference"><a href="#cite_note-43">[43]</a></sup> However, in more recent versions of Mac OS X and iOS, garbage collection has been deprecated in favor of <a href="/wiki/Automatic_Reference_Counting" title="Automatic Reference Counting">Automatic Reference Counting</a> (ARC), introduced in 2011.</p>
<p>With ARC, the compiler inserts retain and release calls automatically into Objective-C code based on <a href="/wiki/Static_program_analysis" title="Static program analysis">static code analysis</a>. The automation relieves the programmer of having to write in memory management code. ARC also adds weak references to the Objective-C language.<sup id="cite_ref-44" class="reference"><a href="#cite_note-44">[44]</a></sup></p>
<h3><span class="mw-headline" id="Philosophical_differences_between_Objective-C_and_C.2B.2B">Philosophical differences between Objective-C and C++</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/w/index.php?title=Objective-C&amp;action=edit&amp;section=42" title="Edit section: Philosophical differences between Objective-C and C++">edit</a><span class="mw-editsection-bracket">]</span></span></h3>
<p>The design and implementation of <a href="/wiki/C%2B%2B" title="C++">C++</a> and Objective-C represent fundamentally different approaches to extending C.</p>
<p>In addition to C's style of procedural programming, C++ directly supports certain forms of <a href="/wiki/Object-oriented_programming" title="Object-oriented programming">object-oriented programming</a>, <a href="/wiki/Generic_programming" title="Generic programming">generic programming</a>, and <a href="/wiki/Metaprogramming" title="Metaprogramming">metaprogramming</a>. C++ also comes with <a href="/wiki/C%2B%2B_standard_library" class="mw-redirect" title="C++ standard library">a large standard library</a> that includes <a href="/wiki/Sequence_container_(C%2B%2B)" title="Sequence container (C++)">several container classes</a>. Similarly, Objective-C adds <a href="/wiki/Polymorphism_in_object-oriented_programming" class="mw-redirect" title="Polymorphism in object-oriented programming">object-oriented programming</a>, <a href="/wiki/Dynamic_typing" class="mw-redirect" title="Dynamic typing">dynamic typing</a>, and <a href="/wiki/Reflection_(computer_science)" class="mw-redirect" title="Reflection (computer science)">reflection</a> to C. Objective-C does not provide a standard library <i>per se</i>, but in most places where Objective-C is used, it is used with an <a href="/wiki/OpenStep" title="OpenStep">OpenStep</a>-like library such as <a href="/wiki/OPENSTEP" class="mw-redirect" title="OPENSTEP">OPENSTEP</a>, <a href="/wiki/Cocoa_(API)" title="Cocoa (API)">Cocoa</a>, or <a href="/wiki/GNUstep" title="GNUstep">GNUstep</a>, which provides functionality similar to C++'s standard library.</p>
<p>One notable difference is that Objective-C provides runtime support for <a href="/wiki/Reflection_(computer_science)" class="mw-redirect" title="Reflection (computer science)">reflective</a> features, whereas C++ adds only a small amount of runtime support to C. In Objective-C, an object can be queried about its own properties, e.g., whether it will respond to a certain message. In C++, this is not possible without the use of external libraries.</p>
<p>The use of reflection is part of the wider distinction between dynamic (run-time) features and static (compile-time) features of a language. Although Objective-C and C++ each employ a mix of both features, Objective-C is decidedly geared toward run-time decisions while C++ is geared toward compile-time decisions. The tension between dynamic and static programming involves many of the classic trade-offs in programming: dynamic features add flexibility, static features add speed and type checking.</p>
<p><a href="/wiki/Generic_programming" title="Generic programming">Generic programming</a> and metaprogramming can be implemented in both languages using <a href="/wiki/Runtime_polymorphism" class="mw-redirect" title="Runtime polymorphism">runtime polymorphism</a>. In C++ this takes the form of <a href="/wiki/Virtual_function" title="Virtual function">virtual functions</a> and <a href="/wiki/Runtime_type_identification" class="mw-redirect" title="Runtime type identification">runtime type identification</a>, while Objective-C offers dynamic typing and reflection. Objective-C lacks compile-time polymorphism (<a href="/wiki/Generic_function" title="Generic function">generic functions</a>) entirely, while C++ supports it via <a href="/wiki/Function_overloading" title="Function overloading">function overloading</a> and <a href="/wiki/Template_(C%2B%2B)" title="Template (C++)">templates</a>.</p>
<h2><span class="mw-headline" id="See_also">See also</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/w/index.php?title=Objective-C&amp;action=edit&amp;section=43" title="Edit section: See also">edit</a><span class="mw-editsection-bracket">]</span></span></h2>
<ul>
<li><a href="/wiki/C_(programming_language)" title="C (programming language)">C (programming language)</a></li>
<li><a href="/wiki/C%2B%2B" title="C++">C++</a></li>
<li><a href="/wiki/Comparison_of_programming_languages" title="Comparison of programming languages">Comparison of programming languages</a></li>
<li><a href="/wiki/IBM_System_Object_Model#Comparison_of_Support_for_Compiled_Class_Libraries" title="IBM System Object Model">Comparison with COM, GObject, SOM, Windows Runtime, XPCOM</a></li>
<li><a href="/wiki/Swift_(programming_language)" title="Swift (programming language)">Swift</a></li>
<li><a href="/wiki/Xcode" title="Xcode">Xcode</a></li>
</ul>
<h2><span class="mw-headline" id="References">References</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/w/index.php?title=Objective-C&amp;action=edit&amp;section=44" title="Edit section: References">edit</a><span class="mw-editsection-bracket">]</span></span></h2>
<div class="reflist columns references-column-width" style="-moz-column-width: 30em; -webkit-column-width: 30em; column-width: 30em; list-style-type: decimal;">
<ol class="references">
<li id="cite_note-1"><span class="mw-cite-backlink"><b><a href="#cite_ref-1">^</a></b></span> <span class="reference-text"><a rel="nofollow" class="external free" href="https://developer.apple.com/library/mac/documentation/Cocoa/Conceptual/ObjCRuntimeGuide/Articles/ocrtVersionsPlatforms.html">https://developer.apple.com/library/mac/documentation/Cocoa/Conceptual/ObjCRuntimeGuide/Articles/ocrtVersionsPlatforms.html</a></span></li>
<li id="cite_note-lattner2014-2"><span class="mw-cite-backlink"><b><a href="#cite_ref-lattner2014_2-0">^</a></b></span> <span class="reference-text"><cite class="citation web">Lattner, Chris (2014-06-03). <a rel="nofollow" class="external text" href="http://nondot.org/sabre/">"Chris Lattner's Homepage"</a>. Chris Lattner<span class="reference-accessdate">. Retrieved <span class="nowrap">2014-06-03</span></span>. <q>The Swift language is the product of tireless effort from a team of language experts, documentation gurus, compiler optimization ninjas, and an incredibly important internal dogfooding group who provided feedback to help refine and battle-test ideas. Of course, it also greatly benefited from the experiences hard-won by many other languages in the field, drawing ideas from Objective-C, Rust, Haskell, Ruby, Python, C#, CLU, and far too many others to list.</q></cite><span title="ctx_ver=Z39.88-2004&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3AObjective-C&amp;rft.aufirst=Chris&amp;rft.aulast=Lattner&amp;rft.btitle=Chris+Lattner%27s+Homepage&amp;rft.date=2014-06-03&amp;rft.genre=unknown&amp;rft_id=http%3A%2F%2Fnondot.org%2Fsabre%2F&amp;rft.pub=Chris+Lattner&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook" class="Z3988"><span style="display:none;">&#160;</span></span></span></li>
<li id="cite_note-3"><span class="mw-cite-backlink"><b><a href="#cite_ref-3">^</a></b></span> <span class="reference-text"><cite class="citation web">Singh, Amit (December 2003). <a rel="nofollow" class="external text" href="http://osxbook.com/book/bonus/ancient/whatismacosx/history.html">"A Brief History of Mac OS X"</a>. Mac OS X Internals<span class="reference-accessdate">. Retrieved <span class="nowrap">11 June</span> 2012</span>.</cite><span title="ctx_ver=Z39.88-2004&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3AObjective-C&amp;rft.aufirst=Amit&amp;rft.aulast=Singh&amp;rft.btitle=A+Brief+History+of+Mac+OS+X&amp;rft.date=2003-12&amp;rft.genre=unknown&amp;rft_id=http%3A%2F%2Fosxbook.com%2Fbook%2Fbonus%2Fancient%2Fwhatismacosx%2Fhistory.html&amp;rft.pub=Mac+OS+X+Internals&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook" class="Z3988"><span style="display:none;">&#160;</span></span></span></li>
<li id="cite_note-Wired1-4"><span class="mw-cite-backlink"><b><a href="#cite_ref-Wired1_4-0">^</a></b></span> <span class="reference-text"><cite class="citation web">Garling, Caleb. <a rel="nofollow" class="external text" href="http://www.wired.com/wiredenterprise/2012/07/apple-objective-c/">"iPhone Coding Language Now World's Third Most Popular"</a>. <a href="/wiki/Wired_(magazine)" title="Wired (magazine)">Wired</a><span class="reference-accessdate">. Retrieved <span class="nowrap">20 May</span> 2013</span>.</cite><span title="ctx_ver=Z39.88-2004&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3AObjective-C&amp;rft.aufirst=Caleb&amp;rft.aulast=Garling&amp;rft.btitle=iPhone+Coding+Language+Now+World%27s+Third+Most+Popular&amp;rft.genre=unknown&amp;rft_id=http%3A%2F%2Fwww.wired.com%2Fwiredenterprise%2F2012%2F07%2Fapple-objective-c%2F&amp;rft.pub=Wired&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook" class="Z3988"><span style="display:none;">&#160;</span></span></span></li>
<li id="cite_note-5"><span class="mw-cite-backlink"><b><a href="#cite_ref-5">^</a></b></span> <span class="reference-text"><cite class="citation book">Wentk, Richard (2009). <a rel="nofollow" class="external text" href="https://books.google.com/books?id=vBglDfsAjVQC&amp;pg=PT23"><i>Cocoa: Volume 5 of Developer Reference Apple Developer Series</i></a>. John Wiley and Sons,. <a href="/wiki/International_Standard_Book_Number" title="International Standard Book Number">ISBN</a>&#160;<a href="/wiki/Special:BookSources/0-470-49589-8" title="Special:BookSources/0-470-49589-8">0-470-49589-8</a>.</cite><span title="ctx_ver=Z39.88-2004&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3AObjective-C&amp;rft.aufirst=Richard&amp;rft.aulast=Wentk&amp;rft.btitle=Cocoa%3A+Volume+5+of+Developer+Reference+Apple+Developer+Series&amp;rft.date=2009&amp;rft.genre=book&amp;rft_id=https%3A%2F%2Fbooks.google.com%2Fbooks%3Fid%3DvBglDfsAjVQC%26pg%3DPT23&amp;rft.isbn=0-470-49589-8&amp;rft.pub=John+Wiley+and+Sons%2C&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook" class="Z3988"><span style="display:none;">&#160;</span></span></span></li>
<li id="cite_note-love2009-6"><span class="mw-cite-backlink"><b><a href="#cite_ref-love2009_6-0">^</a></b></span> <span class="reference-text"><cite class="citation book">Biancuzzi, Federico; Warden, Shane (2009). <a rel="nofollow" class="external text" href="https://books.google.com/books?id=yB1WwURwBUQC&amp;pg=PA242"><i>Masterminds of Programming</i></a>. <a href="/wiki/O%27Reilly_Media,_Inc." class="mw-redirect" title="O'Reilly Media, Inc.">O'Reilly Media, Inc.</a> pp.&#160;242–246. <a href="/wiki/International_Standard_Book_Number" title="International Standard Book Number">ISBN</a>&#160;<a href="/wiki/Special:BookSources/0-596-51517-0" title="Special:BookSources/0-596-51517-0">0-596-51517-0</a>.</cite><span title="ctx_ver=Z39.88-2004&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3AObjective-C&amp;rft.aufirst=Federico&amp;rft.aulast=Biancuzzi&amp;rft.au=Warden%2C+Shane&amp;rft.btitle=Masterminds+of+Programming&amp;rft.date=2009&amp;rft.genre=book&amp;rft_id=https%3A%2F%2Fbooks.google.com%2Fbooks%3Fid%3DyB1WwURwBUQC%26pg%3DPA242&amp;rft.isbn=0-596-51517-0&amp;rft.pages=242-246&amp;rft.pub=O%27Reilly+Media%2C+Inc.&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook" class="Z3988"><span style="display:none;">&#160;</span></span></span></li>
<li id="cite_note-7"><span class="mw-cite-backlink"><b><a href="#cite_ref-7">^</a></b></span> <span class="reference-text"><cite class="citation journal"><a href="/wiki/Brad_Cox" title="Brad Cox">Cox, Brad</a> (1983). <a rel="nofollow" class="external text" href="http://portal.acm.org/citation.cfm?id=948095">"The object oriented pre-compiler: programming Smalltalk 80 methods in C language"</a>. <i>ACM SIGPLAN Notices</i>. New York, NY: <a href="/wiki/Association_for_Computing_Machinery" title="Association for Computing Machinery">ACM</a>. <b>18</b> (1). <a href="/wiki/Digital_object_identifier" title="Digital object identifier">doi</a>:<a rel="nofollow" class="external text" href="//dx.doi.org/10.1145%2F948093.948095">10.1145/948093.948095</a><span class="reference-accessdate">. Retrieved <span class="nowrap">2011-02-17</span></span>.</cite><span title="ctx_ver=Z39.88-2004&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3AObjective-C&amp;rft.atitle=The+object+oriented+pre-compiler%3A+programming+Smalltalk+80+methods+in+C+language&amp;rft.aufirst=Brad&amp;rft.aulast=Cox&amp;rft.date=1983&amp;rft.genre=article&amp;rft_id=http%3A%2F%2Fportal.acm.org%2Fcitation.cfm%3Fid%3D948095&amp;rft_id=info%3Adoi%2F10.1145%2F948093.948095&amp;rft.issue=1&amp;rft.jtitle=ACM+SIGPLAN+Notices&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Ajournal&amp;rft.volume=18" class="Z3988"><span style="display:none;">&#160;</span></span></span></li>
<li id="cite_note-8"><span class="mw-cite-backlink"><b><a href="#cite_ref-8">^</a></b></span> <span class="reference-text"><cite class="citation web"><a rel="nofollow" class="external text" href="http://clisp.cvs.sourceforge.net/viewvc/clisp/clisp/doc/Why-CLISP-is-under-GPL">"Common Lisp and Readline"</a>. <q>The issue first arose when NeXT proposed to distribute a modified GCC in two parts and let the user link them. Jobs asked me whether this was lawful. It seemed to me at the time that it was, following reasoning like what you are using; but since the result was very undesirable for free software, I said I would have to ask the lawyer. What the lawyer said surprised me; he said that judges would consider such schemes to be "subterfuges" and would be very harsh toward them. He said a judge would ask whether it is "really" one program, rather than how it is labeled. So I went back to Jobs and said we believed his plan was not allowed by the GPL. The direct result of this is that we now have an Objective C front end. They had wanted to distribute the Objective C parser as a separate proprietary package to link with the GCC back end, but since I didn't agree this was allowed, they made it free.</q></cite><span title="ctx_ver=Z39.88-2004&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3AObjective-C&amp;rft.btitle=Common+Lisp+and+Readline&amp;rft.genre=unknown&amp;rft_id=http%3A%2F%2Fclisp.cvs.sourceforge.net%2Fviewvc%2Fclisp%2Fclisp%2Fdoc%2FWhy-CLISP-is-under-GPL&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook" class="Z3988"><span style="display:none;">&#160;</span></span></span></li>
<li id="cite_note-GNUstep_site-9"><span class="mw-cite-backlink"><b><a href="#cite_ref-GNUstep_site_9-0">^</a></b></span> <span class="reference-text"><cite class="citation web"><a rel="nofollow" class="external text" href="http://www.gnustep.org/information/aboutGNUstep.html">"GNUstep: Introduction"</a>. GNUstep developers/GNU Project<span class="reference-accessdate">. Retrieved <span class="nowrap">2012-07-29</span></span>.</cite><span title="ctx_ver=Z39.88-2004&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3AObjective-C&amp;rft.btitle=GNUstep%3A+Introduction&amp;rft.genre=unknown&amp;rft_id=http%3A%2F%2Fwww.gnustep.org%2Finformation%2FaboutGNUstep.html&amp;rft.pub=GNUstep+developers%2FGNU+Project&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook" class="Z3988"><span style="display:none;">&#160;</span></span></span></li>
<li id="cite_note-10"><span class="mw-cite-backlink"><b><a href="#cite_ref-10">^</a></b></span> <span class="reference-text"><cite class="citation web"><a rel="nofollow" class="external text" href="https://www.linkedin.com/in/krestenkrabthorup">"Kresten Krab Thorup | LinkedIn"</a>. <i>www.linkedin.com</i><span class="reference-accessdate">. Retrieved <span class="nowrap">2016-06-23</span></span>.</cite><span title="ctx_ver=Z39.88-2004&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3AObjective-C&amp;rft.atitle=Kresten+Krab+Thorup+%7C+LinkedIn&amp;rft.genre=unknown&amp;rft_id=https%3A%2F%2Fwww.linkedin.com%2Fin%2Fkrestenkrabthorup&amp;rft.jtitle=www.linkedin.com&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Ajournal" class="Z3988"><span style="display:none;">&#160;</span></span></span></li>
<li id="cite_note-11"><span class="mw-cite-backlink"><b><a href="#cite_ref-11">^</a></b></span> <span class="reference-text"><cite class="citation web"><a rel="nofollow" class="external text" href="https://developer.apple.com/library/mac/referencelibrary/GettingStarted/RoadMapOSX/books/WriteObjective-CCode/WriteObjective-CCode/WriteObjective-CCode.html">"Write Objective-C Code"</a>. apple.com. 2013-04-23<span class="reference-accessdate">. Retrieved <span class="nowrap">2013-12-22</span></span>.</cite><span title="ctx_ver=Z39.88-2004&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3AObjective-C&amp;rft.btitle=Write+Objective-C+Code&amp;rft.date=2013-04-23&amp;rft.genre=unknown&amp;rft_id=https%3A%2F%2Fdeveloper.apple.com%2Flibrary%2Fmac%2Freferencelibrary%2FGettingStarted%2FRoadMapOSX%2Fbooks%2FWriteObjective-CCode%2FWriteObjective-CCode%2FWriteObjective-CCode.html&amp;rft.pub=apple.com&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook" class="Z3988"><span style="display:none;">&#160;</span></span></span></li>
<li id="cite_note-12"><span class="mw-cite-backlink"><b><a href="#cite_ref-12">^</a></b></span> <span class="reference-text"><cite class="citation web"><a rel="nofollow" class="external text" href="http://www.informit.com/articles/article.aspx?p=1765122">"Objective-C Boot Camp"</a>. <q>Objective-C is a strict superset of ANSI C</q></cite><span title="ctx_ver=Z39.88-2004&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3AObjective-C&amp;rft.btitle=Objective-C+Boot+Camp&amp;rft.genre=unknown&amp;rft_id=http%3A%2F%2Fwww.informit.com%2Farticles%2Farticle.aspx%3Fp%3D1765122&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook" class="Z3988"><span style="display:none;">&#160;</span></span></span></li>
<li id="cite_note-13"><span class="mw-cite-backlink"><b><a href="#cite_ref-13">^</a></b></span> <span class="reference-text"><cite class="citation web"><a rel="nofollow" class="external text" href="http://www.drdobbs.com/examining-objective-c/184402055">"Examining Objective-C"</a>. <q>Objective-C is an object-oriented strict superset of C</q></cite><span title="ctx_ver=Z39.88-2004&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3AObjective-C&amp;rft.btitle=Examining+Objective-C&amp;rft.genre=unknown&amp;rft_id=http%3A%2F%2Fwww.drdobbs.com%2Fexamining-objective-c%2F184402055&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook" class="Z3988"><span style="display:none;">&#160;</span></span></span></li>
<li id="cite_note-14"><span class="mw-cite-backlink"><b><a href="#cite_ref-14">^</a></b></span> <span class="reference-text"><cite class="citation book"><a rel="nofollow" class="external text" href="https://books.google.com/books?id=ec6zAAAAQBAJ&amp;lpg=PA381&amp;ots=NoFaE3OEX0&amp;pg=PA381#v=onepage&amp;q&amp;f=false"><i>Pro Objective-C By Keith Lee</i></a>.</cite><span title="ctx_ver=Z39.88-2004&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3AObjective-C&amp;rft.btitle=Pro+Objective-C+By+Keith+Lee&amp;rft.genre=book&amp;rft_id=https%3A%2F%2Fbooks.google.com%2Fbooks%3Fid%3Dec6zAAAAQBAJ%26lpg%3DPA381%26ots%3DNoFaE3OEX0%26pg%3DPA381%23v%3Donepage%26q%26f%3Dfalse&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook" class="Z3988"><span style="display:none;">&#160;</span></span></span></li>
<li id="cite_note-15"><span class="mw-cite-backlink"><b><a href="#cite_ref-15">^</a></b></span> <span class="reference-text"><cite class="citation web"><a rel="nofollow" class="external text" href="http://web.mit.edu/darwin/src/modules/headerdoc/Documentation/ObjCTags.html">"Tags for Objective-C Headers"</a>. <q>Objective-C is a superset of C</q></cite><span title="ctx_ver=Z39.88-2004&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3AObjective-C&amp;rft.btitle=Tags+for+Objective-C+Headers&amp;rft.genre=unknown&amp;rft_id=http%3A%2F%2Fweb.mit.edu%2Fdarwin%2Fsrc%2Fmodules%2Fheaderdoc%2FDocumentation%2FObjCTags.html&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook" class="Z3988"><span style="display:none;">&#160;</span></span></span></li>
<li id="cite_note-16"><span class="mw-cite-backlink"><b><a href="#cite_ref-16">^</a></b></span> <span class="reference-text"><cite class="citation web"><a rel="nofollow" class="external text" href="http://www-01.ibm.com/support/docview.wss?uid=swg24034606">"AppScan Source 8.7 now available"</a>. <q>The Objective-C programming language is a superset of the C programming language</q></cite><span title="ctx_ver=Z39.88-2004&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3AObjective-C&amp;rft.btitle=AppScan+Source+8.7+now+available&amp;rft.genre=unknown&amp;rft_id=http%3A%2F%2Fwww-01.ibm.com%2Fsupport%2Fdocview.wss%3Fuid%3Dswg24034606&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook" class="Z3988"><span style="display:none;">&#160;</span></span></span></li>
<li id="cite_note-17"><span class="mw-cite-backlink"><b><a href="#cite_ref-17">^</a></b></span> <span class="reference-text"><cite class="citation web"><a href="/wiki/Apple,_Inc." class="mw-redirect" title="Apple, Inc.">Apple, Inc.</a> (19 October 2009). <a rel="nofollow" class="external text" href="http://developer.apple.com/mac/library/documentation/Cocoa/Conceptual/ObjCRuntimeGuide/Articles/ocrtDynamicResolution.html">"Dynamic Method Resolution"</a>. <i>Objective-C Runtime Programming Guide</i><span class="reference-accessdate">. Retrieved <span class="nowrap">25 November</span> 2014</span>.</cite><span title="ctx_ver=Z39.88-2004&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3AObjective-C&amp;rft.atitle=Dynamic+Method+Resolution&amp;rft.au=Apple%2C+Inc.&amp;rft.date=2009-10-19&amp;rft.genre=unknown&amp;rft_id=http%3A%2F%2Fdeveloper.apple.com%2Fmac%2Flibrary%2Fdocumentation%2FCocoa%2FConceptual%2FObjCRuntimeGuide%2FArticles%2FocrtDynamicResolution.html&amp;rft.jtitle=Objective-C+Runtime+Programming+Guide&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Ajournal" class="Z3988"><span style="display:none;">&#160;</span></span></span></li>
<li id="cite_note-18"><span class="mw-cite-backlink"><b><a href="#cite_ref-18">^</a></b></span> <span class="reference-text"><cite class="citation web"><a href="/wiki/Apple,_Inc." class="mw-redirect" title="Apple, Inc.">Apple, Inc.</a> (19 October 2009). <a rel="nofollow" class="external text" href="https://web.archive.org/web/20100908132046/http://developer.apple.com/mac/library/documentation/Cocoa/Conceptual/ObjectiveC/Articles/ocSelectors.html">"Avoiding Messaging Errors"</a>. <i>The Objective-C Programming Language</i>. Archived from <a rel="nofollow" class="external text" href="http://developer.apple.com/mac/library/documentation/cocoa/conceptual/ObjectiveC/Articles/ocSelectors.html#//apple_ref/doc/uid/TP30001163-CH23-89447">the original</a> on 8 September 2010.</cite><span title="ctx_ver=Z39.88-2004&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3AObjective-C&amp;rft.atitle=Avoiding+Messaging+Errors&amp;rft.au=Apple%2C+Inc.&amp;rft.date=2009-10-19&amp;rft.genre=unknown&amp;rft_id=http%3A%2F%2Fdeveloper.apple.com%2Fmac%2Flibrary%2Fdocumentation%2Fcocoa%2Fconceptual%2FObjectiveC%2FArticles%2FocSelectors.html%23%2F%2Fapple_ref%2Fdoc%2Fuid%2FTP30001163-CH23-89447&amp;rft.jtitle=The+Objective-C+Programming+Language&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Ajournal" class="Z3988"><span style="display:none;">&#160;</span></span></span></li>
<li id="cite_note-19"><span class="mw-cite-backlink"><b><a href="#cite_ref-19">^</a></b></span> <span class="reference-text"><cite class="citation book">Dalrymple, Mark; Knaster, Scott. <i>Learn Objective-C on the Mac</i>. p.&#160;9. <q>The .m extension originally stood for "messages" when Objective-C was first introduced, referring to a central feature of Objective-C</q></cite><span title="ctx_ver=Z39.88-2004&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3AObjective-C&amp;rft.aufirst=Mark&amp;rft.au=Knaster%2C+Scott&amp;rft.aulast=Dalrymple&amp;rft.btitle=Learn+Objective-C+on+the+Mac&amp;rft.genre=book&amp;rft.pages=9&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook" class="Z3988"><span style="display:none;">&#160;</span></span></span></li>
<li id="cite_note-20"><span class="mw-cite-backlink"><b><a href="#cite_ref-20">^</a></b></span> <span class="reference-text"><cite class="citation web"><a rel="nofollow" class="external text" href="https://developer.apple.com/library/ios/documentation/Cocoa/Conceptual/ObjCRuntimeGuide/Articles/ocrtForwarding.html#//apple_ref/doc/uid/TP40008048-CH105-SW1">"Objective-C Runtime Programming Guide"</a>. Apple Inc.</cite><span title="ctx_ver=Z39.88-2004&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3AObjective-C&amp;rft.btitle=Objective-C+Runtime+Programming+Guide&amp;rft.genre=unknown&amp;rft_id=https%3A%2F%2Fdeveloper.apple.com%2Flibrary%2Fios%2Fdocumentation%2FCocoa%2FConceptual%2FObjCRuntimeGuide%2FArticles%2FocrtForwarding.html%23%2F%2Fapple_ref%2Fdoc%2Fuid%2FTP40008048-CH105-SW1&amp;rft.pub=Apple+Inc.&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook" class="Z3988"><span style="display:none;">&#160;</span></span></span></li>
<li id="cite_note-21"><span class="mw-cite-backlink"><b><a href="#cite_ref-21">^</a></b></span> <span class="reference-text"><a rel="nofollow" class="external text" href="http://video.google.com/videoplay?docid=-7466310348707586940&amp;ei=0dr7SIe6L46qrgLk7dHsDg&amp;q=Smalltalk-80">Example of <i>categories</i> concept</a></span></li>
<li id="cite_note-22"><span class="mw-cite-backlink"><b><a href="#cite_ref-22">^</a></b></span> <span class="reference-text"><cite class="citation web"><a rel="nofollow" class="external text" href="http://msdn.microsoft.com/en-us/library/bb383977.aspx">"Extension Methods (C# Programming Guide)"</a>. Microsoft. October 2010<span class="reference-accessdate">. Retrieved <span class="nowrap">2011-07-10</span></span>.</cite><span title="ctx_ver=Z39.88-2004&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3AObjective-C&amp;rft.btitle=Extension+Methods+%28C%23+Programming+Guide%29&amp;rft.date=2010-10&amp;rft.genre=unknown&amp;rft_id=http%3A%2F%2Fmsdn.microsoft.com%2Fen-us%2Flibrary%2Fbb383977.aspx&amp;rft.pub=Microsoft&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook" class="Z3988"><span style="display:none;">&#160;</span></span></span></li>
<li id="cite_note-23"><span class="mw-cite-backlink"><b><a href="#cite_ref-23">^</a></b></span> <span class="reference-text"><a rel="nofollow" class="external text" href="http://developer.apple.com/mac/library/documentation/Cocoa/Conceptual/ObjectiveC/Articles/ocCPlusPlus.html#//apple_ref/doc/uid/TP30001163-CH10-SW1">Using C++ With Objective-C</a> in Mac OS X Reference Library, last retrieved in 2010-02-10.</span></li>
<li id="cite_note-24"><span class="mw-cite-backlink"><b><a href="#cite_ref-24">^</a></b></span> <span class="reference-text"><cite class="citation web"><a rel="nofollow" class="external text" href="http://clang.llvm.org/docs/LanguageExtensions.html#interoperability-with-c-11-lambdas">"Clang Language Extensions — Clang 3.5 documentation"</a>. Clang.llvm.org<span class="reference-accessdate">. Retrieved <span class="nowrap">2014-04-16</span></span>.</cite><span title="ctx_ver=Z39.88-2004&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3AObjective-C&amp;rft.btitle=Clang+Language+Extensions+%94+Clang+3.5+documentation&amp;rft.genre=unknown&amp;rft_id=http%3A%2F%2Fclang.llvm.org%2Fdocs%2FLanguageExtensions.html%23interoperability-with-c-11-lambdas&amp;rft.pub=Clang.llvm.org&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook" class="Z3988"><span style="display:none;">&#160;</span></span></span></li>
<li id="cite_note-25"><span class="mw-cite-backlink"><b><a href="#cite_ref-25">^</a></b></span> <span class="reference-text"><cite class="citation web"><a rel="nofollow" class="external text" href="http://lists.apple.com/archives/Objc-language/2006/Aug/msg00039.html">"Objective-C 2.0: more clues"</a>. Lists.apple.com. 2006-08-10<span class="reference-accessdate">. Retrieved <span class="nowrap">2010-05-30</span></span>.</cite><span title="ctx_ver=Z39.88-2004&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3AObjective-C&amp;rft.btitle=Objective-C+2.0%3A+more+clues&amp;rft.date=2006-08-10&amp;rft.genre=unknown&amp;rft_id=http%3A%2F%2Flists.apple.com%2Farchives%2FObjc-language%2F2006%2FAug%2Fmsg00039.html&amp;rft.pub=Lists.apple.com&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook" class="Z3988"><span style="display:none;">&#160;</span></span></span></li>
<li id="cite_note-26"><span class="mw-cite-backlink"><b><a href="#cite_ref-26">^</a></b></span> <span class="reference-text"><cite class="citation web"><a rel="nofollow" class="external text" href="http://lists.apple.com/archives/Objc-language/2006/Aug/msg00018.html">"Re: Objective-C 2.0"</a>. Lists.apple.com<span class="reference-accessdate">. Retrieved <span class="nowrap">2010-05-30</span></span>.</cite><span title="ctx_ver=Z39.88-2004&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3AObjective-C&amp;rft.btitle=Re%3A+Objective-C+2.0&amp;rft.genre=unknown&amp;rft_id=http%3A%2F%2Flists.apple.com%2Farchives%2FObjc-language%2F2006%2FAug%2Fmsg00018.html&amp;rft.pub=Lists.apple.com&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook" class="Z3988"><span style="display:none;">&#160;</span></span></span></li>
<li id="cite_note-27"><span class="mw-cite-backlink"><b><a href="#cite_ref-27">^</a></b></span> <span class="reference-text"><cite class="citation web"><a rel="nofollow" class="external text" href="https://gcc.gnu.org/gcc-4.6/changes.html">"GCC 4.6 Release Series: Changes, New Features, and Fixes"</a>.</cite><span title="ctx_ver=Z39.88-2004&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3AObjective-C&amp;rft.btitle=GCC+4.6+Release+Series%3A+Changes%2C+New+Features%2C+and+Fixes&amp;rft.genre=unknown&amp;rft_id=https%3A%2F%2Fgcc.gnu.org%2Fgcc-4.6%2Fchanges.html&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook" class="Z3988"><span style="display:none;">&#160;</span></span></span></li>
<li id="cite_note-28"><span class="mw-cite-backlink"><b><a href="#cite_ref-28">^</a></b></span> <span class="reference-text"><a rel="nofollow" class="external text" href="http://developer.apple.com/library/mac/#documentation/Cocoa/Conceptual/GarbageCollection/Articles/gcAPI.html">Garbage Collection Programming Guide: Garbage Collection API</a> (Apple developer website - search for "__strong")</span></li>
<li id="cite_note-29"><span class="mw-cite-backlink"><b><a href="#cite_ref-29">^</a></b></span> <span class="reference-text"><cite class="citation web"><a rel="nofollow" class="external text" href="https://developer.apple.com/library/mac/#documentation/Cocoa/Conceptual/GarbageCollection/Introduction.html">"Garbage Collection Programming Guide: Introduction to Garbage Collection"</a>. Apple Inc. 2011-10-03.</cite><span title="ctx_ver=Z39.88-2004&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3AObjective-C&amp;rft.btitle=Garbage+Collection+Programming+Guide%3A+Introduction+to+Garbage+Collection&amp;rft.date=2011-10-03&amp;rft.genre=unknown&amp;rft_id=https%3A%2F%2Fdeveloper.apple.com%2Flibrary%2Fmac%2F%23documentation%2FCocoa%2FConceptual%2FGarbageCollection%2FIntroduction.html&amp;rft.pub=Apple+Inc.&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook" class="Z3988"><span style="display:none;">&#160;</span></span></span></li>
<li id="cite_note-30"><span class="mw-cite-backlink"><b><a href="#cite_ref-30">^</a></b></span> <span class="reference-text"><cite class="citation web"><a rel="nofollow" class="external text" href="https://web.archive.org/web/20100724195423/http://developer.apple.com/leopard/overview/objectivec2.html">"Leopard Technology Series for Developers: Objective-C 2.0 Overview"</a>. Apple Inc. 2007-11-06. Archived from <a rel="nofollow" class="external text" href="http://developer.apple.com/leopard/overview/objectivec2.html">the original</a> on 24 July 2010<span class="reference-accessdate">. Retrieved <span class="nowrap">2010-05-30</span></span>.</cite><span title="ctx_ver=Z39.88-2004&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3AObjective-C&amp;rft.btitle=Leopard+Technology+Series+for+Developers%3A+Objective-C+2.0+Overview&amp;rft.date=2007-11-06&amp;rft.genre=unknown&amp;rft_id=http%3A%2F%2Fdeveloper.apple.com%2Fleopard%2Foverview%2Fobjectivec2.html&amp;rft.pub=Apple+Inc.&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook" class="Z3988"><span style="display:none;">&#160;</span></span></span></li>
<li id="cite_note-31"><span class="mw-cite-backlink"><b><a href="#cite_ref-31">^</a></b></span> <span class="reference-text"><cite class="citation web"><a rel="nofollow" class="external text" href="http://developer.apple.com/library/mac/#releasenotes/ObjectiveC/RN-TransitioningToARC/Introduction/Introduction.html">"Transitioning to ARC Release Notes"</a>. Apple Inc. 2012-07-17<span class="reference-accessdate">. Retrieved <span class="nowrap">2012-08-26</span></span>.</cite><span title="ctx_ver=Z39.88-2004&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3AObjective-C&amp;rft.btitle=Transitioning+to+ARC+Release+Notes&amp;rft.date=2012-07-17&amp;rft.genre=unknown&amp;rft_id=http%3A%2F%2Fdeveloper.apple.com%2Flibrary%2Fmac%2F%23releasenotes%2FObjectiveC%2FRN-TransitioningToARC%2FIntroduction%2FIntroduction.html&amp;rft.pub=Apple+Inc.&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook" class="Z3988"><span style="display:none;">&#160;</span></span></span></li>
<li id="cite_note-32"><span class="mw-cite-backlink"><b><a href="#cite_ref-32">^</a></b></span> <span class="reference-text"><cite class="citation web">Mike Ash. <a rel="nofollow" class="external text" href="https://www.mikeash.com/pyblog/friday-qa-2013-09-27-arm64-and-you.html">"Friday Q&amp;A 2013-09-27: ARM64 and You"</a>. mikeash.com<span class="reference-accessdate">. Retrieved <span class="nowrap">2014-04-27</span></span>.</cite><span title="ctx_ver=Z39.88-2004&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3AObjective-C&amp;rft.au=Mike+Ash&amp;rft.btitle=Friday+Q%26A+2013-09-27%3A+ARM64+and+You&amp;rft.genre=unknown&amp;rft_id=https%3A%2F%2Fwww.mikeash.com%2Fpyblog%2Ffriday-qa-2013-09-27-arm64-and-you.html&amp;rft.pub=mikeash.com&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook" class="Z3988"><span style="display:none;">&#160;</span></span></span></li>
<li id="cite_note-33"><span class="mw-cite-backlink"><b><a href="#cite_ref-33">^</a></b></span> <span class="reference-text"><cite class="citation web"><a rel="nofollow" class="external text" href="http://www.sealiesoftware.com/blog/archive/2013/09/24/objc_explain_Non-pointer_isa.html">"Hamster Emporium: [objc explain]: Non-pointer isa"</a>. Sealiesoftware.com. 2013-09-24<span class="reference-accessdate">. Retrieved <span class="nowrap">2014-04-27</span></span>.</cite><span title="ctx_ver=Z39.88-2004&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3AObjective-C&amp;rft.btitle=Hamster+Emporium%3A+%5Bobjc+explain%26%2393%3B%3A+Non-pointer+isa&amp;rft.date=2013-09-24&amp;rft.genre=unknown&amp;rft_id=http%3A%2F%2Fwww.sealiesoftware.com%2Fblog%2Farchive%2F2013%2F09%2F24%2Fobjc_explain_Non-pointer_isa.html&amp;rft.pub=Sealiesoftware.com&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook" class="Z3988"><span style="display:none;">&#160;</span></span></span></li>
<li id="cite_note-34"><span class="mw-cite-backlink"><b><a href="#cite_ref-34">^</a></b></span> <span class="reference-text"><cite class="citation web">Apple, Inc. (2009). <a rel="nofollow" class="external text" href="http://developer.apple.com/mac/library/documentation/Cocoa/Conceptual/ObjectiveC/Articles/ocFastEnumeration.html">"Fast Enumeration"</a>. apple.com<span class="reference-accessdate">. Retrieved <span class="nowrap">2009-12-31</span></span>.</cite><span title="ctx_ver=Z39.88-2004&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3AObjective-C&amp;rft.au=Apple%2C+Inc.&amp;rft.btitle=Fast+Enumeration&amp;rft.date=2009&amp;rft.genre=unknown&amp;rft_id=http%3A%2F%2Fdeveloper.apple.com%2Fmac%2Flibrary%2Fdocumentation%2FCocoa%2FConceptual%2FObjectiveC%2FArticles%2FocFastEnumeration.html&amp;rft.pub=apple.com&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook" class="Z3988"><span style="display:none;">&#160;</span></span></span></li>
<li id="cite_note-35"><span class="mw-cite-backlink"><b><a href="#cite_ref-35">^</a></b></span> <span class="reference-text"><cite class="citation web">Free Software Foundation, Inc. (2011). <a rel="nofollow" class="external text" href="https://gcc.gnu.org/gcc-4.6/changes.html">"GCC 4.6 Release Series – Changes, New Features, and Fixes"</a>. <i>gcc.gnu.org</i><span class="reference-accessdate">. Retrieved <span class="nowrap">2013-11-27</span></span>.</cite><span title="ctx_ver=Z39.88-2004&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3AObjective-C&amp;rft.atitle=GCC+4.6+Release+Series+%93+Changes%2C+New+Features%2C+and+Fixes&amp;rft.au=Free+Software+Foundation%2C+Inc.&amp;rft.date=2011&amp;rft.genre=unknown&amp;rft_id=https%3A%2F%2Fgcc.gnu.org%2Fgcc-4.6%2Fchanges.html&amp;rft.jtitle=gcc.gnu.org&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Ajournal" class="Z3988"><span style="display:none;">&#160;</span></span></span></li>
<li id="cite_note-Blocks_requirements-36"><span class="mw-cite-backlink"><b><a href="#cite_ref-Blocks_requirements_36-0">^</a></b></span> <span class="reference-text"><cite class="citation web"><a rel="nofollow" class="external text" href="http://developer.apple.com/library/mac/#documentation/Cocoa/Conceptual/Blocks/Articles/00_Introduction.html">"Blocks Programming Topics – Mac Developer Library"</a>. Apple Inc. March 8, 2011<span class="reference-accessdate">. Retrieved <span class="nowrap">November 28,</span> 2012</span>.</cite><span title="ctx_ver=Z39.88-2004&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3AObjective-C&amp;rft.btitle=Blocks+Programming+Topics+%93+Mac+Developer+Library&amp;rft.date=2011-03-08&amp;rft.genre=unknown&amp;rft_id=http%3A%2F%2Fdeveloper.apple.com%2Flibrary%2Fmac%2F%23documentation%2FCocoa%2FConceptual%2FBlocks%2FArticles%2F00_Introduction.html&amp;rft.pub=Apple+Inc.&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook" class="Z3988"><span style="display:none;">&#160;</span></span></span></li>
<li id="cite_note-Transitioning_to_ARC-37"><span class="mw-cite-backlink"><b><a href="#cite_ref-Transitioning_to_ARC_37-0">^</a></b></span> <span class="reference-text"><cite class="citation web"><a rel="nofollow" class="external text" href="https://developer.apple.com/library/ios/#releasenotes/ObjectiveC/RN-TransitioningToARC/Introduction/Introduction.html">"Transitioning to ARC"</a>. Apple Inc<span class="reference-accessdate">. Retrieved <span class="nowrap">8 October</span> 2012</span>.</cite><span title="ctx_ver=Z39.88-2004&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3AObjective-C&amp;rft.btitle=Transitioning+to+ARC&amp;rft.genre=unknown&amp;rft_id=https%3A%2F%2Fdeveloper.apple.com%2Flibrary%2Fios%2F%23releasenotes%2FObjectiveC%2FRN-TransitioningToARC%2FIntroduction%2FIntroduction.html&amp;rft.pub=Apple+Inc.&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook" class="Z3988"><span style="display:none;">&#160;</span></span></span></li>
<li id="cite_note-Programming_with_Obj-C_.E2.80.93_Values_and_Collections-38"><span class="mw-cite-backlink">^ <a href="#cite_ref-Programming_with_Obj-C_.E2.80.93_Values_and_Collections_38-0"><sup><i><b>a</b></i></sup></a> <a href="#cite_ref-Programming_with_Obj-C_.E2.80.93_Values_and_Collections_38-1"><sup><i><b>b</b></i></sup></a></span> <span class="reference-text"><cite class="citation web"><a rel="nofollow" class="external text" href="https://developer.apple.com/library/ios/#documentation/Cocoa/Conceptual/ProgrammingWithObjectiveC/FoundationTypesandCollections/FoundationTypesandCollections.html">"Programming with Objective-C: Values and Collections"</a>. Apple Inc<span class="reference-accessdate">. Retrieved <span class="nowrap">8 October</span> 2012</span>.</cite><span title="ctx_ver=Z39.88-2004&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3AObjective-C&amp;rft.btitle=Programming+with+Objective-C%3A+Values+and+Collections&amp;rft.genre=unknown&amp;rft_id=https%3A%2F%2Fdeveloper.apple.com%2Flibrary%2Fios%2F%23documentation%2FCocoa%2FConceptual%2FProgrammingWithObjectiveC%2FFoundationTypesandCollections%2FFoundationTypesandCollections.html&amp;rft.pub=Apple+Inc.&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook" class="Z3988"><span style="display:none;">&#160;</span></span></span></li>
<li id="cite_note-ObjCLiterals-39"><span class="mw-cite-backlink"><b><a href="#cite_ref-ObjCLiterals_39-0">^</a></b></span> <span class="reference-text"><cite class="citation web"><a rel="nofollow" class="external text" href="http://clang.llvm.org/docs/ObjectiveCLiterals.html">"Objective-C Literals — Clang 3.5 documentation"</a>. Clang.llvm.org<span class="reference-accessdate">. Retrieved <span class="nowrap">2014-04-16</span></span>.</cite><span title="ctx_ver=Z39.88-2004&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3AObjective-C&amp;rft.btitle=Objective-C+Literals+%94+Clang+3.5+documentation&amp;rft.genre=unknown&amp;rft_id=http%3A%2F%2Fclang.llvm.org%2Fdocs%2FObjectiveCLiterals.html&amp;rft.pub=Clang.llvm.org&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook" class="Z3988"><span style="display:none;">&#160;</span></span></span></li>
<li id="cite_note-40"><span class="mw-cite-backlink"><b><a href="#cite_ref-40">^</a></b></span> <span class="reference-text"><cite class="citation"><i>Rhapsody Developer's Guide</i>, AP Professional, 1997</cite><span title="ctx_ver=Z39.88-2004&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3AObjective-C&amp;rft.btitle=Rhapsody+Developer%27s+Guide&amp;rft.date=1997&amp;rft.genre=book&amp;rft.pub=AP+Professional&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook" class="Z3988"><span style="display:none;">&#160;</span></span></span></li>
<li id="cite_note-41"><span class="mw-cite-backlink"><b><a href="#cite_ref-41">^</a></b></span> <span class="reference-text"><cite class="citation web"><a rel="nofollow" class="external text" href="http://users.pandora.be/stes/compiler.html">"Portable Object Compiler"</a>. Users.pandora.be. 1970-01-01<span class="reference-accessdate">. Retrieved <span class="nowrap">2010-05-30</span></span>.</cite><span title="ctx_ver=Z39.88-2004&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3AObjective-C&amp;rft.btitle=Portable+Object+Compiler&amp;rft.date=1970-01-01&amp;rft.genre=unknown&amp;rft_id=http%3A%2F%2Fusers.pandora.be%2Fstes%2Fcompiler.html&amp;rft.pub=Users.pandora.be&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook" class="Z3988"><span style="display:none;">&#160;</span></span></span></li>
<li id="cite_note-42"><span class="mw-cite-backlink"><b><a href="#cite_ref-42">^</a></b></span> <span class="reference-text"><cite class="citation web"><a rel="nofollow" class="external text" href="http://www.breadbox.com/downloads.asp?id=54&amp;category=GeosSDK&amp;maincategory=SDK">"Breadbox Computer Company LLC homepage"</a><span class="reference-accessdate">. Retrieved <span class="nowrap">8 December</span> 2010</span>.</cite><span title="ctx_ver=Z39.88-2004&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3AObjective-C&amp;rft.btitle=Breadbox+Computer+Company+LLC+homepage&amp;rft.genre=unknown&amp;rft_id=http%3A%2F%2Fwww.breadbox.com%2Fdownloads.asp%3Fid%3D54%26category%3DGeosSDK%26maincategory%3DSDK&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook" class="Z3988"><span style="display:none;">&#160;</span></span></span></li>
<li id="cite_note-43"><span class="mw-cite-backlink"><b><a href="#cite_ref-43">^</a></b></span> <span class="reference-text"><cite class="citation web">Apple, Inc. (August 22, 2006). <a rel="nofollow" class="external text" href="https://web.archive.org/web/20071024144921/http://www.apple.com/macosx/developertools/xcode.html">"Mac OS X Leopard – Xcode 3.0"</a>. apple.com. Archived from <a rel="nofollow" class="external text" href="http://www.apple.com/macosx/developertools/xcode.html">the original</a> on 24 October 2007<span class="reference-accessdate">. Retrieved <span class="nowrap">2006-08-22</span></span>.</cite><span title="ctx_ver=Z39.88-2004&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3AObjective-C&amp;rft.au=Apple%2C+Inc.&amp;rft.btitle=Mac+OS+X+Leopard+%93+Xcode+3.0&amp;rft.date=2006-08-22&amp;rft.genre=unknown&amp;rft_id=http%3A%2F%2Fwww.apple.com%2Fmacosx%2Fdevelopertools%2Fxcode.html&amp;rft.pub=apple.com&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook" class="Z3988"><span style="display:none;">&#160;</span></span></span></li>
<li id="cite_note-44"><span class="mw-cite-backlink"><b><a href="#cite_ref-44">^</a></b></span> <span class="reference-text"><cite class="citation web"><a rel="nofollow" class="external text" href="http://developer.apple.com/library/ios/#releasenotes/ObjectiveC/RN-TransitioningToARC/Introduction/Introduction.html">"Transitioning to ARC Release Notes"</a>. <i>iOS Developer Library</i>. Developer.apple.com<span class="reference-accessdate">. Retrieved <span class="nowrap">2014-04-16</span></span>.</cite><span title="ctx_ver=Z39.88-2004&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3AObjective-C&amp;rft.atitle=Transitioning+to+ARC+Release+Notes&amp;rft.genre=unknown&amp;rft_id=http%3A%2F%2Fdeveloper.apple.com%2Flibrary%2Fios%2F%23releasenotes%2FObjectiveC%2FRN-TransitioningToARC%2FIntroduction%2FIntroduction.html&amp;rft.jtitle=iOS+Developer+Library&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Ajournal" class="Z3988"><span style="display:none;">&#160;</span></span></span></li>
</ol>
</div>
<h2><span class="mw-headline" id="Further_reading">Further reading</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/w/index.php?title=Objective-C&amp;action=edit&amp;section=45" title="Edit section: Further reading">edit</a><span class="mw-editsection-bracket">]</span></span></h2>
<div class="refbegin" style="">
<ul>
<li><cite class="citation book">Cox, Brad J. (1991). <i>Object Oriented Programming: An Evolutionary Approach</i>. Addison Wesley. <a href="/wiki/International_Standard_Book_Number" title="International Standard Book Number">ISBN</a>&#160;<a href="/wiki/Special:BookSources/0-201-54834-8" title="Special:BookSources/0-201-54834-8">0-201-54834-8</a>.</cite><span title="ctx_ver=Z39.88-2004&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3AObjective-C&amp;rft.aufirst=Brad+J.&amp;rft.aulast=Cox&amp;rft.btitle=Object+Oriented+Programming%3A+An+Evolutionary+Approach&amp;rft.date=1991&amp;rft.genre=book&amp;rft.isbn=0-201-54834-8&amp;rft.pub=Addison+Wesley&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook" class="Z3988"><span style="display:none;">&#160;</span></span></li>
</ul>
</div>
<h2><span class="mw-headline" id="External_links">External links</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/w/index.php?title=Objective-C&amp;action=edit&amp;section=46" title="Edit section: External links">edit</a><span class="mw-editsection-bracket">]</span></span></h2>
<table role="presentation" class="mbox-small plainlinks sistersitebox" style="border:1px solid #aaa;background-color:#f9f9f9">
<tr>
<td class="mbox-image"><a href="/wiki/File:Wikibooks-logo-en-noslogan.svg" class="image"><img alt="" src="//upload.wikimedia.org/wikipedia/commons/thumb/d/df/Wikibooks-logo-en-noslogan.svg/40px-Wikibooks-logo-en-noslogan.svg.png" width="40" height="40" class="noviewer" srcset="//upload.wikimedia.org/wikipedia/commons/thumb/d/df/Wikibooks-logo-en-noslogan.svg/60px-Wikibooks-logo-en-noslogan.svg.png 1.5x, //upload.wikimedia.org/wikipedia/commons/thumb/d/df/Wikibooks-logo-en-noslogan.svg/80px-Wikibooks-logo-en-noslogan.svg.png 2x" data-file-width="400" data-file-height="400" /></a></td>
<td class="mbox-text plainlist">Wikibooks has a book on the topic of: <i><b><a href="https://en.wikibooks.org/wiki/Objective-C_Programming" class="extiw" title="wikibooks:Objective-C Programming">Objective-C Programming</a></b></i></td>
</tr>
</table>
<ul>
<li><a rel="nofollow" class="external text" href="http://developer.apple.com/library/mac/#documentation/Cocoa/Conceptual/ProgrammingWithObjectiveC/">Programming with Objective-C</a>, from Apple (2012-12-13)</li>
<li><i><a rel="nofollow" class="external text" href="https://developer.apple.com/library/mac/#documentation/Cocoa/Conceptual/ObjectiveC/Introduction/introObjectiveC.html">The Objective-C 2.0 Programming Language</a></i>, from Apple (2011-10-11)</li>
<li><i><a rel="nofollow" class="external text" href="https://developer.apple.com/library/mac/#documentation/Cocoa/Conceptual/ObjCRuntimeGuide/Introduction/Introduction.html">Objective-C Runtime Programming Guide</a></i>, from Apple (2009-10-19)</li>
<li><a rel="nofollow" class="external text" href="https://www.gnu.org/software/gnustep/resources/documentation/Developer/Base/ProgrammingManual/manual_toc.html">Objective-C GNUstep Base Programming Manual</a></li>
<li><a rel="nofollow" class="external text" href="http://virtualschool.edu/objectivec/">Objective-C by Brad Cox</a></li>
<li><a rel="nofollow" class="external text" href="http://www.faqs.org/faqs/computer-lang/Objective-C/faq/">Objective-C FAQ</a></li>
</ul>
<div role="navigation" class="navbox" aria-labelledby="C_programming_language" style="padding:3px">
<table class="nowraplinks hlist collapsible autocollapse navbox-inner" style="border-spacing:0;background:transparent;color:inherit">
<tr>
<th scope="col" class="navbox-title" colspan="2">
<div class="plainlinks hlist navbar mini">
<ul>
<li class="nv-view"><a href="/wiki/Template:C_programming_language" title="Template:C programming language"><abbr title="View this template" style=";;background:none transparent;border:none;">v</abbr></a></li>
<li class="nv-talk"><a href="/wiki/Template_talk:C_programming_language" title="Template talk:C programming language"><abbr title="Discuss this template" style=";;background:none transparent;border:none;">t</abbr></a></li>
<li class="nv-edit"><a class="external text" href="//en.wikipedia.org/w/index.php?title=Template:C_programming_language&amp;action=edit"><abbr title="Edit this template" style=";;background:none transparent;border:none;">e</abbr></a></li>
</ul>
</div>
<div id="C_programming_language" style="font-size:114%"><a href="/wiki/C_(programming_language)" title="C (programming language)">C programming language</a></div>
</th>
</tr>
<tr style="height:2px">
<td colspan="2"></td>
</tr>
<tr>
<td class="navbox-abovebelow" colspan="2">
<div>
<ul>
<li><a href="/wiki/ANSI_C" title="ANSI C">ANSI C</a>
<ul>
<li><a href="/wiki/ANSI_C#C89_and_C90" title="ANSI C">C89 and C90</a></li>
</ul>
</li>
<li><a href="/wiki/C99" title="C99">C99</a></li>
<li><a href="/wiki/C11_(C_standard_revision)" title="C11 (C standard revision)">C11</a></li>
<li><a href="/wiki/Embedded_C" title="Embedded C">Embedded C</a></li>
<li><a href="/wiki/MISRA_C" title="MISRA C">MISRA C</a></li>
</ul>
</div>
</td>
</tr>
<tr style="height:2px">
<td colspan="2"></td>
</tr>
<tr>
<th scope="row" class="navbox-group">Features</th>
<td class="navbox-list navbox-odd" style="text-align:left;border-left-width:2px;border-left-style:solid;width:100%;padding:0px">
<div style="padding:0em 0.25em">
<ul>
<li><a href="/wiki/Subroutine" title="Subroutine">Functions</a></li>
<li><a href="/wiki/Include_directive#C" title="Include directive">Header files</a></li>
<li><a href="/wiki/Category:C_libraries" title="Category:C libraries">Libraries</a></li>
<li><a href="/wiki/Operators_in_C_and_C%2B%2B" title="Operators in C and C++">Operators</a></li>
<li><a href="/wiki/C_string_handling" title="C string handling">String</a></li>
<li><a href="/wiki/C_syntax" title="C syntax">Syntax</a></li>
<li><a href="/wiki/C_preprocessor" title="C preprocessor">Preprocessor</a></li>
<li><a href="/wiki/C_data_types" title="C data types">Data types</a></li>
</ul>
</div>
</td>
</tr>
<tr style="height:2px">
<td colspan="2"></td>
</tr>
<tr>
<th scope="row" class="navbox-group"><a href="/wiki/C_standard_library" title="C standard library">Standard library<br />
functions</a></th>
<td class="navbox-list navbox-even" style="text-align:left;border-left-width:2px;border-left-style:solid;width:100%;padding:0px">
<div style="padding:0em 0.25em">
<ul>
<li><a href="/wiki/C_character_classification" title="C character classification">Char (ctype.h)</a></li>
<li><a href="/wiki/C_file_input/output" title="C file input/output">File I/O (stdio.h)</a></li>
<li><a href="/wiki/C_mathematical_functions" title="C mathematical functions">Math (math.h)</a></li>
<li><a href="/wiki/C_dynamic_memory_allocation" title="C dynamic memory allocation">Dynamic memory (stdlib.h)</a></li>
<li><a href="/wiki/C_string_handling" title="C string handling">String (string.h)</a></li>
<li><a href="/wiki/C_date_and_time_functions" title="C date and time functions">Time (time.h)</a></li>
<li><a href="/wiki/Stdarg.h" title="Stdarg.h">Variadic (stdarg.h)</a></li>
<li><a href="/wiki/C_POSIX_library" title="C POSIX library">POSIX</a></li>
</ul>
</div>
</td>
</tr>
<tr style="height:2px">
<td colspan="2"></td>
</tr>
<tr>
<th scope="row" class="navbox-group"><a href="/wiki/Category:C_standard_library" title="Category:C standard library">Standard<br />
libraries</a></th>
<td class="navbox-list navbox-odd" style="text-align:left;border-left-width:2px;border-left-style:solid;width:100%;padding:0px">
<div style="padding:0em 0.25em">
<ul>
<li><a href="/wiki/Bionic_(software)" title="Bionic (software)">Bionic</a>
<ul>
<li><a href="/wiki/Hybris_(software)" title="Hybris (software)">libhybris</a></li>
</ul>
</li>
<li><a href="/wiki/Dietlibc" title="Dietlibc">dietlibc</a></li>
<li><a href="/wiki/Embedded_GLIBC" title="Embedded GLIBC">EGLIBC</a></li>
<li><a href="/wiki/GNU_C_Library" title="GNU C Library">glibc</a></li>
<li><a href="/wiki/Klibc" title="Klibc">klibc</a></li>
<li><a href="/wiki/Microsoft_Windows_library_files#MSVCRT.DLL.2C_MSVCPP.DLL_and_CRTDLL.DLL" title="Microsoft Windows library files">Microsoft Run-time Library</a></li>
<li><a href="/wiki/Musl" title="Musl">musl</a></li>
<li><a href="/wiki/Newlib" title="Newlib">Newlib</a></li>
<li><a href="/wiki/UClibc" title="UClibc">uClibc</a></li>
<li><a href="/wiki/BSD_libc" class="mw-redirect" title="BSD libc">BSD libc</a></li>
</ul>
</div>
</td>
</tr>
<tr style="height:2px">
<td colspan="2"></td>
</tr>
<tr>
<th scope="row" class="navbox-group"><a href="/wiki/Category:C_compilers" title="Category:C compilers">Compilers</a></th>
<td class="navbox-list navbox-even" style="text-align:left;border-left-width:2px;border-left-style:solid;width:100%;padding:0px">
<div style="padding:0em 0.25em">
<ul>
<li><a href="/wiki/List_of_compilers#C_compilers" title="List of compilers">Comparison of compilers</a></li>
<li><a href="/wiki/Amsterdam_Compiler_Kit" title="Amsterdam Compiler Kit">ACK</a></li>
<li><a href="/wiki/Borland_Turbo_C" title="Borland Turbo C">Borland Turbo C</a></li>
<li><a href="/wiki/Clang" title="Clang">Clang</a></li>
<li><a href="/wiki/GNU_Compiler_Collection" title="GNU Compiler Collection">GCC</a></li>
<li><a href="/wiki/Intel_C%2B%2B_Compiler" title="Intel C++ Compiler">ICC</a></li>
<li><a href="/wiki/LCC_(compiler)" title="LCC (compiler)">LCC</a></li>
<li><a href="/wiki/Pelles_C" title="Pelles C">Pelles C</a></li>
<li><a href="/wiki/Portable_C_Compiler" title="Portable C Compiler">PCC</a></li>
<li><a href="/wiki/Small_Device_C_Compiler" title="Small Device C Compiler">SDCC</a></li>
<li><a href="/wiki/Tiny_C_Compiler" title="Tiny C Compiler">TCC</a></li>
<li><a href="/wiki/Microsoft_Visual_Studio" title="Microsoft Visual Studio">Microsoft Visual Studio</a> / <a href="/wiki/Microsoft_Visual_Studio_Express" title="Microsoft Visual Studio Express">Express</a> / <a href="/wiki/Visual_C%2B%2B" title="Visual C++">C++</a></li>
<li><a href="/wiki/Watcom_C/C%2B%2B_compiler" class="mw-redirect" title="Watcom C/C++ compiler">Watcom C/C++</a></li>
</ul>
</div>
</td>
</tr>
<tr style="height:2px">
<td colspan="2"></td>
</tr>
<tr>
<th scope="row" class="navbox-group"><a href="/wiki/Category:Integrated_development_environments" title="Category:Integrated development environments">IDEs</a></th>
<td class="navbox-list navbox-odd" style="text-align:left;border-left-width:2px;border-left-style:solid;width:100%;padding:0px">
<div style="padding:0em 0.25em">
<ul>
<li><a href="/wiki/Comparison_of_integrated_development_environments#C.2FC.2B.2B" title="Comparison of integrated development environments">Comparison of IDEs</a></li>
<li><a href="/wiki/Anjuta" title="Anjuta">Anjuta</a></li>
<li><a href="/wiki/Code::Blocks" title="Code::Blocks">Code::Blocks</a></li>
<li><a href="/wiki/CodeLite" title="CodeLite">CodeLite</a></li>
<li><a href="/wiki/Eclipse_(software)" title="Eclipse (software)">Eclipse</a></li>
<li><a href="/wiki/Geany" title="Geany">Geany</a></li>
<li><a href="/wiki/Microsoft_Visual_Studio" title="Microsoft Visual Studio">Microsoft Visual Studio</a></li>
<li><a href="/wiki/NetBeans" title="NetBeans">NetBeans</a></li>
</ul>
</div>
</td>
</tr>
<tr style="height:2px">
<td colspan="2"></td>
</tr>
<tr>
<th scope="row" class="navbox-group"><a href="/wiki/Category:Comparison_of_individual_programming_languages" title="Category:Comparison of individual programming languages">Comparison with<br />
other languages</a></th>
<td class="navbox-list navbox-even" style="text-align:left;border-left-width:2px;border-left-style:solid;width:100%;padding:0px">
<div style="padding:0em 0.25em">
<ul>
<li><a href="/wiki/Compatibility_of_C_and_C%2B%2B" title="Compatibility of C and C++">Compatibility of C and C++</a></li>
<li>Comparison with <a href="/wiki/Embedded_C" title="Embedded C">Embedded C</a></li>
<li><a href="/wiki/Comparison_of_Pascal_and_C" title="Comparison of Pascal and C">Comparison with Pascal</a></li>
<li><a href="/wiki/Comparison_of_programming_languages" title="Comparison of programming languages">Comparison of programming languages</a></li>
</ul>
</div>
</td>
</tr>
<tr style="height:2px">
<td colspan="2"></td>
</tr>
<tr>
<th scope="row" class="navbox-group">Descendant<br />
languages</th>
<td class="navbox-list navbox-odd" style="text-align:left;border-left-width:2px;border-left-style:solid;width:100%;padding:0px">
<div style="padding:0em 0.25em">
<ul>
<li><a href="/wiki/C%2B%2B" title="C++">C++</a></li>
<li><a href="/wiki/C_Sharp_(programming_language)" title="C Sharp (programming language)">C#</a></li>
<li><a href="/wiki/D_(programming_language)" title="D (programming language)">D</a></li>
<li><strong class="selflink">Objective-C</strong></li>
<li><a href="/wiki/Alef_(programming_language)" title="Alef (programming language)">Alef</a></li>
<li><a href="/wiki/Limbo_(programming_language)" title="Limbo (programming language)">Limbo</a></li>
<li><a href="/wiki/Go_(programming_language)" title="Go (programming language)">Go</a></li>
<li><a href="/wiki/Vala_(programming_language)" title="Vala (programming language)">Vala</a></li>
</ul>
</div>
</td>
</tr>
<tr style="height:2px">
<td colspan="2"></td>
</tr>
<tr>
<td class="navbox-abovebelow" colspan="2">
<div>
<ul>
<li><img alt="Category" src="//upload.wikimedia.org/wikipedia/en/thumb/4/48/Folder_Hexagonal_Icon.svg/16px-Folder_Hexagonal_Icon.svg.png" title="Category" width="16" height="14" srcset="//upload.wikimedia.org/wikipedia/en/thumb/4/48/Folder_Hexagonal_Icon.svg/24px-Folder_Hexagonal_Icon.svg.png 1.5x, //upload.wikimedia.org/wikipedia/en/thumb/4/48/Folder_Hexagonal_Icon.svg/32px-Folder_Hexagonal_Icon.svg.png 2x" data-file-width="36" data-file-height="31" /> <b><a href="/wiki/Category:C_(programming_language)" title="Category:C (programming language)">Category</a></b></li>
</ul>
</div>
</td>
</tr>
</table>
</div>
<div role="navigation" class="navbox" aria-label="Navbox" style="padding:3px">
<table class="nowraplinks hlist navbox-inner" style="border-spacing:0;background:transparent;color:inherit">
<tr>
<th scope="row" class="navbox-group"><a href="/wiki/Help:Authority_control" title="Help:Authority control">Authority control</a></th>
<td class="navbox-list navbox-odd" style="text-align:left;border-left-width:2px;border-left-style:solid;width:100%;padding:0px">
<div style="padding:0em 0.25em">
<ul>
<li><span style="white-space:nowrap;"><a href="/wiki/Integrated_Authority_File" title="Integrated Authority File">GND</a>: <span class="uid"><a rel="nofollow" class="external text" href="http://d-nb.info/gnd/4335874-3">4335874-3</a></span></span></li>
</ul>
</div>
</td>
</tr>
</table>
</div>


<!-- 
NewPP limit report
Parsed by mw1219
Cached time: 20170202130404
Cache expiry: 86400
Dynamic content: true
CPU time usage: 0.472 seconds
Real time usage: 0.576 seconds
Preprocessor visited node count: 3349/1000000
Preprocessor generated node count: 0/1500000
Post‐expand include size: 109158/2097152 bytes
Template argument size: 4134/2097152 bytes
Highest expansion depth: 17/40
Expensive parser function count: 8/500
Lua time usage: 0.229/10.000 seconds
Lua memory usage: 5.14 MB/50 MB
-->
<!--
Transclusion expansion time report (%,ms,calls,template)
100.00%  471.080      1 -total
 42.95%  202.340      1 Template:Reflist
 28.66%  135.015     34 Template:Cite_web
 15.22%   71.685      2 Template:Infobox
 13.83%   65.130      1 Template:Infobox_programming_language
 13.70%   64.523      3 Template:Citation_needed
 12.21%   57.526      3 Template:Fix
  6.07%   28.606      6 Template:Category_handler
  5.78%   27.221      1 Template:Authority_control
  5.49%   25.859      3 Template:Delink
-->

<!-- Saved in parser cache with key enwiki:pcache:idhash:39809523-0!*!0!!en!4!* and timestamp 20170202130403 and revision id 759531147
 -->
<noscript><img src="//en.wikipedia.org/wiki/Special:CentralAutoLogin/start?type=1x1" alt="" title="" width="1" height="1" style="border: none; position: absolute;" /></noscript></div>					<div class="printfooter">
						Retrieved from "<a dir="ltr" href="https://en.wikipedia.org/w/index.php?title=Objective-C&amp;oldid=759531147">https://en.wikipedia.org/w/index.php?title=Objective-C&amp;oldid=759531147</a>"					</div>
				<div id="catlinks" class="catlinks" data-mw="interface"><div id="mw-normal-catlinks" class="mw-normal-catlinks"><a href="/wiki/Help:Category" title="Help:Category">Categories</a>: <ul><li><a href="/wiki/Category:C_programming_language_family" title="Category:C programming language family">C programming language family</a></li><li><a href="/wiki/Category:Class-based_programming_languages" title="Category:Class-based programming languages">Class-based programming languages</a></li><li><a href="/wiki/Category:Dynamically_typed_programming_languages" title="Category:Dynamically typed programming languages">Dynamically typed programming languages</a></li><li><a href="/wiki/Category:GNUstep" title="Category:GNUstep">GNUstep</a></li><li><a href="/wiki/Category:NeXT" title="Category:NeXT">NeXT</a></li><li><a href="/wiki/Category:Object-oriented_programming_languages" title="Category:Object-oriented programming languages">Object-oriented programming languages</a></li><li><a href="/wiki/Category:Objective-C" title="Category:Objective-C">Objective-C</a></li><li><a href="/wiki/Category:Programming_languages_created_in_1986" title="Category:Programming languages created in 1986">Programming languages created in 1986</a></li></ul></div><div id="mw-hidden-catlinks" class="mw-hidden-catlinks mw-hidden-cats-hidden">Hidden categories: <ul><li><a href="/wiki/Category:All_articles_with_unsourced_statements" title="Category:All articles with unsourced statements">All articles with unsourced statements</a></li><li><a href="/wiki/Category:Articles_with_unsourced_statements_from_April_2013" title="Category:Articles with unsourced statements from April 2013">Articles with unsourced statements from April 2013</a></li><li><a href="/wiki/Category:Articles_with_unsourced_statements_from_August_2015" title="Category:Articles with unsourced statements from August 2015">Articles with unsourced statements from August 2015</a></li><li><a href="/wiki/Category:Articles_with_unsourced_statements_from_November_2013" title="Category:Articles with unsourced statements from November 2013">Articles with unsourced statements from November 2013</a></li><li><a href="/wiki/Category:Articles_needing_additional_references_from_November_2012" title="Category:Articles needing additional references from November 2012">Articles needing additional references from November 2012</a></li><li><a href="/wiki/Category:All_articles_needing_additional_references" title="Category:All articles needing additional references">All articles needing additional references</a></li><li><a href="/wiki/Category:Articles_needing_additional_references_from_December_2011" title="Category:Articles needing additional references from December 2011">Articles needing additional references from December 2011</a></li><li><a href="/wiki/Category:Use_dmy_dates_from_January_2012" title="Category:Use dmy dates from January 2012">Use dmy dates from January 2012</a></li><li><a href="/wiki/Category:Wikipedia_articles_with_GND_identifiers" title="Category:Wikipedia articles with GND identifiers">Wikipedia articles with GND identifiers</a></li></ul></div></div>				<div class="visualClear"></div>
							</div>
		</div>
		<div id="mw-navigation">
			<h2>Navigation menu</h2>

			<div id="mw-head">
									<div id="p-personal" role="navigation" class="" aria-labelledby="p-personal-label">
						<h3 id="p-personal-label">Personal tools</h3>
						<ul>
							<li id="pt-anonuserpage">Not logged in</li><li id="pt-anontalk"><a href="/wiki/Special:MyTalk" title="Discussion about edits from this IP address [n]" accesskey="n">Talk</a></li><li id="pt-anoncontribs"><a href="/wiki/Special:MyContributions" title="A list of edits made from this IP address [y]" accesskey="y">Contributions</a></li><li id="pt-createaccount"><a href="/w/index.php?title=Special:CreateAccount&amp;returnto=Objective-C" title="You are encouraged to create an account and log in; however, it is not mandatory">Create account</a></li><li id="pt-login"><a href="/w/index.php?title=Special:UserLogin&amp;returnto=Objective-C" title="You're encouraged to log in; however, it's not mandatory. [o]" accesskey="o">Log in</a></li>						</ul>
					</div>
									<div id="left-navigation">
										<div id="p-namespaces" role="navigation" class="vectorTabs" aria-labelledby="p-namespaces-label">
						<h3 id="p-namespaces-label">Namespaces</h3>
						<ul>
															<li  id="ca-nstab-main" class="selected"><span><a href="/wiki/Objective-C"  title="View the content page [c]" accesskey="c">Article</a></span></li>
															<li  id="ca-talk"><span><a href="/wiki/Talk:Objective-C"  title="Discussion about the content page [t]" accesskey="t" rel="discussion">Talk</a></span></li>
													</ul>
					</div>
										<div id="p-variants" role="navigation" class="vectorMenu emptyPortlet" aria-labelledby="p-variants-label">
												<h3 id="p-variants-label">
							<span>Variants</span><a href="#"></a>
						</h3>

						<div class="menu">
							<ul>
															</ul>
						</div>
					</div>
									</div>
				<div id="right-navigation">
										<div id="p-views" role="navigation" class="vectorTabs" aria-labelledby="p-views-label">
						<h3 id="p-views-label">Views</h3>
						<ul>
															<li id="ca-view" class="selected"><span><a href="/wiki/Objective-C" >Read</a></span></li>
															<li id="ca-edit"><span><a href="/w/index.php?title=Objective-C&amp;action=edit"  title="Edit this page [e]" accesskey="e">Edit</a></span></li>
															<li id="ca-history" class="collapsible"><span><a href="/w/index.php?title=Objective-C&amp;action=history"  title="Past revisions of this page [h]" accesskey="h">View history</a></span></li>
													</ul>
					</div>
										<div id="p-cactions" role="navigation" class="vectorMenu emptyPortlet" aria-labelledby="p-cactions-label">
						<h3 id="p-cactions-label"><span>More</span><a href="#"></a></h3>

						<div class="menu">
							<ul>
															</ul>
						</div>
					</div>
										<div id="p-search" role="search">
						<h3>
							<label for="searchInput">Search</label>
						</h3>

						<form action="/w/index.php" id="searchform">
							<div id="simpleSearch">
							<input type="search" name="search" placeholder="Search Wikipedia" title="Search Wikipedia [f]" accesskey="f" id="searchInput"/><input type="hidden" value="Special:Search" name="title"/><input type="submit" name="fulltext" value="Search" title="Search Wikipedia for this text" id="mw-searchButton" class="searchButton mw-fallbackSearchButton"/><input type="submit" name="go" value="Go" title="Go to a page with this exact name if it exists" id="searchButton" class="searchButton"/>							</div>
						</form>
					</div>
									</div>
			</div>
			<div id="mw-panel">
				<div id="p-logo" role="banner"><a class="mw-wiki-logo" href="/wiki/Main_Page"  title="Visit the main page"></a></div>
						<div class="portal" role="navigation" id='p-navigation' aria-labelledby='p-navigation-label'>
			<h3 id='p-navigation-label'>Navigation</h3>

			<div class="body">
									<ul>
						<li id="n-mainpage-description"><a href="/wiki/Main_Page" title="Visit the main page [z]" accesskey="z">Main page</a></li><li id="n-contents"><a href="/wiki/Portal:Contents" title="Guides to browsing Wikipedia">Contents</a></li><li id="n-featuredcontent"><a href="/wiki/Portal:Featured_content" title="Featured content – the best of Wikipedia">Featured content</a></li><li id="n-currentevents"><a href="/wiki/Portal:Current_events" title="Find background information on current events">Current events</a></li><li id="n-randompage"><a href="/wiki/Special:Random" title="Load a random article [x]" accesskey="x">Random article</a></li><li id="n-sitesupport"><a href="https://donate.wikimedia.org/wiki/Special:FundraiserRedirector?utm_source=donate&amp;utm_medium=sidebar&amp;utm_campaign=C13_en.wikipedia.org&amp;uselang=en" title="Support us">Donate to Wikipedia</a></li><li id="n-shoplink"><a href="//shop.wikimedia.org" title="Visit the Wikipedia store">Wikipedia store</a></li>					</ul>
							</div>
		</div>
			<div class="portal" role="navigation" id='p-interaction' aria-labelledby='p-interaction-label'>
			<h3 id='p-interaction-label'>Interaction</h3>

			<div class="body">
									<ul>
						<li id="n-help"><a href="/wiki/Help:Contents" title="Guidance on how to use and edit Wikipedia">Help</a></li><li id="n-aboutsite"><a href="/wiki/Wikipedia:About" title="Find out about Wikipedia">About Wikipedia</a></li><li id="n-portal"><a href="/wiki/Wikipedia:Community_portal" title="About the project, what you can do, where to find things">Community portal</a></li><li id="n-recentchanges"><a href="/wiki/Special:RecentChanges" title="A list of recent changes in the wiki [r]" accesskey="r">Recent changes</a></li><li id="n-contactpage"><a href="//en.wikipedia.org/wiki/Wikipedia:Contact_us" title="How to contact Wikipedia">Contact page</a></li>					</ul>
							</div>
		</div>
			<div class="portal" role="navigation" id='p-tb' aria-labelledby='p-tb-label'>
			<h3 id='p-tb-label'>Tools</h3>

			<div class="body">
									<ul>
						<li id="t-whatlinkshere"><a href="/wiki/Special:WhatLinksHere/Objective-C" title="List of all English Wikipedia pages containing links to this page [j]" accesskey="j">What links here</a></li><li id="t-recentchangeslinked"><a href="/wiki/Special:RecentChangesLinked/Objective-C" rel="nofollow" title="Recent changes in pages linked from this page [k]" accesskey="k">Related changes</a></li><li id="t-upload"><a href="/wiki/Wikipedia:File_Upload_Wizard" title="Upload files [u]" accesskey="u">Upload file</a></li><li id="t-specialpages"><a href="/wiki/Special:SpecialPages" title="A list of all special pages [q]" accesskey="q">Special pages</a></li><li id="t-permalink"><a href="/w/index.php?title=Objective-C&amp;oldid=759531147" title="Permanent link to this revision of the page">Permanent link</a></li><li id="t-info"><a href="/w/index.php?title=Objective-C&amp;action=info" title="More information about this page">Page information</a></li><li id="t-wikibase"><a href="https://www.wikidata.org/wiki/Q188531" title="Link to connected data repository item [g]" accesskey="g">Wikidata item</a></li><li id="t-cite"><a href="/w/index.php?title=Special:CiteThisPage&amp;page=Objective-C&amp;id=759531147" title="Information on how to cite this page">Cite this page</a></li>					</ul>
							</div>
		</div>
			<div class="portal" role="navigation" id='p-coll-print_export' aria-labelledby='p-coll-print_export-label'>
			<h3 id='p-coll-print_export-label'>Print/export</h3>

			<div class="body">
									<ul>
						<li id="coll-create_a_book"><a href="/w/index.php?title=Special:Book&amp;bookcmd=book_creator&amp;referer=Objective-C">Create a book</a></li><li id="coll-download-as-rdf2latex"><a href="/w/index.php?title=Special:Book&amp;bookcmd=render_article&amp;arttitle=Objective-C&amp;returnto=Objective-C&amp;oldid=759531147&amp;writer=rdf2latex">Download as PDF</a></li><li id="t-print"><a href="/w/index.php?title=Objective-C&amp;printable=yes" title="Printable version of this page [p]" accesskey="p">Printable version</a></li>					</ul>
							</div>
		</div>
			<div class="portal" role="navigation" id='p-wikibase-otherprojects' aria-labelledby='p-wikibase-otherprojects-label'>
			<h3 id='p-wikibase-otherprojects-label'>In other projects</h3>

			<div class="body">
									<ul>
						<li class="wb-otherproject-link wb-otherproject-commons"><a href="https://commons.wikimedia.org/wiki/Category:Objective-C" hreflang="en">Wikimedia Commons</a></li><li class="wb-otherproject-link wb-otherproject-wikibooks"><a href="https://en.wikibooks.org/wiki/Objective-C_Programming" hreflang="en">Wikibooks</a></li>					</ul>
							</div>
		</div>
			<div class="portal" role="navigation" id='p-lang' aria-labelledby='p-lang-label'>
			<h3 id='p-lang-label'>Languages</h3>

			<div class="body">
									<ul>
						<li class="interlanguage-link interwiki-ar"><a href="https://ar.wikipedia.org/wiki/%D8%B3%D9%8A-%D8%A7%D9%84%D9%83%D8%A7%D8%A6%D9%86%D9%8A%D8%A9" title="سي-الكائنية – Arabic" lang="ar" hreflang="ar" class="interlanguage-link-target">العربية</a></li><li class="interlanguage-link interwiki-az"><a href="https://az.wikipedia.org/wiki/Objective-C" title="Objective-C – Azerbaijani" lang="az" hreflang="az" class="interlanguage-link-target">Azərbaycanca</a></li><li class="interlanguage-link interwiki-bn"><a href="https://bn.wikipedia.org/wiki/%E0%A6%85%E0%A6%AC%E0%A6%9C%E0%A7%87%E0%A6%95%E0%A7%8D%E0%A6%9F%E0%A6%BF%E0%A6%AD_%E0%A6%B8%E0%A6%BF" title="অবজেক্টিভ সি – Bangla" lang="bn" hreflang="bn" class="interlanguage-link-target">বাংলা</a></li><li class="interlanguage-link interwiki-zh-min-nan"><a href="https://zh-min-nan.wikipedia.org/wiki/Objective-C" title="Objective-C – Chinese (Min Nan)" lang="zh-min-nan" hreflang="zh-min-nan" class="interlanguage-link-target">Bân-lâm-gú</a></li><li class="interlanguage-link interwiki-bg"><a href="https://bg.wikipedia.org/wiki/Objective-C" title="Objective-C – Bulgarian" lang="bg" hreflang="bg" class="interlanguage-link-target">Български</a></li><li class="interlanguage-link interwiki-ca"><a href="https://ca.wikipedia.org/wiki/Objective-C" title="Objective-C – Catalan" lang="ca" hreflang="ca" class="interlanguage-link-target">Català</a></li><li class="interlanguage-link interwiki-cs"><a href="https://cs.wikipedia.org/wiki/Objective-C" title="Objective-C – Czech" lang="cs" hreflang="cs" class="interlanguage-link-target">Čeština</a></li><li class="interlanguage-link interwiki-da"><a href="https://da.wikipedia.org/wiki/Objective-C" title="Objective-C – Danish" lang="da" hreflang="da" class="interlanguage-link-target">Dansk</a></li><li class="interlanguage-link interwiki-de"><a href="https://de.wikipedia.org/wiki/Objective-C" title="Objective-C – German" lang="de" hreflang="de" class="interlanguage-link-target">Deutsch</a></li><li class="interlanguage-link interwiki-es"><a href="https://es.wikipedia.org/wiki/Objective-C" title="Objective-C – Spanish" lang="es" hreflang="es" class="interlanguage-link-target">Español</a></li><li class="interlanguage-link interwiki-eo"><a href="https://eo.wikipedia.org/wiki/Objective-C" title="Objective-C – Esperanto" lang="eo" hreflang="eo" class="interlanguage-link-target">Esperanto</a></li><li class="interlanguage-link interwiki-fa"><a href="https://fa.wikipedia.org/wiki/%D8%A2%D8%A8%D8%AC%DA%A9%D8%AA%DB%8C%D9%88-%D8%B3%DB%8C" title="آبجکتیو-سی – Persian" lang="fa" hreflang="fa" class="interlanguage-link-target">فارسی</a></li><li class="interlanguage-link interwiki-fr"><a href="https://fr.wikipedia.org/wiki/Objective-C" title="Objective-C – French" lang="fr" hreflang="fr" class="interlanguage-link-target">Français</a></li><li class="interlanguage-link interwiki-gl"><a href="https://gl.wikipedia.org/wiki/Objective-C" title="Objective-C – Galician" lang="gl" hreflang="gl" class="interlanguage-link-target">Galego</a></li><li class="interlanguage-link interwiki-ko"><a href="https://ko.wikipedia.org/wiki/%EC%98%A4%EB%B8%8C%EC%A0%9D%ED%8B%B0%EB%B8%8C-C" title="오브젝티브-C – Korean" lang="ko" hreflang="ko" class="interlanguage-link-target">한국어</a></li><li class="interlanguage-link interwiki-hy"><a href="https://hy.wikipedia.org/wiki/Objective-C" title="Objective-C – Armenian" lang="hy" hreflang="hy" class="interlanguage-link-target">Հայերեն</a></li><li class="interlanguage-link interwiki-it"><a href="https://it.wikipedia.org/wiki/Objective-C" title="Objective-C – Italian" lang="it" hreflang="it" class="interlanguage-link-target">Italiano</a></li><li class="interlanguage-link interwiki-he"><a href="https://he.wikipedia.org/wiki/Objective-C" title="Objective-C – Hebrew" lang="he" hreflang="he" class="interlanguage-link-target">עברית</a></li><li class="interlanguage-link interwiki-ka"><a href="https://ka.wikipedia.org/wiki/Objective-C" title="Objective-C – Georgian" lang="ka" hreflang="ka" class="interlanguage-link-target">ქართული</a></li><li class="interlanguage-link interwiki-kk"><a href="https://kk.wikipedia.org/wiki/Objective-C" title="Objective-C – Kazakh" lang="kk" hreflang="kk" class="interlanguage-link-target">Қазақша</a></li><li class="interlanguage-link interwiki-hu"><a href="https://hu.wikipedia.org/wiki/Objective-C" title="Objective-C – Hungarian" lang="hu" hreflang="hu" class="interlanguage-link-target">Magyar</a></li><li class="interlanguage-link interwiki-nl"><a href="https://nl.wikipedia.org/wiki/Objective-C" title="Objective-C – Dutch" lang="nl" hreflang="nl" class="interlanguage-link-target">Nederlands</a></li><li class="interlanguage-link interwiki-ja"><a href="https://ja.wikipedia.org/wiki/Objective-C" title="Objective-C – Japanese" lang="ja" hreflang="ja" class="interlanguage-link-target">日本語</a></li><li class="interlanguage-link interwiki-no"><a href="https://no.wikipedia.org/wiki/Objective-C" title="Objective-C – Norwegian" lang="no" hreflang="no" class="interlanguage-link-target">Norsk bokmål</a></li><li class="interlanguage-link interwiki-pl"><a href="https://pl.wikipedia.org/wiki/Objective-C" title="Objective-C – Polish" lang="pl" hreflang="pl" class="interlanguage-link-target">Polski</a></li><li class="interlanguage-link interwiki-pt"><a href="https://pt.wikipedia.org/wiki/Objective-C" title="Objective-C – Portuguese" lang="pt" hreflang="pt" class="interlanguage-link-target">Português</a></li><li class="interlanguage-link interwiki-ru"><a href="https://ru.wikipedia.org/wiki/Objective-C" title="Objective-C – Russian" lang="ru" hreflang="ru" class="interlanguage-link-target">Русский</a></li><li class="interlanguage-link interwiki-sco"><a href="https://sco.wikipedia.org/wiki/Objective-C" title="Objective-C – Scots" lang="sco" hreflang="sco" class="interlanguage-link-target">Scots</a></li><li class="interlanguage-link interwiki-simple"><a href="https://simple.wikipedia.org/wiki/Objective-C" title="Objective-C – Simple English" lang="simple" hreflang="simple" class="interlanguage-link-target">Simple English</a></li><li class="interlanguage-link interwiki-sk"><a href="https://sk.wikipedia.org/wiki/Objective-C" title="Objective-C – Slovak" lang="sk" hreflang="sk" class="interlanguage-link-target">Slovenčina</a></li><li class="interlanguage-link interwiki-sl"><a href="https://sl.wikipedia.org/wiki/Objective-C" title="Objective-C – Slovenian" lang="sl" hreflang="sl" class="interlanguage-link-target">Slovenščina</a></li><li class="interlanguage-link interwiki-sr"><a href="https://sr.wikipedia.org/wiki/Objective-C" title="Objective-C – Serbian" lang="sr" hreflang="sr" class="interlanguage-link-target">Српски / srpski</a></li><li class="interlanguage-link interwiki-fi"><a href="https://fi.wikipedia.org/wiki/Objective-C" title="Objective-C – Finnish" lang="fi" hreflang="fi" class="interlanguage-link-target">Suomi</a></li><li class="interlanguage-link interwiki-sv"><a href="https://sv.wikipedia.org/wiki/Objective-C" title="Objective-C – Swedish" lang="sv" hreflang="sv" class="interlanguage-link-target">Svenska</a></li><li class="interlanguage-link interwiki-ta"><a href="https://ta.wikipedia.org/wiki/%E0%AE%92%E0%AE%AA%E0%AF%8D%E0%AE%9A%E0%AF%86%E0%AE%95%E0%AF%8D%E0%AE%9F%E0%AE%BF%E0%AE%B5%E0%AF%8D_%E0%AE%9A%E0%AE%BF" title="ஒப்செக்டிவ் சி – Tamil" lang="ta" hreflang="ta" class="interlanguage-link-target">தமிழ்</a></li><li class="interlanguage-link interwiki-th"><a href="https://th.wikipedia.org/wiki/%E0%B8%A0%E0%B8%B2%E0%B8%A9%E0%B8%B2%E0%B8%AD%E0%B9%87%E0%B8%AD%E0%B8%9A%E0%B9%80%E0%B8%88%E0%B8%81%E0%B8%97%E0%B8%B5%E0%B8%9F-%E0%B8%8B%E0%B8%B5" title="ภาษาอ็อบเจกทีฟ-ซี – Thai" lang="th" hreflang="th" class="interlanguage-link-target">ไทย</a></li><li class="interlanguage-link interwiki-tg"><a href="https://tg.wikipedia.org/wiki/Objective-C" title="Objective-C – Tajik" lang="tg" hreflang="tg" class="interlanguage-link-target">Тоҷикӣ</a></li><li class="interlanguage-link interwiki-tr"><a href="https://tr.wikipedia.org/wiki/Objective-C" title="Objective-C – Turkish" lang="tr" hreflang="tr" class="interlanguage-link-target">Türkçe</a></li><li class="interlanguage-link interwiki-uk"><a href="https://uk.wikipedia.org/wiki/Objective-C" title="Objective-C – Ukrainian" lang="uk" hreflang="uk" class="interlanguage-link-target">Українська</a></li><li class="interlanguage-link interwiki-zh"><a href="https://zh.wikipedia.org/wiki/Objective-C" title="Objective-C – Chinese" lang="zh" hreflang="zh" class="interlanguage-link-target">中文</a></li>					</ul>
				<div class='after-portlet after-portlet-lang'><span class="wb-langlinks-edit wb-langlinks-link"><a href="https://www.wikidata.org/wiki/Q188531#sitelinks-wikipedia" title="Edit interlanguage links" class="wbc-editpage">Edit links</a></span></div>			</div>
		</div>
				</div>
		</div>
		<div id="footer" role="contentinfo">
							<ul id="footer-info">
											<li id="footer-info-lastmod"> This page was last modified on 11 January 2017, at 18:57.</li>
											<li id="footer-info-copyright">Text is available under the <a rel="license" href="//en.wikipedia.org/wiki/Wikipedia:Text_of_Creative_Commons_Attribution-ShareAlike_3.0_Unported_License">Creative Commons Attribution-ShareAlike License</a><a rel="license" href="//creativecommons.org/licenses/by-sa/3.0/" style="display:none;"></a>;
additional terms may apply.  By using this site, you agree to the <a href="//wikimediafoundation.org/wiki/Terms_of_Use">Terms of Use</a> and <a href="//wikimediafoundation.org/wiki/Privacy_policy">Privacy Policy</a>. Wikipedia® is a registered trademark of the <a href="//www.wikimediafoundation.org/">Wikimedia Foundation, Inc.</a>, a non-profit organization.</li>
									</ul>
							<ul id="footer-places">
											<li id="footer-places-privacy"><a href="https://wikimediafoundation.org/wiki/Privacy_policy" class="extiw" title="wmf:Privacy policy">Privacy policy</a></li>
											<li id="footer-places-about"><a href="/wiki/Wikipedia:About" title="Wikipedia:About">About Wikipedia</a></li>
											<li id="footer-places-disclaimer"><a href="/wiki/Wikipedia:General_disclaimer" title="Wikipedia:General disclaimer">Disclaimers</a></li>
											<li id="footer-places-contact"><a href="//en.wikipedia.org/wiki/Wikipedia:Contact_us">Contact Wikipedia</a></li>
											<li id="footer-places-developers"><a href="https://www.mediawiki.org/wiki/Special:MyLanguage/How_to_contribute">Developers</a></li>
											<li id="footer-places-cookiestatement"><a href="https://wikimediafoundation.org/wiki/Cookie_statement">Cookie statement</a></li>
											<li id="footer-places-mobileview"><a href="//en.m.wikipedia.org/w/index.php?title=Objective-C&amp;mobileaction=toggle_view_mobile" class="noprint stopMobileRedirectToggle">Mobile view</a></li>
									</ul>
										<ul id="footer-icons" class="noprint">
											<li id="footer-copyrightico">
							<a href="https://wikimediafoundation.org/"><img src="/static/images/wikimedia-button.png" srcset="/static/images/wikimedia-button-1.5x.png 1.5x, /static/images/wikimedia-button-2x.png 2x" width="88" height="31" alt="Wikimedia Foundation"/></a>						</li>
											<li id="footer-poweredbyico">
							<a href="//www.mediawiki.org/"><img src="/static/images/poweredby_mediawiki_88x31.png" alt="Powered by MediaWiki" srcset="/static/images/poweredby_mediawiki_132x47.png 1.5x, /static/images/poweredby_mediawiki_176x62.png 2x" width="88" height="31"/></a>						</li>
									</ul>
						<div style="clear:both"></div>
		</div>
		<script>(window.RLQ=window.RLQ||[]).push(function(){mw.config.set({"wgPageParseReport":{"limitreport":{"cputime":"0.472","walltime":"0.576","ppvisitednodes":{"value":3349,"limit":1000000},"ppgeneratednodes":{"value":0,"limit":1500000},"postexpandincludesize":{"value":109158,"limit":2097152},"templateargumentsize":{"value":4134,"limit":2097152},"expansiondepth":{"value":17,"limit":40},"expensivefunctioncount":{"value":8,"limit":500},"entityaccesscount":{"value":1,"limit":400},"timingprofile":["100.00%  471.080      1 -total"," 42.95%  202.340      1 Template:Reflist"," 28.66%  135.015     34 Template:Cite_web"," 15.22%   71.685      2 Template:Infobox"," 13.83%   65.130      1 Template:Infobox_programming_language"," 13.70%   64.523      3 Template:Citation_needed"," 12.21%   57.526      3 Template:Fix","  6.07%   28.606      6 Template:Category_handler","  5.78%   27.221      1 Template:Authority_control","  5.49%   25.859      3 Template:Delink"]},"scribunto":{"limitreport-timeusage":{"value":"0.229","limit":"10.000"},"limitreport-memusage":{"value":5392712,"limit":52428800}},"cachereport":{"origin":"mw1219","timestamp":"20170202130404","ttl":86400,"transientcontent":true}}});});</script><script>(window.RLQ=window.RLQ||[]).push(function(){mw.config.set({"wgBackendResponseTime":62,"wgHostname":"mw1250"});});</script>
	</body>
</html>
