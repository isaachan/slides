<!DOCTYPE html>
<html class="client-nojs" lang="en" dir="ltr">
<head>
<meta charset="UTF-8"/>
<title>Eiffel (programming language) - Wikipedia</title>
<script>document.documentElement.className = document.documentElement.className.replace( /(^|\s)client-nojs(\s|$)/, "$1client-js$2" );</script>
<script>(window.RLQ=window.RLQ||[]).push(function(){mw.config.set({"wgCanonicalNamespace":"","wgCanonicalSpecialPageName":false,"wgNamespaceNumber":0,"wgPageName":"Eiffel_(programming_language)","wgTitle":"Eiffel (programming language)","wgCurRevisionId":758098169,"wgRevisionId":758098169,"wgArticleId":9838,"wgIsArticle":true,"wgIsRedirect":false,"wgAction":"view","wgUserName":null,"wgUserGroups":["*"],"wgCategories":["CS1 maint: Multiple names: authors list","Pages using ISBN magic links","Wikipedia introduction cleanup from July 2012","All pages needing cleanup","Articles covered by WikiProject Wikify from July 2012","All articles covered by WikiProject Wikify","Articles needing additional references from January 2015","All articles needing additional references","Articles needing additional references from June 2013","All articles with unsourced statements","Articles with unsourced statements from October 2010","Object-oriented programming languages","Class-based programming languages","Object-oriented programming","Formal specification languages","High Integrity Programming Language","Programming languages created in the 1980s"],"wgBreakFrames":false,"wgPageContentLanguage":"en","wgPageContentModel":"wikitext","wgSeparatorTransformTable":["",""],"wgDigitTransformTable":["",""],"wgDefaultDateFormat":"dmy","wgMonthNames":["","January","February","March","April","May","June","July","August","September","October","November","December"],"wgMonthNamesShort":["","Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"wgRelevantPageName":"Eiffel_(programming_language)","wgRelevantArticleId":9838,"wgRequestId":"WJLdKwpAEK4AACll7kAAAADP","wgIsProbablyEditable":true,"wgRestrictionEdit":[],"wgRestrictionMove":[],"wgFlaggedRevsParams":{"tags":{}},"wgStableRevisionId":null,"wgWikiEditorEnabledModules":{"toolbar":true,"dialogs":true,"preview":false,"publish":false},"wgBetaFeaturesFeatures":[],"wgMediaViewerOnClick":true,"wgMediaViewerEnabledByDefault":true,"wgVisualEditor":{"pageLanguageCode":"en","pageLanguageDir":"ltr","usePageImages":true,"usePageDescriptions":true},"wgPreferredVariant":"en","wgMFDisplayWikibaseDescriptions":{"search":true,"nearby":true,"watchlist":true,"tagline":true},"wgRelatedArticles":null,"wgRelatedArticlesUseCirrusSearch":true,"wgRelatedArticlesOnlyUseCirrusSearch":false,"wgULSCurrentAutonym":"English","wgNoticeProject":"wikipedia","wgCentralNoticeCookiesToDelete":[],"wgCentralNoticeCategoriesUsingLegacy":["Fundraising","fundraising"],"wgCategoryTreePageCategoryOptions":"{\"mode\":0,\"hideprefix\":20,\"showcount\":true,\"namespaces\":false}","wgWikibaseItemId":"Q732089","wgCentralAuthMobileDomain":false,"wgVisualEditorToolbarScrollOffset":0,"wgEditSubmitButtonLabelPublish":false});mw.loader.state({"ext.globalCssJs.user.styles":"ready","ext.globalCssJs.site.styles":"ready","site.styles":"ready","noscript":"ready","user.styles":"ready","user":"ready","user.options":"loading","user.tokens":"loading","ext.cite.styles":"ready","ext.pygments":"ready","wikibase.client.init":"ready","ext.visualEditor.desktopArticleTarget.noscript":"ready","ext.uls.interlanguage":"ready","ext.wikimediaBadges":"ready","mediawiki.legacy.shared":"ready","mediawiki.legacy.commonPrint":"ready","mediawiki.sectionAnchor":"ready","mediawiki.skinning.interface":"ready","skins.vector.styles":"ready","ext.globalCssJs.user":"ready","ext.globalCssJs.site":"ready"});mw.loader.implement("user.options@0j3lz3q",function($,jQuery,require,module){mw.user.options.set({"variant":"en"});});mw.loader.implement("user.tokens@1dqfd7l",function ( $, jQuery, require, module ) {
mw.user.tokens.set({"editToken":"+\\","patrolToken":"+\\","watchToken":"+\\","csrfToken":"+\\"});/*@nomin*/;

});mw.loader.load(["ext.cite.a11y","mediawiki.toc","mediawiki.action.view.postEdit","site","mediawiki.page.startup","mediawiki.user","mediawiki.hidpi","mediawiki.page.ready","mediawiki.legacy.wikibits","mediawiki.searchSuggest","ext.gadget.teahouse","ext.gadget.ReferenceTooltips","ext.gadget.watchlist-notice","ext.gadget.DRN-wizard","ext.gadget.charinsert","ext.gadget.refToolbar","ext.gadget.extra-toolbar-buttons","ext.gadget.switcher","ext.gadget.featured-articles-links","ext.centralauth.centralautologin","mmv.head","mmv.bootstrap.autostart","ext.visualEditor.desktopArticleTarget.init","ext.visualEditor.targetLoader","ext.eventLogging.subscriber","ext.wikimediaEvents","ext.navigationTiming","ext.uls.eventlogger","ext.uls.init","ext.uls.interface","ext.quicksurveys.init","ext.centralNotice.geoIP","ext.centralNotice.startUp","skins.vector.js"]);});</script>
<link rel="stylesheet" href="/w/load.php?debug=false&amp;lang=en&amp;modules=ext.cite.styles%7Cext.pygments%2CwikimediaBadges%7Cext.uls.interlanguage%7Cext.visualEditor.desktopArticleTarget.noscript%7Cmediawiki.legacy.commonPrint%2Cshared%7Cmediawiki.sectionAnchor%7Cmediawiki.skinning.interface%7Cskins.vector.styles%7Cwikibase.client.init&amp;only=styles&amp;skin=vector"/>
<script async="" src="/w/load.php?debug=false&amp;lang=en&amp;modules=startup&amp;only=scripts&amp;skin=vector"></script>
<meta name="ResourceLoaderDynamicStyles" content=""/>
<link rel="stylesheet" href="/w/load.php?debug=false&amp;lang=en&amp;modules=site.styles&amp;only=styles&amp;skin=vector"/>
<meta name="generator" content="MediaWiki 1.29.0-wmf.9"/>
<meta name="referrer" content="origin-when-cross-origin"/>
<link rel="alternate" href="android-app://org.wikipedia/http/en.m.wikipedia.org/wiki/Eiffel_(programming_language)"/>
<link rel="alternate" type="application/x-wiki" title="Edit this page" href="/w/index.php?title=Eiffel_(programming_language)&amp;action=edit"/>
<link rel="edit" title="Edit this page" href="/w/index.php?title=Eiffel_(programming_language)&amp;action=edit"/>
<link rel="apple-touch-icon" href="/static/apple-touch/wikipedia.png"/>
<link rel="shortcut icon" href="/static/favicon/wikipedia.ico"/>
<link rel="search" type="application/opensearchdescription+xml" href="/w/opensearch_desc.php" title="Wikipedia (en)"/>
<link rel="EditURI" type="application/rsd+xml" href="//en.wikipedia.org/w/api.php?action=rsd"/>
<link rel="copyright" href="//creativecommons.org/licenses/by-sa/3.0/"/>
<link rel="canonical" href="https://en.wikipedia.org/wiki/Eiffel_(programming_language)"/>
<link rel="dns-prefetch" href="//login.wikimedia.org"/>
<link rel="dns-prefetch" href="//meta.wikimedia.org" />
</head>
<body class="mediawiki ltr sitedir-ltr mw-hide-empty-elt ns-0 ns-subject page-Eiffel_programming_language rootpage-Eiffel_programming_language skin-vector action-view">		<div id="mw-page-base" class="noprint"></div>
		<div id="mw-head-base" class="noprint"></div>
		<div id="content" class="mw-body" role="main">
			<a id="top"></a>

							<div id="siteNotice"><!-- CentralNotice --></div>
						<div class="mw-indicators">
</div>
			<h1 id="firstHeading" class="firstHeading" lang="en">Eiffel (programming language)</h1>
									<div id="bodyContent" class="mw-body-content">
									<div id="siteSub">From Wikipedia, the free encyclopedia</div>
								<div id="contentSub"></div>
												<div id="jump-to-nav" class="mw-jump">
					Jump to:					<a href="#mw-head">navigation</a>, 					<a href="#p-search">search</a>
				</div>
				<div id="mw-content-text" lang="en" dir="ltr" class="mw-content-ltr"><script>function mfTempOpenSection(id){var block=document.getElementById("mf-section-"+id);block.className+=" open-block";block.previousSibling.className+=" open-block";}</script><table class="plainlinks metadata ambox ambox-content ambox-multiple_issues compact-ambox" role="presentation">
<tr>
<td class="mbox-image">
<div style="width:52px"><img alt="" src="//upload.wikimedia.org/wikipedia/commons/thumb/b/b4/Ambox_important.svg/40px-Ambox_important.svg.png" width="40" height="40" srcset="//upload.wikimedia.org/wikipedia/commons/thumb/b/b4/Ambox_important.svg/60px-Ambox_important.svg.png 1.5x, //upload.wikimedia.org/wikipedia/commons/thumb/b/b4/Ambox_important.svg/80px-Ambox_important.svg.png 2x" data-file-width="40" data-file-height="40" /></div>
</td>
<td class="mbox-text">
<div class="mw-collapsible" style="width:95%; margin: 0.2em 0;"><span class="mbox-text-span"><b>This article has multiple issues.</b> Please help <b><a class="external text" href="//en.wikipedia.org/w/index.php?title=Eiffel_(programming_language)&amp;action=edit">improve it</a></b> or discuss these issues on the <b><a href="/wiki/Talk:Eiffel_(programming_language)" title="Talk:Eiffel (programming language)">talk page</a></b>. <small><i>(<a href="/wiki/Help:Maintenance_template_removal" title="Help:Maintenance template removal">Learn how and when to remove these template messages</a>)</i></small></span>
<div class="mw-collapsible-content" style="margin-top: 0.3em;">
<table class="plainlinks metadata ambox ambox-content ambox-lead_too_short" role="presentation">
<tr>
<td class="mbox-image">
<div style="width:52px"><a href="/wiki/File:Wiki_letter_w.svg" class="image"><img alt="Wiki letter w.svg" src="//upload.wikimedia.org/wikipedia/en/thumb/6/6c/Wiki_letter_w.svg/40px-Wiki_letter_w.svg.png" width="40" height="40" srcset="//upload.wikimedia.org/wikipedia/en/thumb/6/6c/Wiki_letter_w.svg/60px-Wiki_letter_w.svg.png 1.5x, //upload.wikimedia.org/wikipedia/en/thumb/6/6c/Wiki_letter_w.svg/80px-Wiki_letter_w.svg.png 2x" data-file-width="44" data-file-height="44" /></a></div>
</td>
<td class="mbox-text"><span class="mbox-text-span">This article's <b><a href="/wiki/Wikipedia:Manual_of_Style/Lead_section" title="Wikipedia:Manual of Style/Lead section">lead section</a> may not adequately <a href="/wiki/Wikipedia:Summary_style" title="Wikipedia:Summary style">summarize</a> key points of its contents</b>. <span class="hide-when-compact">Please consider expanding the lead to <a href="/wiki/Wikipedia:Manual_of_Style/Lead_section#Provide_an_accessible_overview" title="Wikipedia:Manual of Style/Lead section">provide an accessible overview</a> of all important aspects of the article. Please discuss this issue on the article's <a href="/wiki/Talk:Eiffel_(programming_language)" title="Talk:Eiffel (programming language)">talk page</a>.</span> <small><i>(July 2012)</i></small></span></td>
</tr>
</table>
<table class="plainlinks metadata ambox ambox-content ambox-Refimprove" role="presentation">
<tr>
<td class="mbox-image">
<div style="width:52px"><a href="/wiki/File:Question_book-new.svg" class="image"><img alt="" src="//upload.wikimedia.org/wikipedia/en/thumb/9/99/Question_book-new.svg/50px-Question_book-new.svg.png" width="50" height="39" srcset="//upload.wikimedia.org/wikipedia/en/thumb/9/99/Question_book-new.svg/75px-Question_book-new.svg.png 1.5x, //upload.wikimedia.org/wikipedia/en/thumb/9/99/Question_book-new.svg/100px-Question_book-new.svg.png 2x" data-file-width="512" data-file-height="399" /></a></div>
</td>
<td class="mbox-text"><span class="mbox-text-span">This article <b>needs additional citations for <a href="/wiki/Wikipedia:Verifiability" title="Wikipedia:Verifiability">verification</a></b>. <span class="hide-when-compact">Please help <a class="external text" href="//en.wikipedia.org/w/index.php?title=Eiffel_(programming_language)&amp;action=edit">improve this article</a> by <a href="/wiki/Help:Introduction_to_referencing_with_Wiki_Markup/1" title="Help:Introduction to referencing with Wiki Markup/1">adding citations to reliable sources</a>. Unsourced material may be challenged and removed.</span> <small><i>(January 2015)</i></small> <small class="hide-when-compact"><i>(<a href="/wiki/Help:Maintenance_template_removal" title="Help:Maintenance template removal">Learn how and when to remove this template message</a>)</i></small></span></td>
</tr>
</table>
</div>
</div>
<small class="hide-when-compact"><i>(<a href="/wiki/Help:Maintenance_template_removal" title="Help:Maintenance template removal">Learn how and when to remove this template message</a>)</i></small></td>
</tr>
</table>
<table class="infobox vevent" style="width:22em">
<caption class="summary">Eiffel</caption>
<tr>
<th scope="row"><a href="/wiki/Programming_paradigm" title="Programming paradigm">Paradigm</a></th>
<td><a href="/wiki/Object-oriented_programming" title="Object-oriented programming">Object-oriented</a></td>
</tr>
<tr>
<th scope="row"><a href="/wiki/Software_design" title="Software design">Designed&#160;by</a></th>
<td><a href="/wiki/Bertrand_Meyer" title="Bertrand Meyer">Bertrand Meyer</a></td>
</tr>
<tr>
<th scope="row"><a href="/wiki/Software_developer" title="Software developer">Developer</a></th>
<td class="organiser"><a href="/wiki/Bertrand_Meyer" title="Bertrand Meyer">Bertrand Meyer</a> &amp; <a href="/w/index.php?title=Eiffel_Software&amp;action=edit&amp;redlink=1" class="new" title="Eiffel Software (page does not exist)">Eiffel Software</a></td>
</tr>
<tr>
<th scope="row">First&#160;appeared</th>
<td>1986</td>
</tr>
<tr>
<th scope="row"><a href="/wiki/Type_system" title="Type system">Typing discipline</a></th>
<td><a href="/wiki/Static_typing" class="mw-redirect" title="Static typing">static</a></td>
</tr>
<tr>
<th colspan="2" style="text-align:center;background-color: #eee;">Major <a href="/wiki/Programming_language_implementation" title="Programming language implementation">implementations</a></th>
</tr>
<tr>
<td colspan="2" style="text-align:center"><a href="/wiki/EiffelStudio" title="EiffelStudio">EiffelStudio</a>, <a href="/wiki/LibertyEiffel" title="LibertyEiffel">LibertyEiffel</a>, <a href="/wiki/SmartEiffel" title="SmartEiffel">SmartEiffel</a>, <a href="/wiki/Visual_Eiffel" title="Visual Eiffel">Visual Eiffel</a>, <a rel="nofollow" class="external text" href="http://www.gobosoft.com/eiffel/gobo/gec/index.html">Gobo Eiffel</a>, <a rel="nofollow" class="external text" href="http://www.sourceforge.net/projects/tecomp">"The Eiffel Compiler" tecomp</a></td>
</tr>
<tr>
<th colspan="2" style="text-align:center;background-color: #eee;">Influenced by</th>
</tr>
<tr>
<td colspan="2" style="text-align:center"><a href="/wiki/Ada_(programming_language)" title="Ada (programming language)">Ada</a>, <a href="/wiki/Simula" title="Simula">Simula</a>, <a href="/wiki/Z_notation" title="Z notation">Z</a></td>
</tr>
<tr>
<th colspan="2" style="text-align:center;background-color: #eee;">Influenced</th>
</tr>
<tr>
<td colspan="2" style="text-align:center"><a href="/wiki/Ada_(programming_language)" title="Ada (programming language)">Ada 2012</a>, <a rel="nofollow" class="external text" href="http://albatross-lang.sourceforge.net">Albatross</a>, <a href="/wiki/C_Sharp_(programming_language)" title="C Sharp (programming language)">C#</a>, <a href="/wiki/D_(programming_language)" title="D (programming language)">D</a>, <a href="/wiki/Java_(programming_language)" title="Java (programming language)">Java</a>, <a href="/wiki/Lisaac" title="Lisaac">Lisaac</a>, <a href="/wiki/Racket_(programming_language)" title="Racket (programming language)">Racket</a>, <a href="/wiki/Ruby_(programming_language)" title="Ruby (programming language)">Ruby</a>,<sup id="cite_ref-nov2pro_1-0" class="reference"><a href="#cite_note-nov2pro-1">[1]</a></sup> <a href="/wiki/Sather" title="Sather">Sather</a>, <a href="/wiki/Scala_(programming_language)" title="Scala (programming language)">Scala</a></td>
</tr>
</table>
<p><b>Eiffel</b> is an <a href="/wiki/Object-oriented_programming" title="Object-oriented programming">object-oriented</a> <a href="/wiki/Programming_language" title="Programming language">programming language</a> designed by <a href="/wiki/Bertrand_Meyer" title="Bertrand Meyer">Bertrand Meyer</a> (an object-orientation proponent and author of <i><a href="/wiki/Object-Oriented_Software_Construction" title="Object-Oriented Software Construction">Object-Oriented Software Construction</a></i>) and <a href="/w/index.php?title=Eiffel_Software&amp;action=edit&amp;redlink=1" class="new" title="Eiffel Software (page does not exist)">Eiffel Software</a>. Meyer conceived the language in 1985 with the goal of increasing the reliability of commercial software development;<sup id="cite_ref-2" class="reference"><a href="#cite_note-2">[2]</a></sup> the first version becoming available in 1986. In 2005, Eiffel became an <a href="/wiki/International_Organization_for_Standardization" title="International Organization for Standardization">ISO</a>-standardized language.</p>
<p>The design of the language is closely connected with the Eiffel programming method. Both are based on a set of principles, including <a href="/wiki/Design_by_contract" title="Design by contract">design by contract</a>, <a href="/wiki/Command-query_separation" class="mw-redirect" title="Command-query separation">command-query separation</a>, the <a href="/wiki/Uniform_access_principle" title="Uniform access principle">uniform-access principle</a>, the <a href="/wiki/Single_choice_principle" class="mw-redirect" title="Single choice principle">single-choice principle</a>, the <a href="/wiki/Open_Closed_Principle" class="mw-redirect" title="Open Closed Principle">open-closed principle</a>, and <a href="/wiki/Option-operand_separation" title="Option-operand separation">option-operand separation</a>.</p>
<p>Many concepts initially introduced by Eiffel later found their way into <a href="/wiki/Java_(programming_language)" title="Java (programming language)">Java</a>, <a href="/wiki/C_Sharp_(programming_language)" title="C Sharp (programming language)">C#</a>, and other languages.<sup id="cite_ref-3" class="reference"><a href="#cite_note-3">[3]</a></sup> New language design ideas, particularly through the <a href="/wiki/Ecma_International" title="Ecma International">Ecma</a>/<a href="/wiki/International_Organisation_for_Standardisation" class="mw-redirect" title="International Organisation for Standardisation">ISO</a> standardization process, continue to be incorporated into the Eiffel language.</p>
<p></p>
<div id="toc" class="toc">
<div id="toctitle">
<h2>Contents</h2>
</div>
<ul>
<li class="toclevel-1 tocsection-1"><a href="#Characteristics"><span class="tocnumber">1</span> <span class="toctext">Characteristics</span></a></li>
<li class="toclevel-1 tocsection-2"><a href="#Design_goals"><span class="tocnumber">2</span> <span class="toctext">Design goals</span></a>
<ul>
<li class="toclevel-2 tocsection-3"><a href="#Background"><span class="tocnumber">2.1</span> <span class="toctext">Background</span></a></li>
<li class="toclevel-2 tocsection-4"><a href="#Implementations_and_environments"><span class="tocnumber">2.2</span> <span class="toctext">Implementations and environments</span></a></li>
<li class="toclevel-2 tocsection-5"><a href="#Specifications_and_standards"><span class="tocnumber">2.3</span> <span class="toctext">Specifications and standards</span></a></li>
</ul>
</li>
<li class="toclevel-1 tocsection-6"><a href="#Syntax_and_semantics"><span class="tocnumber">3</span> <span class="toctext">Syntax and semantics</span></a>
<ul>
<li class="toclevel-2 tocsection-7"><a href="#Overall_structure"><span class="tocnumber">3.1</span> <span class="toctext">Overall structure</span></a>
<ul>
<li class="toclevel-3 tocsection-8"><a href="#Scoping"><span class="tocnumber">3.1.1</span> <span class="toctext">Scoping</span></a></li>
<li class="toclevel-3 tocsection-9"><a href="#.22Hello.2C_world.21.22"><span class="tocnumber">3.1.2</span> <span class="toctext">"Hello, world!"</span></a></li>
</ul>
</li>
<li class="toclevel-2 tocsection-10"><a href="#Design_by_contract"><span class="tocnumber">3.2</span> <span class="toctext">Design by contract</span></a></li>
<li class="toclevel-2 tocsection-11"><a href="#Void-safety"><span class="tocnumber">3.3</span> <span class="toctext">Void-safety</span></a></li>
<li class="toclevel-2 tocsection-12"><a href="#Features.2C_commands.2C_and_queries"><span class="tocnumber">3.4</span> <span class="toctext">Features, commands, and queries</span></a></li>
<li class="toclevel-2 tocsection-13"><a href="#Overloading"><span class="tocnumber">3.5</span> <span class="toctext">Overloading</span></a></li>
<li class="toclevel-2 tocsection-14"><a href="#Genericity"><span class="tocnumber">3.6</span> <span class="toctext">Genericity</span></a></li>
<li class="toclevel-2 tocsection-15"><a href="#Inheritance_basics"><span class="tocnumber">3.7</span> <span class="toctext">Inheritance basics</span></a></li>
<li class="toclevel-2 tocsection-16"><a href="#Deferred_classes_and_features"><span class="tocnumber">3.8</span> <span class="toctext">Deferred classes and features</span></a></li>
<li class="toclevel-2 tocsection-17"><a href="#Renaming"><span class="tocnumber">3.9</span> <span class="toctext">Renaming</span></a></li>
<li class="toclevel-2 tocsection-18"><a href="#Tuples"><span class="tocnumber">3.10</span> <span class="toctext">Tuples</span></a></li>
<li class="toclevel-2 tocsection-19"><a href="#Agents"><span class="tocnumber">3.11</span> <span class="toctext">Agents</span></a></li>
<li class="toclevel-2 tocsection-20"><a href="#Once_routines"><span class="tocnumber">3.12</span> <span class="toctext">Once routines</span></a></li>
<li class="toclevel-2 tocsection-21"><a href="#Conversions"><span class="tocnumber">3.13</span> <span class="toctext">Conversions</span></a></li>
<li class="toclevel-2 tocsection-22"><a href="#Exception_handling"><span class="tocnumber">3.14</span> <span class="toctext">Exception handling</span></a></li>
<li class="toclevel-2 tocsection-23"><a href="#Concurrency"><span class="tocnumber">3.15</span> <span class="toctext">Concurrency</span></a></li>
<li class="toclevel-2 tocsection-24"><a href="#Operator_and_bracket_syntax.2C_assigner_commands"><span class="tocnumber">3.16</span> <span class="toctext">Operator and bracket syntax, assigner commands</span></a></li>
<li class="toclevel-2 tocsection-25"><a href="#Lexical_and_syntax_properties"><span class="tocnumber">3.17</span> <span class="toctext">Lexical and syntax properties</span></a></li>
<li class="toclevel-2 tocsection-26"><a href="#Style_conventions"><span class="tocnumber">3.18</span> <span class="toctext">Style conventions</span></a></li>
<li class="toclevel-2 tocsection-27"><a href="#Interfaces_to_other_tools_and_languages"><span class="tocnumber">3.19</span> <span class="toctext">Interfaces to other tools and languages</span></a></li>
</ul>
</li>
<li class="toclevel-1 tocsection-28"><a href="#References"><span class="tocnumber">4</span> <span class="toctext">References</span></a></li>
<li class="toclevel-1 tocsection-29"><a href="#External_links"><span class="tocnumber">5</span> <span class="toctext">External links</span></a></li>
</ul>
</div>
<p></p>
<h2><span class="mw-headline" id="Characteristics">Characteristics</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/w/index.php?title=Eiffel_(programming_language)&amp;action=edit&amp;section=1" title="Edit section: Characteristics">edit</a><span class="mw-editsection-bracket">]</span></span></h2>
<table class="plainlinks metadata ambox ambox-content ambox-Unreferenced" role="presentation">
<tr>
<td class="mbox-image">
<div style="width:52px"><a href="/wiki/File:Question_book-new.svg" class="image"><img alt="" src="//upload.wikimedia.org/wikipedia/en/thumb/9/99/Question_book-new.svg/50px-Question_book-new.svg.png" width="50" height="39" srcset="//upload.wikimedia.org/wikipedia/en/thumb/9/99/Question_book-new.svg/75px-Question_book-new.svg.png 1.5x, //upload.wikimedia.org/wikipedia/en/thumb/9/99/Question_book-new.svg/100px-Question_book-new.svg.png 2x" data-file-width="512" data-file-height="399" /></a></div>
</td>
<td class="mbox-text"><span class="mbox-text-span">This section <b>does not <a href="/wiki/Wikipedia:Citing_sources" title="Wikipedia:Citing sources">cite</a> any <a href="/wiki/Wikipedia:Verifiability" title="Wikipedia:Verifiability">sources</a></b>. <span class="hide-when-compact">Please help <a class="external text" href="//en.wikipedia.org/w/index.php?title=Eiffel_(programming_language)&amp;action=edit">improve this section</a> by <a href="/wiki/Help:Introduction_to_referencing_with_Wiki_Markup/1" title="Help:Introduction to referencing with Wiki Markup/1">adding citations to reliable sources</a>. Unsourced material may be challenged and <a href="/wiki/Wikipedia:Verifiability#Burden_of_evidence" title="Wikipedia:Verifiability">removed</a>.</span> <small><i>(June 2013)</i></small> <small class="hide-when-compact"><i>(<a href="/wiki/Help:Maintenance_template_removal" title="Help:Maintenance template removal">Learn how and when to remove this template message</a>)</i></small></span></td>
</tr>
</table>
<p>The key characteristics of the Eiffel language include:</p>
<ul>
<li>An object-oriented program structure in which a class serves as the basic unit of decomposition.</li>
<li><a href="/wiki/Design_by_contract" title="Design by contract">Design by contract</a> tightly integrated with other language constructs.</li>
<li>Automatic memory management, typically implemented by <a href="/wiki/Garbage_collection_(computer_science)" title="Garbage collection (computer science)">garbage collection</a>.</li>
<li><a href="/wiki/Inheritance_(computer_science)" class="mw-redirect" title="Inheritance (computer science)">Inheritance</a>, including <a href="/wiki/Multiple_inheritance" title="Multiple inheritance">multiple inheritance</a>, <a href="https://en.wiktionary.org/wiki/renaming" class="extiw" title="wikt:renaming">renaming</a>, <a href="/wiki/Method_overriding" title="Method overriding">redefinition</a>, "select", <a rel="nofollow" class="external text" href="http://docs.eiffel.com/book/method/et-inheritance#Non-conforming_inheritance">non-conforming inheritance</a>, and other mechanisms intended to make inheritance safe.</li>
<li>Constrained and unconstrained <a href="/wiki/Generic_programming" title="Generic programming">generic programming</a></li>
<li>A uniform type system handling both value and reference semantics in which all types, including basic types such as INTEGER, are class-based.</li>
<li><a href="/wiki/Static_typing" class="mw-redirect" title="Static typing">Static typing</a></li>
<li>Void safety, or static protection against calls on null references, through the attached-types mechanism.</li>
<li>Agents, or objects that wrap computations, closely connected with <a href="/wiki/Closure_(computer_science)" class="mw-redirect" title="Closure (computer science)">closures</a> and <a href="/wiki/Lambda_calculus" title="Lambda calculus">lambda calculus</a>.</li>
<li><i>Once</i> routines, or routines evaluated only once, for object sharing and decentralized initialization.</li>
<li>Keyword-based syntax in the <a href="/wiki/ALGOL" title="ALGOL">ALGOL</a>/<a href="/wiki/Pascal_(programming_language)" title="Pascal (programming language)">Pascal</a> tradition but separator-free, insofar as semicolons are optional, with operator syntax available for routines.</li>
<li>Case insensitivity</li>
<li>Simple Concurrent Object-Oriented Programming (SCOOP) facilitates creation of multiple, concurrently active execution vehicles at a level of abstraction above the specific details of these vehicles (e.g. multiple threads without specific mutex management).</li>
</ul>
<h2><span class="mw-headline" id="Design_goals">Design goals</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/w/index.php?title=Eiffel_(programming_language)&amp;action=edit&amp;section=2" title="Edit section: Design goals">edit</a><span class="mw-editsection-bracket">]</span></span></h2>
<p>Eiffel emphasizes declarative statements over procedural code and attempts to eliminate the need for bookkeeping instructions.</p>
<p>Eiffel shuns coding tricks or coding techniques intended as <a href="/wiki/Optimization_(computer_science)" class="mw-redirect" title="Optimization (computer science)">optimization</a> hints to the compiler. The aim is not only to make the code more readable, but also to allow programmers to concentrate on the important aspects of a program without getting bogged down in implementation details. Eiffel's simplicity is intended to promote simple, extensible, reusable, and reliable answers to computing problems. Compilers for computer programs written in Eiffel provide extensive optimization techniques, such as automatic in-lining, that relieve the programmer of part of the optimization burden.</p>
<h3><span class="mw-headline" id="Background">Background</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/w/index.php?title=Eiffel_(programming_language)&amp;action=edit&amp;section=3" title="Edit section: Background">edit</a><span class="mw-editsection-bracket">]</span></span></h3>
<p>Eiffel was originally developed by <a href="/w/index.php?title=Eiffel_Software&amp;action=edit&amp;redlink=1" class="new" title="Eiffel Software (page does not exist)">Eiffel Software</a>, a company founded by <a href="/wiki/Bertrand_Meyer" title="Bertrand Meyer">Bertrand Meyer</a>. <i><a href="/wiki/Object-Oriented_Software_Construction" title="Object-Oriented Software Construction">Object-Oriented Software Construction</a></i> contains a detailed treatment of the concepts and theory of the object technology that led to Eiffel's design.<sup id="cite_ref-4" class="reference"><a href="#cite_note-4">[4]</a></sup></p>
<p>The design goal behind the Eiffel language, libraries, and programming methods is to enable programmers to create reliable, reusable software modules. Eiffel supports <a href="/wiki/Multiple_inheritance" title="Multiple inheritance">multiple inheritance</a>, <a href="/wiki/Genericity" class="mw-redirect" title="Genericity">genericity</a>, <a href="/wiki/Polymorphism_(computer_science)" title="Polymorphism (computer science)">polymorphism</a>, <a href="/wiki/Encapsulation_(computer_science)" class="mw-redirect" title="Encapsulation (computer science)">encapsulation</a>, type-safe conversions, and <a href="/wiki/Parameter_covariance" class="mw-redirect" title="Parameter covariance">parameter covariance</a>. Eiffel's most important contribution to <a href="/wiki/Software_engineering" title="Software engineering">software engineering</a> is <a href="/wiki/Design_by_contract" title="Design by contract">design by contract</a> (DbC), in which <a href="/wiki/Assertion_(computing)" class="mw-redirect" title="Assertion (computing)">assertions</a>, <a href="/wiki/Precondition" title="Precondition">preconditions</a>, <a href="/wiki/Postcondition" title="Postcondition">postconditions</a>, and <a href="/wiki/Class_invariant" title="Class invariant">class invariants</a> are employed to help ensure program correctness without sacrificing efficiency.</p>
<p>Eiffel's design is based on object-oriented programming theory, with only minor influence of other paradigms or concern for support of legacy code. Eiffel formally supports <a href="/wiki/Abstract_data_type" title="Abstract data type">abstract data types</a>. Under Eiffel's design, a software text should be able to reproduce its design documentation from the text itself, using a formalized implementation of the "Abstract Data Type".</p>
<h3><span class="mw-headline" id="Implementations_and_environments">Implementations and environments</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/w/index.php?title=Eiffel_(programming_language)&amp;action=edit&amp;section=4" title="Edit section: Implementations and environments">edit</a><span class="mw-editsection-bracket">]</span></span></h3>
<p><a href="/wiki/EiffelStudio" title="EiffelStudio">EiffelStudio</a> is an <a href="/wiki/Integrated_development_environment" title="Integrated development environment">integrated development environment</a> available under either an <a href="/wiki/Open-source" class="mw-redirect" title="Open-source">open source</a> or a commercial license. It offers an object-oriented environment for <a href="/wiki/Software_engineering" title="Software engineering">software engineering</a>. EiffelEnvision is a plug-in for <a href="/wiki/Microsoft_Visual_Studio" title="Microsoft Visual Studio">Microsoft Visual Studio</a> that allows users to edit, compile, and debug Eiffel projects from within the Microsoft Visual Studio IDE. Five other <a href="/wiki/Open-source" class="mw-redirect" title="Open-source">open source</a> implementations are available: <a rel="nofollow" class="external text" href="http://www.sourceforge.net/projects/tecomp">"The Eiffel Compiler" tecomp</a>, Gobo Eiffel, <a href="/wiki/SmartEiffel" title="SmartEiffel">SmartEiffel</a>—the GNU implementation, based on an older version of the language—, <a href="/wiki/LibertyEiffel" title="LibertyEiffel">LibertyEiffel</a>—based on the SmartEiffel compiler— and <a href="/wiki/Visual_Eiffel" title="Visual Eiffel">Visual Eiffel</a>.</p>
<p>Several other programming languages incorporate elements first introduced in Eiffel. <a href="/wiki/Sather" title="Sather">Sather</a>, for example, was originally based on Eiffel but has since diverged, and now includes several <a href="/wiki/Functional_programming" title="Functional programming">functional programming</a> features. The interactive-teaching language <a href="/w/index.php?title=Blue_(programming_language)&amp;action=edit&amp;redlink=1" class="new" title="Blue (programming language) (page does not exist)">Blue</a>, forerunner of <a href="/wiki/BlueJ" title="BlueJ">BlueJ</a>, is also Eiffel-based. The <a href="/wiki/Apple_Media_Tool" title="Apple Media Tool">Apple Media Tool</a> includes an Eiffel-based Apple Media Language.</p>
<h3><span class="mw-headline" id="Specifications_and_standards">Specifications and standards</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/w/index.php?title=Eiffel_(programming_language)&amp;action=edit&amp;section=5" title="Edit section: Specifications and standards">edit</a><span class="mw-editsection-bracket">]</span></span></h3>
<p>The Eiffel language definition is an international standard of the <a href="/wiki/International_Organization_for_Standardization" title="International Organization for Standardization">ISO</a>. The standard was developed by <a href="/wiki/European_Computer_Manufacturers_Association" class="mw-redirect" title="European Computer Manufacturers Association">ECMA International</a>, which first approved the standard on 21 June 2005 as Standard ECMA-367, <cite>Eiffel: Analysis, Design and Programming Language</cite>. In June 2006, ECMA and ISO adopted the second version. In November 2006, ISO first published that version. The standard can be found and used free of charge on the ECMA site.<sup id="cite_ref-5" class="reference"><a href="#cite_note-5">[5]</a></sup> The ISO version<sup id="cite_ref-6" class="reference"><a href="#cite_note-6">[6]</a></sup> is identical in all respects except formatting.</p>
<p>Eiffel Software, "The Eiffel Compiler" tecomp and Eiffel-library-developer Gobo have committed to implementing the standard; Eiffel Software's EiffelStudio 6.1 and "The Eiffel Compiler" tecomp implement some of the major new mechanisms—in particular, inline agents, assigner commands, bracket notation, non-conforming inheritance, and attached types. The <a href="/wiki/SmartEiffel" title="SmartEiffel">SmartEiffel</a> team has turned away from this standard to create its own version of the language, which they believe to be closer to the original style of Eiffel. Object Tools has not disclosed whether future versions of its Eiffel compiler will comply with the standard. <a href="/wiki/LibertyEiffel" title="LibertyEiffel">LibertyEiffel</a> implements a dialect somewhere in between the <a href="/wiki/SmartEiffel" title="SmartEiffel">SmartEiffel</a> language and the standard.</p>
<p>The standard cites the following, predecessor Eiffel-language specifications:</p>
<ul>
<li>Bertrand Meyer: <cite>Eiffel: The Language</cite>, Prentice Hall, second printing, 1992 (first printing: 1991)</li>
<li>Bertrand Meyer: <cite>Standard Eiffel</cite> (revision of preceding entry), ongoing, 1997–present, at <a rel="nofollow" class="external text" href="http://www.inf.ethz.ch/~meyer/ongoing/etl"><cite>Bertrand Meyer's ETL3 page</cite></a>, and</li>
<li>Bertrand Meyer: <cite>Object-Oriented Software Construction</cite>, Prentice Hall: first edition, 1988; second edition, 1997.</li>
<li>Bertrand Meyer: <cite>Touch of Class: Learning to Program Well with Objects and Contracts</cite>, Springer-Verlag, 2009 <a href="/wiki/Special:BookSources/9783540921448" class="internal mw-magiclink-isbn">ISBN 978-3-540-92144-8</a> lxiv + 876 pages Full-color printing, numerous color photographs</li>
</ul>
<p>The current version of the standard from June 2006 contains some inconsistencies (e.g. covariant redefinitions)<sup class="noprint Inline-Template Template-Fact" style="white-space:nowrap;">[<i><a href="/wiki/Wikipedia:Citation_needed" title="Wikipedia:Citation needed"><span title="This claim needs references to reliable sources. (October 2010)">citation needed</span></a></i>]</sup>. The ECMA committee has not yet announced any timeline and direction on how to resolve the inconsistencies.</p>
<h2><span class="mw-headline" id="Syntax_and_semantics">Syntax and semantics</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/w/index.php?title=Eiffel_(programming_language)&amp;action=edit&amp;section=6" title="Edit section: Syntax and semantics">edit</a><span class="mw-editsection-bracket">]</span></span></h2>
<h3><span class="mw-headline" id="Overall_structure">Overall structure</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/w/index.php?title=Eiffel_(programming_language)&amp;action=edit&amp;section=7" title="Edit section: Overall structure">edit</a><span class="mw-editsection-bracket">]</span></span></h3>
<p>An Eiffel "system" or "program" is a collection of <i>classes</i>. Above the level of classes, Eiffel defines <i>cluster</i>, which is essentially a group of classes, and possibly of <i>subclusters</i> (nested clusters). Clusters are not a syntactic <a href="/wiki/Language_construct" title="Language construct">language construct</a>, but rather a standard organizational convention. Typically an Eiffel program will be organized with each class in a separate file, and each cluster in a directory containing class files. In this organization, subclusters are subdirectories. For example, under standard organizational and casing conventions, <code>x.e</code> might be the name of a file that defines a class called X.</p>
<p>A class contains <i>features</i>, which are similar to "routines", "members", "attributes" or "methods" in other object-oriented programming languages. A class also defines its invariants, and contains other properties, such as a "notes" section for documentation and metadata. Eiffel's standard data types, such as <code>INTEGER</code>, <code>STRING</code> and <code>ARRAY</code>, are all themselves classes.</p>
<p>Every system must have a class designated as "root", with one of its creation procedures designated as "root procedure". Executing a system consists of creating an instance of the root class and executing its root procedure. Generally, doing so creates new objects, calls new features, and so on.</p>
<p>Eiffel has five basic executable instructions: assignment, object creation, routine call, condition, and iteration. Eiffel's control structures are strict in enforcing structured programming: every block has exactly one entry and exactly one exit.</p>
<h4><span class="mw-headline" id="Scoping">Scoping</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/w/index.php?title=Eiffel_(programming_language)&amp;action=edit&amp;section=8" title="Edit section: Scoping">edit</a><span class="mw-editsection-bracket">]</span></span></h4>
<p>Unlike many object-oriented languages, but like <a href="/wiki/Smalltalk" title="Smalltalk">Smalltalk</a>, Eiffel does not permit any assignment into fields of objects, except within the features of an object, which is the practical application of the principle of <a href="/wiki/Information_hiding" title="Information hiding">information hiding</a> or data abstraction, requiring formal interfaces for data mutation. To put it in the language of other object-oriented programming languages, all Eiffel fields are "private", and "setters" are needed to modify values. An upshot of this is that "setters" can, and normally do, implement the invariants for which Eiffel provides syntax.</p>
<p>While Eiffel does not allow direct access to the features of a class by a client of the class, it does allow for the definition of an "assigner command", such as:</p>
<pre>
   <span style="color:green">some_attribute</span>: <span style="color:blue">SOME_TYPE</span> <b><span style="color:blue">assign</span></b> set_some_attribute
   
   <span style="color:green">set_some_attribute</span> (v: <span style="color:blue">VALUE_TYPE</span>)
               <span style="color:brown">-- Set value of some_attribute to `v'.</span>
           <b><span style="color:blue">do</span></b>
               some_attribute := v
           <b><span style="color:blue">end</span></b>
</pre>
<p>While a slight bow to the overall developer community to allow something looking like direct access (e.g. thereby breaking the Information Hiding Principle), the practice is dangerous as it hides or obfuscates the reality of a "setter" being used. In practice, it is better to read the direct call to a setter rather than implying a direct access to a feature like <code>some_attribute</code> as in the example code above.</p>
<p>Unlike other languages, having notions of "public", "private" and so on, Eiffel uses an exporting technology to more precisely control the scoping between client and supplier classes. Moreover, the export logic used can be checked statically by the compiler, which allows earlier detection of scope violating calls at compile-time rather than run-time. For example (below), the "{NONE}" is similar to "private" in other languages. Scope applied this way to a "feature set" (e.g. everything below the 'feature' keyword to either the next feature set keyword or the end of the class) can be changed in descendant classes using the "export" keyword.</p>
<div class="mw-highlight mw-content-ltr" dir="ltr">
<pre>
<span class="kr">feature</span> <span class="p">{</span><span class="kr">NONE</span><span class="p">}</span> <span class="c1">-- Initialization</span>
	<span class="n">default_create</span>
			<span class="c1">-- Initialize a new `zero' decimal instance.</span>
		<span class="kr">do</span>
			<span class="n">make_zero</span>
		<span class="kr">end</span>
</pre></div>
<p>Alternatively, the lack of a {x} export declaration implies {ANY} and is similar to the "public" scoping of other languages.</p>
<div class="mw-highlight mw-content-ltr" dir="ltr">
<pre>
<span class="kr">feature</span> <span class="c1">-- Constants</span>
</pre></div>
<p>Finally, scoping can be selectively and precisely controlled to any class in the Eiffel project universe, such as:</p>
<div class="mw-highlight mw-content-ltr" dir="ltr">
<pre>
<span class="kr">feature</span> <span class="p">{</span><span class="nc">DECIMAL</span><span class="p">,</span> <span class="nc">DCM_MA_DECIMAL_PARSER</span><span class="p">,</span> <span class="nc">DCM_MA_DECIMAL_HANDLER</span><span class="p">}</span> <span class="c1">-- Access</span>
</pre></div>
<p>Here, the compiler will allow only the classes listed between the curly braces to access the features within the feature group (e.g. <tt>DECIMAL, DCM_MA_DECIMAL_PARSER, DCM_MA_DECIMAL_HANDLER</tt>).</p>
<h4><span class="mw-headline" id=".22Hello.2C_world.21.22">"Hello, world!"</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/w/index.php?title=Eiffel_(programming_language)&amp;action=edit&amp;section=9" title="Edit section: &quot;Hello, world!&quot;">edit</a><span class="mw-editsection-bracket">]</span></span></h4>
<p>A programming language's look and feel is often conveyed using a <a href="/wiki/Hello_world_program" class="mw-redirect" title="Hello world program">"Hello, world!"</a> program. Such a program written in Eiffel might be:</p>
<div class="mw-highlight mw-content-ltr" dir="ltr">
<pre>
<span class="kr">class</span>
    <span class="nc">HELLO_WORLD</span>
<span class="kr">create</span>
    <span class="n">make</span>
<span class="kr">feature</span>
    <span class="n">make</span>
        <span class="kr">do</span>
            <span class="n">print</span> <span class="p">(</span><span class="s">"Hello, world!%N"</span><span class="p">)</span>
        <span class="kr">end</span>
<span class="kr">end</span>
</pre></div>
<p>This program contains the class <code>HELLO_WORLD</code>. The constructor (create routine) for the class, named <code>make</code>, invokes the <code>print</code> system library routine to write a <code>"Hello,</code>&#160;<code>world!"</code> message to the output.</p>
<h3><span class="mw-headline" id="Design_by_contract">Design by contract</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/w/index.php?title=Eiffel_(programming_language)&amp;action=edit&amp;section=10" title="Edit section: Design by contract">edit</a><span class="mw-editsection-bracket">]</span></span></h3>
<div role="note" class="hatnote">Main article: <a href="/wiki/Design_by_contract" title="Design by contract">Design by contract</a></div>
<p>The concept of Design by Contract is central to Eiffel. The contracts assert what must be true before a routine is executed (precondition) and what must hold to be true after the routine finishes (post-condition). Class Invariant contracts define what assertions must hold true both before and after any feature of a class is accessed (both routines and attributes). Moreover, contracts codify into executable code developer and designers assumptions about the operating environment of the features of a class or the class as a whole by means of the invariant.</p>
<p>The Eiffel compiler is designed to include the feature and class contracts in various levels. EiffelStudio, for example, executes all feature and class contracts during execution in the "Workbench mode." When an executable is created, the compiler is instructed by way of the project settings file (e.g. ECF file) to either include or exclude any set of contracts. Thus, an executable file can be compiled to either include or exclude any level of contract, thereby bringing along continuous levels of unit and integration testing. Moreover, contracts can be continually and methodically exercised by way of the <a rel="nofollow" class="external text" href="http://docs.eiffel.com/book/eiffelstudio/autotest">Auto-Test</a> feature found in EiffelStudio.</p>
<p>The Design by Contract mechanisms are tightly integrated with the language and guide redefinition of features in inheritance:</p>
<ul>
<li>Routine precondition: The precondition may only be weakened by inheritance; any call that meets the requirements of the ancestor meets those of the descendant.</li>
<li>Routine postcondition: The postcondition can only be strengthened by inheritance; any result guaranteed by the ancestor is still provided by the descendant.</li>
<li>Class invariant: Conditions that must hold true after the object's creation and after any call to an exported class routine. Because the invariant is checked so often, it makes it simultaneously the most expensive and most powerful form of condition or contract.</li>
</ul>
<p>In addition, the language supports a "check instruction" (a kind of "assert"), loop invariants, and loop variants (which guarantee loop termination).</p>
<h3><span class="mw-headline" id="Void-safety">Void-safety</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/w/index.php?title=Eiffel_(programming_language)&amp;action=edit&amp;section=11" title="Edit section: Void-safety">edit</a><span class="mw-editsection-bracket">]</span></span></h3>
<p><a href="/wiki/Void_safety" title="Void safety">Void-safety</a>, like static typing, is another facility for improving software quality. Void-safe software is protected from run time errors caused by calls to void references, and therefore will be more reliable than software in which calls to void targets can occur. The analogy to static typing is a useful one. In fact, void-safe capability could be seen as an extension to the type system, or a step beyond static typing, because the mechanism for ensuring void-safety is integrated into the type system.</p>
<p>The guard against void target calls can be seen by way of the notion of attachment and (by extension) detachment (e.g. detachable keyword). The void-safe facility can be seen in a short re-work of the example code used above:</p>
<pre>
   <span style="color:green">some_attribute</span>: <b><span style="color:blue">detachable</span></b> <span style="color:blue">SOME_TYPE</span>
   
   <span style="color:green">use_some_attribute</span>
               <span style="color:brown">-- Set value of some_attribute to `v'.</span>
           <b><span style="color:blue">do</span></b>
               if <b><span style="color:blue">attached</span></b> some_attribute <b><span style="color:blue">as</span></b> l_attribute <b><span style="color:blue">then</span></b>
                   do_something (l_attribute)
               end
           <b><span style="color:blue">end</span></b>
   
   <span style="color:green">do_something</span> (a_value: SOME_TYPE)
               <span style="color:brown">-- Do something with `a_value'.</span>
           <b><span style="color:blue">do</span></b>
              ... doing something with `a_value' ...
           <b><span style="color:blue">end</span></b>
</pre>
<p>The code example above shows how the compiler can statically address the reliability of whether <code>some_attribute</code> will be attached or detached at the point it is used. Notably, the <code>attached</code> keyword allows for an "attachment local" (e.g. <code>l_attribute</code>), which is scoped to only the block of code enclosed by the if-statement construct. Thus, within this small block of code, the local variable (e.g. <code>l_attribute</code>) can be statically guaranteed to be non-void (i.e. void-safe).</p>
<h3><span class="mw-headline" id="Features.2C_commands.2C_and_queries">Features, commands, and queries</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/w/index.php?title=Eiffel_(programming_language)&amp;action=edit&amp;section=12" title="Edit section: Features, commands, and queries">edit</a><span class="mw-editsection-bracket">]</span></span></h3>
<p>The primary characteristic of a class is that it defines a set of features: as a class represents a set of run-time objects, or "instances", a feature is an operation on these objects. There are two kinds of features: queries and commands. A query provides information about an instance. A command modifies an instance.</p>
<p>The command-query distinction is important to the Eiffel method. In particular:</p>
<ul>
<li><a href="/wiki/Uniform-Access_Principle" class="mw-redirect" title="Uniform-Access Principle">Uniform-Access Principle</a>: from the point of view of a software client making a call to a class feature, whether a query is an attribute (field value) or a function (computed value) should not make any difference. For example <code>a_vehicle.speed</code> could be an attribute accessed on the object <code>a_vehicle</code>, or it could be computed by a function that divides distance by time. The notation is the same in both cases, so that it is easy to change the class's implementation without affecting client software.</li>
<li><a href="/wiki/Command-Query_Separation" class="mw-redirect" title="Command-Query Separation">Command-Query Separation Principle</a>: Queries must not modify the instance. This is not a language rule but a methodological principle. So in good Eiffel style, one does not find "get" functions that change something and return a result; instead there are commands (procedures) to change objects, and queries to obtain information about the object, resulting from preceding changes.</li>
</ul>
<h3><span class="mw-headline" id="Overloading">Overloading</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/w/index.php?title=Eiffel_(programming_language)&amp;action=edit&amp;section=13" title="Edit section: Overloading">edit</a><span class="mw-editsection-bracket">]</span></span></h3>
<p>Eiffel does not allow argument <a href="/wiki/Method_overloading" class="mw-redirect" title="Method overloading">overloading</a>. Each feature name within a class always maps to a specific feature within the class. One name, within one class, means one thing. This design choice helps the readability of classes, by avoiding a cause of ambiguity about which routine will be invoked by a call. It also simplifies the language mechanism; in particular, this is what makes Eiffel's multiple inheritance mechanism possible.<sup id="cite_ref-7" class="reference"><a href="#cite_note-7">[7]</a></sup></p>
<p>Names can, of course, be reused in different classes. For example the feature <tt>plus</tt> (along with its infix <a href="#Operator_and_bracket_syntax.2C_assigner_commands">alias</a> <tt>"+"</tt>) is defined in several classes: <tt>INTEGER</tt>, <tt>REAL</tt>, <tt>STRING</tt>, etc.</p>
<h3><span class="mw-headline" id="Genericity">Genericity</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/w/index.php?title=Eiffel_(programming_language)&amp;action=edit&amp;section=14" title="Edit section: Genericity">edit</a><span class="mw-editsection-bracket">]</span></span></h3>
<div role="note" class="hatnote">See also: <a href="/wiki/Generic_programming#Genericity_in_Eiffel" title="Generic programming">Generic programming §&#160;Genericity in Eiffel</a></div>
<p>A generic class is a class that varies by type (e.g. LIST [PHONE], a list of phone numbers; ACCOUNT [G-&gt;ACCOUNT_TYPE], allowing for ACCOUNT [SAVINGS] and ACCOUNT [CHECKING], etc.). Classes can be generic, to express that they are parameterized by types. Generic parameters appear in square brackets:</p>
<div class="mw-highlight mw-content-ltr" dir="ltr">
<pre>
<span class="kr">class</span> <span class="nc">LIST</span> <span class="o">[</span><span class="nc">G</span><span class="o">]</span> <span class="p">...</span>
</pre></div>
<p>G is known as a "formal generic parameter". (Eiffel reserves "argument" for routines, and uses "parameter" only for generic classes.) With such a declaration G represents within the class an arbitrary type; so a function can return a value of type G, and a routine can take an argument of that type:</p>
<div class="mw-highlight mw-content-ltr" dir="ltr">
<pre>
<span class="n">item</span><span class="p">:</span> <span class="nc">G</span> <span class="kr">do</span> <span class="p">...</span> <span class="kr">end</span>
<span class="n">put</span> <span class="p">(</span><span class="n">x</span><span class="p">:</span> <span class="nc">G</span><span class="p">)</span> <span class="kr">do</span> <span class="p">...</span> <span class="kr">end</span>
</pre></div>
<p>The <code>LIST [INTEGER]</code> and <code>LIST [WORD]</code> are "generic derivations" of this class. Permitted combinations (with <code>n: INTEGER</code>, <code>w: WORD</code>, <code>il: LIST [INTEGER]</code>, <code>wl: LIST [WORD]</code>) are:</p>
<div class="mw-highlight mw-content-ltr" dir="ltr">
<pre>
<span class="n">n</span> <span class="o">:=</span> <span class="n">il</span><span class="p">.</span><span class="n">item</span>
<span class="n">wl</span><span class="p">.</span><span class="n">put</span> <span class="p">(</span><span class="n">w</span><span class="p">)</span>
</pre></div>
<p><code>INTEGER</code> and <code>WORD</code> are the "actual generic parameters" in these generic derivations.</p>
<p>It is also possible to have 'constrained' formal parameters, for which the actual parameter must inherit from a given class, the "constraint". For example in</p>
<div class="mw-highlight mw-content-ltr" dir="ltr">
<pre>
   <span class="kr">class</span> <span class="nc">HASH_TABLE</span> <span class="o">[</span><span class="nc">G</span><span class="p">,</span> <span class="nc">KEY</span> <span class="o">-&gt;</span> <span class="nc">HASHABLE</span><span class="o">]</span>
</pre></div>
<p>a derivation <code>HASH_TABLE [INTEGER, STRING]</code> is valid only if <code>STRING</code> inherits from <code>HASHABLE</code> (as it indeed does in typical Eiffel libraries). Within the class, having <code>KEY</code> constrained by <code>HASHABLE</code> means that for <code>x: KEY</code> it is possible to apply to <code>x</code> all the features of <code>HASHABLE</code>, as in <code>x.hash_code</code>.</p>
<h3><span class="mw-headline" id="Inheritance_basics">Inheritance basics</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/w/index.php?title=Eiffel_(programming_language)&amp;action=edit&amp;section=15" title="Edit section: Inheritance basics">edit</a><span class="mw-editsection-bracket">]</span></span></h3>
<p>To inherit from one or more others, a class will include an <code>inherit</code> clause at the beginning:</p>
<div class="mw-highlight mw-content-ltr" dir="ltr">
<pre>
<span class="kr">class</span> <span class="nc">C</span> <span class="kr">inherit</span>
   <span class="nc">A</span>
   <span class="nc">B</span>

<span class="c1">-- ... Rest of class declaration ...</span>
</pre></div>
<p>The class may redefine (override) some or all of the inherited features. This must be explicitly announced at the beginning of the class through a <code>redefine</code> subclause of the inheritance clause, as in</p>
<div class="mw-highlight mw-content-ltr" dir="ltr">
<pre>
<span class="kr">class</span> <span class="nc">C</span> <span class="kr">inherit</span>
    <span class="nc">A</span>
        <span class="kr">redefine</span> <span class="n">f</span><span class="p">,</span> <span class="n">g</span><span class="p">,</span> <span class="n">h</span> <span class="kr">end</span>
    <span class="nc">B</span>
        <span class="kr">redefine</span> <span class="n">u</span><span class="p">,</span> <span class="n">v</span> <span class="kr">end</span>
</pre></div>
<p>See<sup id="cite_ref-8" class="reference"><a href="#cite_note-8">[8]</a></sup> for a complete discussion of Eiffel inheritance.</p>
<h3><span class="mw-headline" id="Deferred_classes_and_features">Deferred classes and features</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/w/index.php?title=Eiffel_(programming_language)&amp;action=edit&amp;section=16" title="Edit section: Deferred classes and features">edit</a><span class="mw-editsection-bracket">]</span></span></h3>
<p>Classes may be defined with <code>deferred class</code> rather than with <code>class</code> to indicate that the class may not be directly instantiated. Non-instantiatable classes are called <a href="/wiki/Abstract_class" class="mw-redirect" title="Abstract class">abstract classes</a> in some other object-oriented programming languages. In Eiffel parlance, only an "effective" class can be instantiated (it may be a descendent of a deferred class). A feature can also be deferred by using the <code>deferred</code> keyword in place of a <code>do</code> clause. If a class has any deferred features it must be declared as deferred; however, a class with no deferred features may nonetheless itself be deferred.</p>
<p>Deferred classes play some of the same role as interfaces in languages such as Java, though many object-oriented programming theorists believe interfaces are themselves largely an answer to Java's lack of multiple inheritance (which Eiffel has).<sup id="cite_ref-9" class="reference"><a href="#cite_note-9">[9]</a></sup><sup id="cite_ref-10" class="reference"><a href="#cite_note-10">[10]</a></sup><sup id="cite_ref-11" class="reference"><a href="#cite_note-11">[11]</a></sup></p>
<h3><span class="mw-headline" id="Renaming">Renaming</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/w/index.php?title=Eiffel_(programming_language)&amp;action=edit&amp;section=17" title="Edit section: Renaming">edit</a><span class="mw-editsection-bracket">]</span></span></h3>
<p>A class that inherits from one or more others gets all its features, by default under their original names. It may, however, change their names through <code>rename</code> clauses. This is required in the case of multiple inheritance if there are name clashes between inherited features; without renaming, the resulting class would violate the no-overloading principle noted above and hence would be invalid.</p>
<h3><span class="mw-headline" id="Tuples">Tuples</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/w/index.php?title=Eiffel_(programming_language)&amp;action=edit&amp;section=18" title="Edit section: Tuples">edit</a><span class="mw-editsection-bracket">]</span></span></h3>
<p>Tuples types may be viewed as a simple form of class, providing only attributes and the corresponding "setter" procedure. A typical tuple type reads</p>
<div class="mw-highlight mw-content-ltr" dir="ltr">
<pre>
   <span class="nc">TUPLE</span> <span class="o">[</span><span class="n">name</span><span class="p">:</span> <span class="nc">STRING</span><span class="p">;</span> <span class="n">weight</span><span class="p">:</span> <span class="nc">REAL</span><span class="p">;</span> <span class="n">date</span><span class="p">:</span> <span class="nc">DATE</span><span class="o">]</span>
</pre></div>
<p>and could be used to describe a simple notion of birth record if a class is not needed. An instance of such a tuple is simply a sequence of values with the given types, given in brackets, such as</p>
<div class="mw-highlight mw-content-ltr" dir="ltr">
<pre>
   <span class="o">[</span><span class="s">"Brigitte"</span><span class="p">,</span> <span class="mf">3.5</span><span class="p">,</span> <span class="n">Last_night</span><span class="o">]</span>
</pre></div>
<p>Components of such a tuple can be accessed as if the tuple tags were attributes of a class, for example if <code>t</code> has been assigned the above tuple then <code>t.weight</code> has value 3.5.</p>
<p>Thanks to the notion of assigner command (see below), dot notation can also be used to assign components of such a tuple, as in</p>
<div class="mw-highlight mw-content-ltr" dir="ltr">
<pre>
   <span class="n">t</span><span class="p">.</span><span class="n">weight</span> <span class="o">:=</span> <span class="n">t</span><span class="p">.</span><span class="n">weight</span> <span class="o">+</span> <span class="mf">0.5</span>
</pre></div>
<p>The tuple tags are optional, so that it is also possible to write a tuple type as <code>TUPLE [STRING, REAL, DATE]</code>. (In some compilers this is the only form of tuple, as tags were introduced with the ECMA standard.)</p>
<p>The precise specification of e.g. <code>TUPLE [A, B, C]</code> is that it describes sequences of <i>at least</i> three elements, the first three being of types <code>A</code>, <code>B</code>, <code>C</code> respectively. As a result <code>TUPLE [A, B, C]</code> conforms to (may be assigned to) <code>TUPLE [A, B]</code>, to <code>TUPLE [A]</code> and to <code>TUPLE</code> (without parameters), the topmost tuple type to which all tuple types conform.</p>
<h3><span class="mw-headline" id="Agents">Agents</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/w/index.php?title=Eiffel_(programming_language)&amp;action=edit&amp;section=19" title="Edit section: Agents">edit</a><span class="mw-editsection-bracket">]</span></span></h3>
<p>Eiffel's "agent" mechanism wraps operations into objects. This mechanism can be used for iteration, <a href="/wiki/Event-driven_programming" title="Event-driven programming">event-driven programming</a>, and other contexts in which it is useful to pass operations around the program structure. Other programming languages, especially ones that emphasize <a href="/wiki/Functional_programming" title="Functional programming">functional programming</a>, allow a similar pattern using <a href="/wiki/Continuations" class="mw-redirect" title="Continuations">continuations</a>, <a href="/wiki/Closure_(computer_science)" class="mw-redirect" title="Closure (computer science)">closures</a>, or <a href="/wiki/Generator_(computer_science)" class="mw-redirect" title="Generator (computer science)">generators</a>; Eiffel's agents emphasize the language's object-oriented paradigm, and use a syntax and semantics similar to code blocks in <a href="/wiki/Smalltalk" title="Smalltalk">Smalltalk</a> and <a href="/wiki/Ruby_(programming_language)" title="Ruby (programming language)">Ruby</a>.</p>
<p>For example, to execute the <code>my_action</code> block for each element of <code>my_list</code>, one would write:</p>
<div class="mw-highlight mw-content-ltr" dir="ltr">
<pre>
   <span class="n">my_list</span><span class="p">.</span><span class="n">do_all</span> <span class="p">(</span><span class="kr">agent</span> <span class="n">my_action</span><span class="p">)</span>
</pre></div>
<p>To execute <code>my_action</code> only on elements satisfying <code>my_condition</code>, a limitation/filter can be added:</p>
<div class="mw-highlight mw-content-ltr" dir="ltr">
<pre>
   <span class="n">my_list</span><span class="p">.</span><span class="n">do_if</span> <span class="p">(</span><span class="kr">agent</span> <span class="n">my_action</span><span class="p">,</span> <span class="kr">agent</span> <span class="n">my_condition</span><span class="p">)</span>
</pre></div>
<p>In these examples, <code>my_action</code> and <code>my_condition</code> are routines. Prefixing them with <code>agent</code> yields an object that represents the corresponding routine with all its properties, in particular the ability to be called with the appropriate arguments. So if <code>a</code> represents that object (for example because <code>a</code> is the argument to <code>do_all</code>), the instruction</p>
<div class="mw-highlight mw-content-ltr" dir="ltr">
<pre>
   <span class="n">a</span><span class="p">.</span><span class="n">call</span> <span class="p">(</span><span class="o">[</span><span class="n">x</span><span class="o">]</span><span class="p">)</span>
</pre></div>
<p>will call the original routine with the argument <code>x</code>, as if we had directly called the original routine: <code>my_action (x)</code>. Arguments to <code>call</code> are passed as a tuple, here <code>[x]</code>.</p>
<p>It is possible to keep some arguments to an agent <b>open</b> and make others <b>closed</b>. The open arguments are passed as arguments to <code>call</code>: they are provided at the time of <i>agent use</i>. The closed arguments are provided at the time of agent <i>definition</i>. For example, if <code>action2</code> has two arguments, the iteration</p>
<div class="mw-highlight mw-content-ltr" dir="ltr">
<pre>
   <span class="n">my_list</span><span class="p">.</span><span class="n">do_all</span> <span class="p">(</span><span class="kr">agent</span> <span class="n">action2</span> <span class="p">(</span><span class="o">?</span><span class="p">,</span> <span class="n">y</span><span class="p">))</span>
</pre></div>
<p>iterates <code>action2 (x, y)</code> for successive values of <code>x</code>, where the second argument remains set to <code>y</code>. The question mark <code>?</code> indicates an open argument; <code>y</code> is a closed argument of the agent. Note that the basic syntax <code>agent f</code> is a shorthand for <code>agent f (?,&#160;?, ...)</code> with all arguments open. It is also possible to make the <i>target</i> of an agent open through the notation <code>{T}?</code> where <code>T</code> is the type of the target.</p>
<p>The distinction between open and closed operands (operands = arguments + target) corresponds to the distinction between bound and free variables in <a href="/wiki/Lambda_calculus" title="Lambda calculus">lambda calculus</a>. An agent expression such as <code>action2 (?, y)</code> with some operands closed and some open corresponds to a version of the original operation <i><a href="/wiki/Currying" title="Currying">curried</a></i> on the closed operands.</p>
<p>The agent mechanism also allows defining an agent without reference to an existing routine (such as <code>my_action</code>, <code>my_condition</code>, <code>action2</code>), through inline agents as in</p>
<div class="mw-highlight mw-content-ltr" dir="ltr">
<pre>
<span class="n">my_list</span><span class="p">.</span><span class="n">do_all</span> <span class="p">(</span><span class="kr">agent</span> <span class="p">(</span><span class="n">s</span><span class="p">:</span> <span class="nc">STRING</span><span class="p">)</span>
     <span class="kr">require</span>
         <span class="n">not_void</span><span class="p">:</span> <span class="n">s</span> <span class="o">/=</span> <span class="kc">Void</span>
     <span class="kr">do</span>
         <span class="n">s</span><span class="p">.</span><span class="n">append_character</span> <span class="p">(</span><span class="sc">','</span><span class="p">)</span>
     <span class="kr">ensure</span>
         <span class="n">appended</span><span class="p">:</span> <span class="n">s</span><span class="p">.</span><span class="n">count</span> <span class="o">=</span> <span class="kr">old</span> <span class="n">s</span><span class="p">.</span><span class="n">count</span> <span class="o">+</span> <span class="mi">1</span>
     <span class="kr">end</span><span class="p">)</span>
</pre></div>
<p>The inline agent passed here can have all the trappings of a normal routine, including precondition, postcondition, rescue clause (not used here), and a full signature. This avoids defining routines when all that's needed is a computation to be wrapped in an agent. This is useful in particular for contracts, as in an invariant clause that expresses that all elements of a list are positive:</p>
<div class="mw-highlight mw-content-ltr" dir="ltr">
<pre>
   <span class="n">my_list</span><span class="p">.</span><span class="n">for_all</span> <span class="p">(</span><span class="kr">agent</span> <span class="p">(</span><span class="n">x</span><span class="p">:</span> <span class="nc">INTEGER</span><span class="p">):</span> <span class="nc">BOOLEAN</span> <span class="kr">do</span> <span class="kc">Result</span> <span class="o">:=</span> <span class="p">(</span><span class="n">x</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">)</span> <span class="kr">end</span><span class="p">)</span>
</pre></div>
<p>The current agent mechanism leaves a possibility of run-time type error (if a routine with <i>n</i> arguments is passed to an agent expecting <i>m</i> arguments with <i>m</i> &lt; <i>n</i>). This can be avoided by a run-time check through the precondition <code>valid_arguments</code> of <code>call</code>. Several proposals for a purely static correction of this problem are available, including a language change proposal by Ribet et al.<sup id="cite_ref-12" class="reference"><a href="#cite_note-12">[12]</a></sup></p>
<h3><span class="mw-headline" id="Once_routines">Once routines</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/w/index.php?title=Eiffel_(programming_language)&amp;action=edit&amp;section=20" title="Edit section: Once routines">edit</a><span class="mw-editsection-bracket">]</span></span></h3>
<p>A routine's result can be cached using the <code>once</code> keyword in place of <code>do</code>. Non-first calls to a routine require no additional computation or resource allocation, but simply return a previously computed result. A common pattern for "once functions" is to provide shared objects; the first call will create the object, subsequent ones will return the reference to that object. The typical scheme is:</p>
<div class="mw-highlight mw-content-ltr" dir="ltr">
<pre>
<span class="n">shared_object</span><span class="p">:</span> <span class="nc">SOME_TYPE</span>
    <span class="kr">once</span>
        <span class="kr">create</span> <span class="kc">Result</span><span class="p">.</span><span class="n">make</span> <span class="p">(</span><span class="n">args</span><span class="p">)</span>
             <span class="c1">-- This creates the object and returns a reference to it through `Result'.</span>
    <span class="kr">end</span>
</pre></div>
<p>The returned object—<code>Result</code> in the example—can itself be mutable, but its reference remains the same.</p>
<p>Often "once routines" perform a required initialization: multiple calls to a library can include a call to the initialization procedure, but only the first such call will perform the required actions. Using this pattern initialization can be decentralized, avoiding the need for a special initialization module. "Once routines" are similar in purpose and effect to the <a href="/wiki/Singleton_pattern" title="Singleton pattern">singleton pattern</a> in many programming languages, and to the <a href="https://en.wikibooks.org/wiki/Computer_Science_Design_Patterns/Singleton#Python" class="extiw" title="b:Computer Science Design Patterns/Singleton">Borg pattern</a> used in Python.</p>
<p>By default, a "once routine" is called <i>once per thread</i>. The semantics can be adjusted to <i>once per process</i> or <i>once per object</i> by qualifying it with a "once key", e.g. <code>once ("PROCESS")</code>.</p>
<h3><span class="mw-headline" id="Conversions">Conversions</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/w/index.php?title=Eiffel_(programming_language)&amp;action=edit&amp;section=21" title="Edit section: Conversions">edit</a><span class="mw-editsection-bracket">]</span></span></h3>
<p>Eiffel provides a mechanism to allow conversions between various types. The mechanisms coexists with inheritance and complements it. To avoid any confusion between the two mechanisms, the design enforces the following principle:</p>
<dl>
<dd><b>(Conversion principle) A type may not both conform and convert to another.</b></dd>
</dl>
<p>For example <code>NEWSPAPER</code> may conform to <code>PUBLICATION</code>, but <code>INTEGER</code> converts to <code>REAL</code> (and does not inherit from it).</p>
<p>The conversion mechanism simply generalizes the ad hoc conversion rules (such as indeed between <code>INTEGER</code> and <code>REAL</code>) that exist in most programming languages, making them applicable to any type as long as the above principle is observed. For example a <code>DATE</code> class may be declared to convert to <code>STRING</code>; this makes it possible to create a string from a date simply through</p>
<div class="mw-highlight mw-content-ltr" dir="ltr">
<pre>
   <span class="n">my_string</span> <span class="o">:=</span> <span class="n">my_date</span>
</pre></div>
<p>as a shortcut for using an explicit object creation with a conversion procedure:</p>
<div class="mw-highlight mw-content-ltr" dir="ltr">
<pre>
   <span class="kr">create</span> <span class="n">my_string</span><span class="p">.</span><span class="n">make_from_date</span> <span class="p">(</span><span class="n">my_date</span><span class="p">)</span>
</pre></div>
<p>To make the first form possible as a synonym for the second, it suffices to list the creation procedure (constructor) <code>make_from_date</code> in a <code>convert</code> clause at the beginning of the class.</p>
<p>As another example, if there is such a conversion procedure listed from <code>TUPLE [day: INTEGER; month: STRING; year: INTEGER]</code>, then one can directly assign a tuple to a date, causing the appropriate conversion, as in</p>
<div class="mw-highlight mw-content-ltr" dir="ltr">
<pre>
      <span class="n">Bastille_day</span> <span class="o">:=</span> <span class="o">[</span><span class="mi">14</span><span class="p">,</span> <span class="s">"July"</span><span class="p">,</span> <span class="mi">1789</span><span class="o">]</span>
</pre></div>
<h3><span class="mw-headline" id="Exception_handling">Exception handling</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/w/index.php?title=Eiffel_(programming_language)&amp;action=edit&amp;section=22" title="Edit section: Exception handling">edit</a><span class="mw-editsection-bracket">]</span></span></h3>
<p><a href="/wiki/Exception_handling" title="Exception handling">Exception handling</a> in Eiffel is based on the principles of design by contract. For example, an exception occurs when a routine's caller fails to satisfy a precondition, or when a routine cannot ensure a promised postcondition. In Eiffel, exception handling is not used for <a href="/wiki/Control_flow" title="Control flow">control flow</a> or to correct data-input mistakes.</p>
<p>An Eiffel exception handler is defined using the <tt>rescue</tt> keyword. Within the <tt>rescue</tt> section, the <tt>retry</tt> keyword executes the routine again. For example, the following routine tracks the number of attempts at executing the routine, and only retries a certain number of times:</p>
<div class="mw-highlight mw-content-ltr" dir="ltr">
<pre>
<span class="n">connect_to_server</span> <span class="p">(</span><span class="n">server</span><span class="p">:</span> <span class="nc">SOCKET</span><span class="p">)</span>
      <span class="c1">-- Connect to a server or give up after 10 attempts.</span>
    <span class="kr">require</span>
        <span class="n">server</span> <span class="o">/=</span> <span class="kc">Void</span> <span class="ow">and then</span> <span class="n">server</span><span class="p">.</span><span class="n">address</span> <span class="o">/=</span> <span class="kc">Void</span>
    <span class="kr">local</span>
        <span class="n">attempts</span><span class="p">:</span> <span class="nc">INTEGER</span>
    <span class="kr">do</span>
        <span class="n">server</span><span class="p">.</span><span class="n">connect</span>
    <span class="kr">ensure</span>
      <span class="n">connected</span><span class="p">:</span> <span class="n">server</span><span class="p">.</span><span class="n">is_connected</span>
    <span class="kr">rescue</span>
        <span class="kr">if</span> <span class="n">attempts</span> <span class="o">&lt;</span> <span class="mi">10</span> <span class="kr">then</span>
            <span class="n">attempts</span> <span class="o">:=</span> <span class="n">attempts</span> <span class="o">+</span> <span class="mi">1</span>
            <span class="kr">retry</span>
        <span class="kr">end</span>
    <span class="kr">end</span>
</pre></div>
<p>This example is arguably flawed for anything but the simplest programs, however, because connection failure is to be expected. For most programs a routine name like <tt>attempt_connecting_to_server</tt> would be better, and the postcondition would not promise a connection, leaving it up to the caller to take appropriate steps if the connection was not opened.</p>
<h3><span class="mw-headline" id="Concurrency">Concurrency</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/w/index.php?title=Eiffel_(programming_language)&amp;action=edit&amp;section=23" title="Edit section: Concurrency">edit</a><span class="mw-editsection-bracket">]</span></span></h3>
<p>A number of networking and threading libraries are available, such as EiffelNet and EiffelThreads. A concurrency model for Eiffel, based on the concepts of design by contract, is <a href="/wiki/SCOOP_(software)" title="SCOOP (software)">SCOOP</a>, or <i>Simple Concurrent Object-Oriented Programming</i>, not yet part of the official language definition but available in <a href="/wiki/EiffelStudio" title="EiffelStudio">EiffelStudio</a>. CAMEO<sup id="cite_ref-13" class="reference"><a href="#cite_note-13">[13]</a></sup> is an (unimplemented) variation of SCOOP for Eiffel. Concurrency also interacts with exceptions. Asynchronous exceptions can be troublesome (where a routine raises an exception after its caller has itself finished).<sup id="cite_ref-14" class="reference"><a href="#cite_note-14">[14]</a></sup></p>
<h3><span class="mw-headline" id="Operator_and_bracket_syntax.2C_assigner_commands">Operator and bracket syntax, assigner commands</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/w/index.php?title=Eiffel_(programming_language)&amp;action=edit&amp;section=24" title="Edit section: Operator and bracket syntax, assigner commands">edit</a><span class="mw-editsection-bracket">]</span></span></h3>
<p>Eiffel's view of computation is completely object-oriented in the sense that every operation is relative to an object, the "target". So for example an addition such as</p>
<div class="mw-highlight mw-content-ltr" dir="ltr">
<pre>
<span class="n">a</span> <span class="o">+</span> <span class="n">b</span>
</pre></div>
<p>is conceptually understood as if it were the method call</p>
<div class="mw-highlight mw-content-ltr" dir="ltr">
<pre>
<span class="n">a</span><span class="p">.</span><span class="n">plus</span> <span class="p">(</span><span class="n">b</span><span class="p">)</span>
</pre></div>
<p>with target <code>a</code>, feature <code>plus</code> and argument <code>b</code>.</p>
<p>Of course, the former is the conventional syntax and usually preferred. Operator syntax makes it possible to use either form by declaring the feature (for example in <code>INTEGER</code>, but this applies to other basic classes and can be used in any other for which such an operator is appropriate):</p>
<div class="mw-highlight mw-content-ltr" dir="ltr">
<pre>
<span class="n">plus</span> <span class="kr">alias</span> <span class="s">"+"</span> <span class="p">(</span><span class="n">other</span><span class="p">:</span> <span class="nc">INTEGER</span><span class="p">):</span> <span class="nc">INTEGER</span>
        <span class="c1">-- ... Normal function declaration...</span>
    <span class="kr">end</span>
</pre></div>
<p>The range of operators that can be used as "alias" is quite broad; they include predefined operators such as "+" but also "free operators" made of non-alphanumeric symbols. This makes it possible to design special infix and prefix notations, for example in mathematics and physics applications.</p>
<p>Every class may in addition have <i>one</i> function aliased to "[]", the "bracket" operator, allowing the notation <code>a [i, ...]</code> as a synonym for <code>a.f (i, ...)</code> where <code>f</code> is the chosen function. This is particularly useful for container structures such as arrays, hash tables, lists etc. For example access to an element of a hash table with string keys can be written</p>
<div class="mw-highlight mw-content-ltr" dir="ltr">
<pre>
   <span class="n">number</span> <span class="o">:=</span> <span class="n">phone_book</span> <span class="o">[</span><span class="s">"JILL SMITH"</span><span class="o">]</span>
</pre></div>
<p>"Assigner commands" are a companion mechanism designed in the same spirit of allowing well-established, convenient notation reinterpreted in the framework of object-oriented programming. Assigner commands allow assignment-like syntax to call "setter" procedures. An assignment proper can never be of the form <code>a.x&#160;:= v</code> as this violates information hiding; you have to go for a setter command (procedure). For example the hash table class can have the function and the procedure</p>
<div class="mw-highlight mw-content-ltr" dir="ltr">
<pre>
<span class="n">item</span> <span class="kr">alias</span> <span class="s">"[]"</span> <span class="p">(</span><span class="n">key</span><span class="p">:</span> <span class="nc">STRING</span><span class="p">):</span> <span class="nc">ELEMENT</span>         <span class="o">[</span><span class="mi">3</span><span class="o">]</span>
      <span class="c1">-- The element of key `key'.</span>
      <span class="c1">-- ("Getter" query)</span>
    <span class="kr">do</span>
        <span class="p">...</span>
    <span class="kr">end</span>

<span class="n">put</span> <span class="p">(</span><span class="n">e</span><span class="p">:</span> <span class="nc">ELEMENT</span><span class="p">;</span> <span class="n">key</span><span class="p">:</span> <span class="nc">STRING</span><span class="p">)</span>
      <span class="c1">-- Insert the element `e', associating it with the key `key'.</span>
      <span class="c1">-- ("Setter" command)</span>
    <span class="kr">do</span>
        <span class="p">...</span>
    <span class="kr">end</span>
</pre></div>
<p>Then to insert an element you have to use an explicit call to the setter command:</p>
<div class="mw-highlight mw-content-ltr" dir="ltr">
<pre>
   <span class="o">[</span><span class="mi">4</span><span class="o">]</span> <span class="n">phone_book</span><span class="p">.</span><span class="n">put</span> <span class="p">(</span><span class="n">New_person</span><span class="p">,</span> <span class="s">"JILL SMITH"</span><span class="p">)</span>
</pre></div>
<p>It is possible to write this equivalently as</p>
<div class="mw-highlight mw-content-ltr" dir="ltr">
<pre>
   <span class="o">[</span><span class="mi">5</span><span class="o">]</span> <span class="n">phone_book</span> <span class="o">[</span><span class="s">"JILL SMITH"</span><span class="o">]</span> <span class="o">:=</span> <span class="n">New_person</span>
</pre></div>
<p>(in the same way that <code>phone_book ["JILL SMITH"]</code> is a synonym for <code>number&#160;:= phone_book.item ("JILL SMITH")</code>), provided the declaration of <code>item</code> now starts (replacement for [3]) with</p>
<div class="mw-highlight mw-content-ltr" dir="ltr">
<pre>
   <span class="n">item</span> <span class="kr">alias</span> <span class="s">"[]"</span> <span class="p">(</span><span class="n">key</span><span class="p">:</span> <span class="nc">STRING</span><span class="p">):</span> <span class="nc">ELEMENT</span> <span class="kr">assign</span> <span class="n">put</span>
</pre></div>
<p>This declares <code>put</code> as the assigner command associated with <code>item</code> and, combined with the bracket alias, makes [5] legal and equivalent to [4]. (It could also be written, without taking advantage of the bracket, as <code>phone_book.item ("JILL SMITH")&#160;:= New_person</code>.</p>
<p>note: The argument list of a's assigner is constrained to be: (a's return type;all of a's argument list...)</p>
<h3><span class="mw-headline" id="Lexical_and_syntax_properties">Lexical and syntax properties</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/w/index.php?title=Eiffel_(programming_language)&amp;action=edit&amp;section=25" title="Edit section: Lexical and syntax properties">edit</a><span class="mw-editsection-bracket">]</span></span></h3>
<p>Eiffel is not case-sensitive. The tokens <code>make</code>, <code>maKe</code> and <code>MAKE</code> all denote the same identifier. See, however, the "style rules" below.</p>
<p>Comments are introduced by <code>--</code> (two consecutive dashes) and extend to the end of the line.</p>
<p>The semicolon, as instruction separator, is optional. Most of the time the semicolon is just omitted, except to separate multiple instructions on a line. This results in less clutter on the program page.</p>
<p>There is no nesting of feature and class declarations. As a result the structure of an Eiffel class is simple: some class-level clauses (inheritance, invariant) and a succession of feature declarations, all at the same level.</p>
<p>It is customary to group features into separate "feature clauses" for more readability, with a standard set of basic feature tags appearing in a standard order, for example:</p>
<div class="mw-highlight mw-content-ltr" dir="ltr">
<pre>
<span class="kr">class</span> <span class="nc">HASH_TABLE</span> <span class="o">[</span><span class="nc">ELEMENT</span><span class="p">,</span> <span class="nc">KEY</span> <span class="o">-&gt;</span> <span class="nc">HASHABLE</span><span class="o">]</span> <span class="kr">inherit</span> <span class="nc">TABLE</span> <span class="o">[</span><span class="nc">ELEMENT</span><span class="o">]</span>

    <span class="kr">feature</span> <span class="c1">-- Initialization</span>
         <span class="c1">-- ... Declarations of initialization commands (creation procedures/constructors) ...</span>

    <span class="kr">feature</span> <span class="c1">-- Access</span>
         <span class="c1">-- ... Declarations of non-boolean queries on the object state, e.g. item ...</span>

    <span class="kr">feature</span> <span class="c1">-- Status report</span>
         <span class="c1">-- ... Declarations of boolean queries on the object state, e.g. is_empty ...</span>

    <span class="kr">feature</span> <span class="c1">-- Element change</span>
         <span class="c1">-- ... Declarations of commands that change the structure, e.g. put ...</span>

    <span class="c1">-- etc.</span>
<span class="kr">end</span>
</pre></div>
<p>In contrast to most <a href="/wiki/Curly_bracket_programming_language" class="mw-redirect" title="Curly bracket programming language">curly bracket programming languages</a>, Eiffel makes a clear distinction between expressions and instructions. This is in line with the <a href="/wiki/Command-Query_Separation" class="mw-redirect" title="Command-Query Separation">Command-Query Separation</a> principle of the Eiffel method.</p>
<h3><span class="mw-headline" id="Style_conventions">Style conventions</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/w/index.php?title=Eiffel_(programming_language)&amp;action=edit&amp;section=26" title="Edit section: Style conventions">edit</a><span class="mw-editsection-bracket">]</span></span></h3>
<p>Much of the documentation of Eiffel uses distinctive style conventions, designed to enforce a consistent look-and-feel. Some of these conventions apply to the code format itself, and others to the standard typographic rendering of Eiffel code in formats and publications where these conventions are possible.</p>
<p>While the language is case-insensitive, the style standards prescribe the use of all-capitals for class names (<code>LIST</code>), all-lower-case for feature names (<code>make</code>), and initial capitals for constants (<code>Avogadro</code>). The recommended style also suggests underscore to separate components of a multi-word identifier, as in <code>average_temperature</code>.</p>
<p>The specification of Eiffel includes guidelines for displaying software texts in typeset formats: keywords in bold, user-defined identifiers and constants are shown in <i><code>italics</code></i>, comments, operators, and punctuation marks in <code>Roman</code>, with program text in <code>blue</code> as in the present article to distinguish it from explanatory text. For example, the "Hello, world!" program given above would be rendered as below in Eiffel documentation:</p>
<pre>
<span style="color:blue;"><b>class</b>
    <i>HELLO_WORLD</i>
<b>create</b>
    <i>make</i>
<b>feature</b>
   <i>make</i>
      <b>do</b>
         <i>print</i> ("Hello, world!")
      <b>end</b>
<b>end</b></span>
</pre>
<h3><span class="mw-headline" id="Interfaces_to_other_tools_and_languages">Interfaces to other tools and languages</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/w/index.php?title=Eiffel_(programming_language)&amp;action=edit&amp;section=27" title="Edit section: Interfaces to other tools and languages">edit</a><span class="mw-editsection-bracket">]</span></span></h3>
<p>Eiffel is a purely object-oriented language but provides an open architecture for interfacing with "external" software in any other programming language.</p>
<p>It is possible for example to program machine- and operating-system level operations in <a href="/wiki/C_(programming_language)" title="C (programming language)">C</a>. Eiffel provides a straightforward interface to C routines, including support for "inline C" (writing the body of an Eiffel routine in C, typically for short machine-level operations).</p>
<p>Although there is no direct connection between Eiffel and C, many Eiffel <a href="/wiki/Compiler" title="Compiler">compilers</a> (<a href="/wiki/Visual_Eiffel" title="Visual Eiffel">Visual Eiffel</a> is one exception) output C <a href="/wiki/Source_code" title="Source code">source code</a> as an <a href="/wiki/Intermediate_language" class="mw-redirect" title="Intermediate language">intermediate language</a>, to submit to a C compiler, for <a href="/wiki/Optimization_(computer_science)" class="mw-redirect" title="Optimization (computer science)">optimizing</a> and <a href="/wiki/Porting" title="Porting">portability</a>. As such, they are examples of <a href="/wiki/Transcompiler" class="mw-redirect" title="Transcompiler">transcompilers</a>. The Eiffel Compiler tecomp can execute Eiffel code directly (like an interpreter) without going via an intermediate C code or emit C code which will be passed to a C compiler in order to obtain optimized native code. On .NET, the <a href="/wiki/EiffelStudio" title="EiffelStudio">EiffelStudio</a> compiler directly generates <a href="/wiki/Common_Intermediate_Language" title="Common Intermediate Language">CIL</a> (Common Intermediate Language) code. The <a href="/wiki/SmartEiffel" title="SmartEiffel">SmartEiffel</a> compiler can also output <a href="/wiki/Java_bytecode" title="Java bytecode">Java bytecode</a>.</p>
<h2><span class="mw-headline" id="References">References</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/w/index.php?title=Eiffel_(programming_language)&amp;action=edit&amp;section=28" title="Edit section: References">edit</a><span class="mw-editsection-bracket">]</span></span></h2>
<div class="reflist" style="list-style-type: decimal;">
<ol class="references">
<li id="cite_note-nov2pro-1"><span class="mw-cite-backlink"><b><a href="#cite_ref-nov2pro_1-0">^</a></b></span> <span class="reference-text"><cite class="citation book">Cooper, Peter (2009). <i>Beginning Ruby: From Novice to Professional</i>. Beginning from Novice to Professional (2nd ed.). Berkeley: APress. p.&#160;101. <a href="/wiki/International_Standard_Book_Number" title="International Standard Book Number">ISBN</a>&#160;<a href="/wiki/Special:BookSources/1-4302-2363-4" title="Special:BookSources/1-4302-2363-4">1-4302-2363-4</a>. <q>To a lesser extent, Python, LISP, Eiffel, Ada, and C++ have also influenced Ruby.</q></cite><span title="ctx_ver=Z39.88-2004&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3AEiffel+%28programming+language%29&amp;rft.aufirst=Peter&amp;rft.aulast=Cooper&amp;rft.btitle=Beginning+Ruby%3A+From+Novice+to+Professional&amp;rft.date=2009&amp;rft.edition=2nd&amp;rft.genre=book&amp;rft.isbn=1-4302-2363-4&amp;rft.pages=101&amp;rft.place=Berkeley&amp;rft.pub=APress&amp;rft.series=Beginning+from+Novice+to+Professional&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook" class="Z3988"><span style="display:none;">&#160;</span></span></span></li>
<li id="cite_note-2"><span class="mw-cite-backlink"><b><a href="#cite_ref-2">^</a></b></span> <span class="reference-text"><cite class="citation web"><a rel="nofollow" class="external text" href="http://www.berenddeboer.net/eiffel/archive/halstenbach_eiffel_history.html">"Eiffel — the Language"</a><span class="reference-accessdate">. Retrieved <span class="nowrap">6 July</span> 2016</span>.</cite><span title="ctx_ver=Z39.88-2004&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3AEiffel+%28programming+language%29&amp;rft.btitle=Eiffel+%94+the+Language&amp;rft.genre=unknown&amp;rft_id=http%3A%2F%2Fwww.berenddeboer.net%2Feiffel%2Farchive%2Fhalstenbach_eiffel_history.html&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook" class="Z3988"><span style="display:none;">&#160;</span></span></span></li>
<li id="cite_note-3"><span class="mw-cite-backlink"><b><a href="#cite_ref-3">^</a></b></span> <span class="reference-text">Formal Specification Languages: Eiffel, Denotational Semantics, Vienna Development Method, Abstract Machine Notation, Petri Net, General Books, 2010</span></li>
<li id="cite_note-4"><span class="mw-cite-backlink"><b><a href="#cite_ref-4">^</a></b></span> <span class="reference-text"><i>Object-Oriented Software Construction</i>, Second Edition, by <a href="/wiki/Bertrand_Meyer" title="Bertrand Meyer">Bertrand Meyer</a>, Prentice Hall, 1997, <a href="/wiki/Special:BookSources/0136291554" class="internal mw-magiclink-isbn">ISBN 0-13-629155-4</a></span></li>
<li id="cite_note-5"><span class="mw-cite-backlink"><b><a href="#cite_ref-5">^</a></b></span> <span class="reference-text">ECMA International: <cite>Standard ECMA-367 —Eiffel: Analysis, Design and Programming Language 2nd edition (June 2006)</cite>; available online at <a rel="nofollow" class="external text" href="http://www.ecma-international.org/publications/standards/Ecma-367.htm">www.ecma-international.org/publications/standards/Ecma-367.htm</a></span></li>
<li id="cite_note-6"><span class="mw-cite-backlink"><b><a href="#cite_ref-6">^</a></b></span> <span class="reference-text">International Organisation for Standardisation: <cite>Standard ISO/IEC DIS 25436</cite>, available online at <a rel="nofollow" class="external autonumber" href="http://www.iso.org/iso/en/CatalogueDetailPage.CatalogueDetail?CSNUMBER=42924&amp;ICS1=35&amp;ICS2=60&amp;ICS3=">[1]</a></span></li>
<li id="cite_note-7"><span class="mw-cite-backlink"><b><a href="#cite_ref-7">^</a></b></span> <span class="reference-text">Bertrand Meyer: Overloading vs Object Technology, in Journal of Object-Oriented Programming (JOOP), vol. 14, no. 4, October–November 2001, available <a rel="nofollow" class="external text" href="http://se.ethz.ch/~meyer/publications/joop/overloading.pdf">online</a></span></li>
<li id="cite_note-8"><span class="mw-cite-backlink"><b><a href="#cite_ref-8">^</a></b></span> <span class="reference-text"><cite class="citation web"><a rel="nofollow" class="external text" href="http://archive.eiffel.com/doc/online/eiffel50/intro/language/tutorial-10.html">"9 INHERITANCE"</a>. Archive.eiffel.com. 1997-03-23<span class="reference-accessdate">. Retrieved <span class="nowrap">2013-07-08</span></span>.</cite><span title="ctx_ver=Z39.88-2004&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3AEiffel+%28programming+language%29&amp;rft.btitle=9+INHERITANCE&amp;rft.date=1997-03-23&amp;rft.genre=unknown&amp;rft_id=http%3A%2F%2Farchive.eiffel.com%2Fdoc%2Fonline%2Feiffel50%2Fintro%2Flanguage%2Ftutorial-10.html&amp;rft.pub=Archive.eiffel.com&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook" class="Z3988"><span style="display:none;">&#160;</span></span></span></li>
<li id="cite_note-9"><span class="mw-cite-backlink"><b><a href="#cite_ref-9">^</a></b></span> <span class="reference-text"><cite class="citation web"><a rel="nofollow" class="external text" href="http://www.artima.com/intv/abcs.html">"Multiple Inheritance and Interfaces"</a>. Artima.com. 2002-12-16<span class="reference-accessdate">. Retrieved <span class="nowrap">2013-07-08</span></span>.</cite><span title="ctx_ver=Z39.88-2004&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3AEiffel+%28programming+language%29&amp;rft.btitle=Multiple+Inheritance+and+Interfaces&amp;rft.date=2002-12-16&amp;rft.genre=unknown&amp;rft_id=http%3A%2F%2Fwww.artima.com%2Fintv%2Fabcs.html&amp;rft.pub=Artima.com&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook" class="Z3988"><span style="display:none;">&#160;</span></span></span></li>
<li id="cite_note-10"><span class="mw-cite-backlink"><b><a href="#cite_ref-10">^</a></b></span> <span class="reference-text"><cite class="citation web"><a rel="nofollow" class="external text" href="https://c2.com/cgi/wiki?MultipleInheritanceIsNotEvil">"Multiple Inheritance Is Not Evil"</a>. C2.com. 2007-04-28<span class="reference-accessdate">. Retrieved <span class="nowrap">2013-07-08</span></span>.</cite><span title="ctx_ver=Z39.88-2004&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3AEiffel+%28programming+language%29&amp;rft.btitle=Multiple+Inheritance+Is+Not+Evil&amp;rft.date=2007-04-28&amp;rft.genre=unknown&amp;rft_id=https%3A%2F%2Fc2.com%2Fcgi%2Fwiki%3FMultipleInheritanceIsNotEvil&amp;rft.pub=C2.com&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook" class="Z3988"><span style="display:none;">&#160;</span></span></span></li>
<li id="cite_note-11"><span class="mw-cite-backlink"><b><a href="#cite_ref-11">^</a></b></span> <span class="reference-text"><cite class="citation web">Computer insurance&#160; Kernel (computing)&#160;. <a rel="nofollow" class="external text" href="http://en.academic.ru/dic.nsf/enwiki/11569993#Software_interfaces_in_object_oriented_languages">"Interface (computing)"</a>. En.academic.ru<span class="reference-accessdate">. Retrieved <span class="nowrap">2013-07-08</span></span>.</cite><span title="ctx_ver=Z39.88-2004&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3AEiffel+%28programming+language%29&amp;rft.au=Computer+insurance++Kernel+%28computing%29+&amp;rft.btitle=Interface+%28computing%29&amp;rft.genre=unknown&amp;rft_id=http%3A%2F%2Fen.academic.ru%2Fdic.nsf%2Fenwiki%2F11569993%23Software_interfaces_in_object_oriented_languages&amp;rft.pub=En.academic.ru&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook" class="Z3988"><span style="display:none;">&#160;</span></span> <span class="citation-comment" style="display:none; color:#33aa33">CS1 maint: Multiple names: authors list (<a href="/wiki/Category:CS1_maint:_Multiple_names:_authors_list" title="Category:CS1 maint: Multiple names: authors list">link</a>)</span></span></li>
<li id="cite_note-12"><span class="mw-cite-backlink"><b><a href="#cite_ref-12">^</a></b></span> <span class="reference-text">Philippe Ribet, Cyril Adrian, Olivier Zendra, Dominique Colnet: <i>Conformance of agents in the Eiffel language</i>, in <i><a href="/wiki/JOT:_Journal_of_Object_Technology" class="mw-redirect" title="JOT: Journal of Object Technology">Journal of Object Technology</a></i>, vol. 3, no. 4, April 2004, Special issue: TOOLS USA 2003, pp. 125-143. Available on line from the <a rel="nofollow" class="external text" href="http://www.jot.fm/issues/issue_2004_04/article7">JOT article page</a></span></li>
<li id="cite_note-13"><span class="mw-cite-backlink"><b><a href="#cite_ref-13">^</a></b></span> <span class="reference-text"><cite class="citation journal">Brooke, Phillip; Richard Paige (2008). "Cameo: An Alternative Model of Concurrency for Eiffel". <i>Formal Aspects of Computing</i>. Springer. <b>21</b> (4): 363–391. <a href="/wiki/Digital_object_identifier" title="Digital object identifier">doi</a>:<a rel="nofollow" class="external text" href="//dx.doi.org/10.1007%2Fs00165-008-0096-1">10.1007/s00165-008-0096-1</a>.</cite><span title="ctx_ver=Z39.88-2004&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3AEiffel+%28programming+language%29&amp;rft.atitle=Cameo%3A+An+Alternative+Model+of+Concurrency+for+Eiffel&amp;rft.aufirst=Phillip&amp;rft.aulast=Brooke&amp;rft.au=Richard+Paige&amp;rft.date=2008&amp;rft.genre=article&amp;rft_id=info%3Adoi%2F10.1007%2Fs00165-008-0096-1&amp;rft.issue=4&amp;rft.jtitle=Formal+Aspects+of+Computing&amp;rft.pages=363-391&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Ajournal&amp;rft.volume=21" class="Z3988"><span style="display:none;">&#160;</span></span></span></li>
<li id="cite_note-14"><span class="mw-cite-backlink"><b><a href="#cite_ref-14">^</a></b></span> <span class="reference-text"><cite class="citation journal">Brooke, Phillip; Richard Paige (2007). <a rel="nofollow" class="external text" href="http://www.jot.fm/issues/issue_2007_11/article4/">"Exceptions in Concurrent Eiffel"</a>. <i>Journal of Object Technology</i>. <b>6</b> (10): 111–126. <a href="/wiki/Digital_object_identifier" title="Digital object identifier">doi</a>:<a rel="nofollow" class="external text" href="//dx.doi.org/10.5381%2Fjot.2007.6.10.a4">10.5381/jot.2007.6.10.a4</a>.</cite><span title="ctx_ver=Z39.88-2004&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3AEiffel+%28programming+language%29&amp;rft.atitle=Exceptions+in+Concurrent+Eiffel&amp;rft.aufirst=Phillip&amp;rft.aulast=Brooke&amp;rft.au=Richard+Paige&amp;rft.date=2007&amp;rft.genre=article&amp;rft_id=http%3A%2F%2Fwww.jot.fm%2Fissues%2Fissue_2007_11%2Farticle4%2F&amp;rft_id=info%3Adoi%2F10.5381%2Fjot.2007.6.10.a4&amp;rft.issue=10&amp;rft.jtitle=Journal+of+Object+Technology&amp;rft.pages=111-126&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Ajournal&amp;rft.volume=6" class="Z3988"><span style="display:none;">&#160;</span></span></span></li>
</ol>
</div>
<h2><span class="mw-headline" id="External_links">External links</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/w/index.php?title=Eiffel_(programming_language)&amp;action=edit&amp;section=29" title="Edit section: External links">edit</a><span class="mw-editsection-bracket">]</span></span></h2>
<ul>
<li><a rel="nofollow" class="external text" href="http://se.ethz.ch/~meyer/publications/online/eiffel/basic.html">Basic Eiffel Language Mechanisms</a>, <a rel="nofollow" class="external text" href="http://se.ethz.ch/~meyer/">Bertrand Meyer</a>, August 2006.</li>
<li><a rel="nofollow" class="external text" href="http://dev.eiffel.com">Eiffel Software's Open Source initiative</a></li>
<li><a rel="nofollow" class="external text" href="https://www.eiffel.org/">Eiffel Community</a></li>
<li><a rel="nofollow" class="external text" href="http://www.eiffel.com/">Eiffel Software</a> web site of the company that introduced Eiffel, was Interactive Software Engineering (ISE).</li>
<li>Eiffel tutorial (100 pages) by <a href="/wiki/Bertrand_Meyer" title="Bertrand Meyer">Bertrand Meyer</a> (<a rel="nofollow" class="external text" href="http://archive.eiffel.com/doc/online/eiffel50/intro/language/tutorial-00.html">HTML</a>)</li>
<li><a rel="nofollow" class="external text" href="http://www.ecma-international.org/publications/standards/Ecma-367.htm">Eiffel standard</a>, revision 2 (2006); this is the ECMA standard, with free access, its text identical to that of the ISO standard.</li>
<li><a rel="nofollow" class="external text" href="http://www.liberty-eiffel.org/">LibertyEiffel</a> (a free Eiffel compiler which is based on the <a href="/wiki/SmartEiffel" title="SmartEiffel">SmartEiffel</a> codebase, released under GNU GPL license, translates Eiffel code either to <a href="/wiki/C_(programming_language)" title="C (programming language)">C</a>, not completely standard compliant, with special emphasis on performance. Liberty Eiffel is the GNU Eiffel compiler.</li>
<li><a rel="nofollow" class="external text" href="http://smarteiffel.loria.fr/">SmartEiffel</a> (formerly SmallEiffel, and no new releases since 2007, project not developend any further) a complete Eiffel compiler released under GNU GPL license, translates Eiffel code either to <a href="/wiki/C_(programming_language)" title="C (programming language)">C</a> or <a href="/wiki/Java_bytecode" title="Java bytecode">Java bytecode</a>, not standard compliant, with emphasis on performance.</li>
<li><a rel="nofollow" class="external text" href="http://www.sourceforge.net/projects/tecomp">"The Eiffel Compiler" (tecomp)</a> an <a href="/wiki/Open_source" class="mw-redirect" title="Open source">open source</a> Eiffel compiler with <a rel="nofollow" class="external text" href="http://tecomp.sourceforge.net">documentation</a>.</li>
<li><a rel="nofollow" class="external text" href="http://visual-eiffel.org">Visual Eiffel</a> an <a href="/wiki/Open_source" class="mw-redirect" title="Open source">open source</a> implementation of Eiffel creating <a href="/wiki/Native_code" class="mw-redirect" title="Native code">native code</a> for X86 systems (Windows, Linux)</li>
<li><a rel="nofollow" class="external text" href="http://www.eiffel-nice.org/">NICE</a> Nonprofit International Consortium for Eiffel.</li>
<li><a rel="nofollow" class="external text" href="http://www.eiffelroom.com/">eiffelroom.com</a> Community around standard Eiffel.</li>
<li><a rel="nofollow" class="external text" href="http://eiffelzone.com/">eiffelzone.com</a> Includes a comprehensive Eiffel Software Directory</li>
<li><a rel="nofollow" class="external text" href="http://www.cetus-links.org/oo_eiffel.html">Cetus Eiffel Page</a></li>
<li><a rel="nofollow" class="external text" href="http://www.eiffel.com/products/envsn">Eiffel for .NET</a></li>
<li><a rel="nofollow" class="external text" href="http://archive.eiffel.com/nice/language/"><cite>Eiffel: the Language</cite></a> subset</li>
<li><a rel="nofollow" class="external text" href="http://www.artima.com/intv/abcs.html"><cite>Multiple Inheritance and Interfaces: A Conversation with Scott Meyers</cite></a></li>
</ul>
<div role="navigation" class="navbox" aria-labelledby="Standards_of_Ecma_International" style="padding:3px">
<table class="nowraplinks collapsible autocollapse navbox-inner" style="border-spacing:0;background:transparent;color:inherit">
<tr>
<th scope="col" class="navbox-title" colspan="2">
<div class="plainlinks hlist navbar mini">
<ul>
<li class="nv-view"><a href="/wiki/Template:Ecma_International_Standards" title="Template:Ecma International Standards"><abbr title="View this template" style=";;background:none transparent;border:none;">v</abbr></a></li>
<li class="nv-talk"><a href="/wiki/Template_talk:Ecma_International_Standards" title="Template talk:Ecma International Standards"><abbr title="Discuss this template" style=";;background:none transparent;border:none;">t</abbr></a></li>
<li class="nv-edit"><a class="external text" href="//en.wikipedia.org/w/index.php?title=Template:Ecma_International_Standards&amp;action=edit"><abbr title="Edit this template" style=";;background:none transparent;border:none;">e</abbr></a></li>
</ul>
</div>
<div id="Standards_of_Ecma_International" style="font-size:114%">Standards of <a href="/wiki/Ecma_International" title="Ecma International">Ecma International</a></div>
</th>
</tr>
<tr style="height:2px">
<td colspan="2"></td>
</tr>
<tr>
<th scope="row" class="navbox-group">Application Interfaces</th>
<td class="navbox-list navbox-odd hlist" style="text-align:left;border-left-width:2px;border-left-style:solid;width:100%;padding:0px">
<div style="padding:0em 0.25em">
<ul>
<li><a href="/wiki/ANSI_escape_code" title="ANSI escape code">ANSI escape code</a></li>
<li><a href="/wiki/Common_Language_Infrastructure" title="Common Language Infrastructure">Common Language Infrastructure</a></li>
<li><a href="/wiki/Office_Open_XML" title="Office Open XML">Office Open XML</a></li>
<li><a href="/wiki/Open_XML_Paper_Specification" title="Open XML Paper Specification">OpenXPS</a></li>
</ul>
</div>
</td>
</tr>
<tr style="height:2px">
<td colspan="2"></td>
</tr>
<tr>
<th scope="row" class="navbox-group">File Systems (Tape)</th>
<td class="navbox-list navbox-even hlist" style="text-align:left;border-left-width:2px;border-left-style:solid;width:100%;padding:0px">
<div style="padding:0em 0.25em">
<ul>
<li><a href="/wiki/Advanced_Intelligent_Tape" title="Advanced Intelligent Tape">Advanced Intelligent Tape</a></li>
<li><a href="/wiki/Digital_Data_Storage" title="Digital Data Storage">DDS</a></li>
<li><a href="/wiki/Digital_Linear_Tape" title="Digital Linear Tape">DLT</a></li>
<li><a href="/wiki/Digital_Linear_Tape" title="Digital Linear Tape">Super DLT</a></li>
<li><a href="/wiki/Holographic_Versatile_Disc" title="Holographic Versatile Disc">Holographic Versatile Disc</a></li>
<li><a href="/wiki/Linear_Tape-Open" title="Linear Tape-Open">Linear Tape-Open</a> (Ultrium-1)</li>
<li><a href="/wiki/VXA" title="VXA">VXA</a></li>
</ul>
</div>
</td>
</tr>
<tr style="height:2px">
<td colspan="2"></td>
</tr>
<tr>
<th scope="row" class="navbox-group">File Systems (Disk)</th>
<td class="navbox-list navbox-odd hlist" style="text-align:left;border-left-width:2px;border-left-style:solid;width:100%;padding:0px">
<div style="padding:0em 0.25em">
<ul>
<li><a href="/wiki/CD-ROM" title="CD-ROM">CD-ROM</a></li>
<li><a href="/wiki/ISO_9660" title="ISO 9660">CD File System</a> (CDFS)</li>
<li><a href="/wiki/File_Allocation_Table" title="File Allocation Table">FAT</a>
<ul>
<li><a href="/wiki/FAT12" class="mw-redirect" title="FAT12">FAT12</a></li>
<li><a href="/wiki/FAT16" class="mw-redirect" title="FAT16">FAT16</a></li>
<li><a href="/wiki/FAT16B" class="mw-redirect" title="FAT16B">FAT16B</a></li>
</ul>
</li>
<li><a href="/wiki/Floppy_disk" title="Floppy disk">FD</a></li>
<li><a href="/wiki/Universal_Disk_Format" title="Universal Disk Format">UDF</a></li>
<li><a href="/wiki/Ultra_Density_Optical" title="Ultra Density Optical">Ultra Density Optical</a></li>
<li><a href="/wiki/Universal_Media_Disc" title="Universal Media Disc">Universal Media Disc</a></li>
</ul>
</div>
</td>
</tr>
<tr style="height:2px">
<td colspan="2"></td>
</tr>
<tr>
<th scope="row" class="navbox-group">Graphics</th>
<td class="navbox-list navbox-even hlist" style="text-align:left;border-left-width:2px;border-left-style:solid;width:100%;padding:0px">
<div style="padding:0em 0.25em">
<ul>
<li><a href="/wiki/Universal_3D" title="Universal 3D">Universal 3D</a></li>
</ul>
</div>
</td>
</tr>
<tr style="height:2px">
<td colspan="2"></td>
</tr>
<tr>
<th scope="row" class="navbox-group">Programming Languages</th>
<td class="navbox-list navbox-odd hlist" style="text-align:left;border-left-width:2px;border-left-style:solid;width:100%;padding:0px">
<div style="padding:0em 0.25em">
<ul>
<li><a href="/wiki/C%2B%2B/CLI" title="C++/CLI">C++/CLI</a></li>
<li><a href="/wiki/C_Sharp_(programming_language)" title="C Sharp (programming language)">C#</a></li>
<li><strong class="selflink">Eiffel</strong></li>
<li><a href="/wiki/JavaScript" title="JavaScript">JavaScript</a> (<a href="/wiki/ECMAScript_for_XML" title="ECMAScript for XML">E4X</a>, <a href="/wiki/ECMAScript" title="ECMAScript">ECMAScript</a>)</li>
</ul>
</div>
</td>
</tr>
<tr style="height:2px">
<td colspan="2"></td>
</tr>
<tr>
<th scope="row" class="navbox-group">Radio Link Interfaces</th>
<td class="navbox-list navbox-even hlist" style="text-align:left;border-left-width:2px;border-left-style:solid;width:100%;padding:0px">
<div style="padding:0em 0.25em">
<ul>
<li><a href="/wiki/Near_field_communication" title="Near field communication">NFC</a></li>
<li><a href="/wiki/Ultra-wideband" title="Ultra-wideband">UWB</a></li>
</ul>
</div>
</td>
</tr>
<tr style="height:2px">
<td colspan="2"></td>
</tr>
<tr>
<th scope="row" class="navbox-group">Other</th>
<td class="navbox-list navbox-odd hlist" style="text-align:left;border-left-width:2px;border-left-style:solid;width:100%;padding:0px">
<div style="padding:0em 0.25em">
<ul>
<li><a href="/wiki/ISO/IEC_2022" title="ISO/IEC 2022">ECMA-35</a></li>
</ul>
</div>
</td>
</tr>
<tr style="height:2px">
<td colspan="2"></td>
</tr>
<tr>
<td class="navbox-abovebelow" colspan="2">
<div><a href="/wiki/List_of_Ecma_standards" title="List of Ecma standards">List of Ecma standards</a> (1961 - Present)</div>
</td>
</tr>
</table>
</div>


<!-- 
NewPP limit report
Parsed by mw1304
Cached time: 20170202065221
Cache expiry: 2592000
Dynamic content: false
CPU time usage: 0.264 seconds
Real time usage: 0.336 seconds
Preprocessor visited node count: 1535/1000000
Preprocessor generated node count: 0/1500000
Post‐expand include size: 59537/2097152 bytes
Template argument size: 8041/2097152 bytes
Highest expansion depth: 11/40
Expensive parser function count: 7/500
Lua time usage: 0.105/10.000 seconds
Lua memory usage: 4.12 MB/50 MB
-->
<!--
Transclusion expansion time report (%,ms,calls,template)
100.00%  268.066      1 -total
 31.98%   85.729      4 Template:Ambox
 29.25%   78.404      1 Template:Reflist
 25.98%   69.641      1 Template:Multiple_issues
 14.45%   38.737      1 Template:Infobox_programming_language
 12.69%   34.021      1 Template:Infobox
 12.22%   32.759      1 Template:Cite_book
  9.19%   24.624      1 Template:Citation_needed
  8.21%   22.013      1 Template:Fix
  7.47%   20.017      1 Template:Lead_too_short
-->

<!-- Saved in parser cache with key enwiki:pcache:idhash:9838-0!*!0!!en!4!* and timestamp 20170202065221 and revision id 758098169
 -->
<noscript><img src="//en.wikipedia.org/wiki/Special:CentralAutoLogin/start?type=1x1" alt="" title="" width="1" height="1" style="border: none; position: absolute;" /></noscript></div>					<div class="printfooter">
						Retrieved from "<a dir="ltr" href="https://en.wikipedia.org/w/index.php?title=Eiffel_(programming_language)&amp;oldid=758098169">https://en.wikipedia.org/w/index.php?title=Eiffel_(programming_language)&amp;oldid=758098169</a>"					</div>
				<div id="catlinks" class="catlinks" data-mw="interface"><div id="mw-normal-catlinks" class="mw-normal-catlinks"><a href="/wiki/Help:Category" title="Help:Category">Categories</a>: <ul><li><a href="/wiki/Category:Object-oriented_programming_languages" title="Category:Object-oriented programming languages">Object-oriented programming languages</a></li><li><a href="/wiki/Category:Class-based_programming_languages" title="Category:Class-based programming languages">Class-based programming languages</a></li><li><a href="/wiki/Category:Object-oriented_programming" title="Category:Object-oriented programming">Object-oriented programming</a></li><li><a href="/wiki/Category:Formal_specification_languages" title="Category:Formal specification languages">Formal specification languages</a></li><li><a href="/wiki/Category:High_Integrity_Programming_Language" title="Category:High Integrity Programming Language">High Integrity Programming Language</a></li><li><a href="/wiki/Category:Programming_languages_created_in_the_1980s" title="Category:Programming languages created in the 1980s">Programming languages created in the 1980s</a></li></ul></div><div id="mw-hidden-catlinks" class="mw-hidden-catlinks mw-hidden-cats-hidden">Hidden categories: <ul><li><a href="/wiki/Category:CS1_maint:_Multiple_names:_authors_list" title="Category:CS1 maint: Multiple names: authors list">CS1 maint: Multiple names: authors list</a></li><li><a href="/wiki/Category:Pages_using_ISBN_magic_links" title="Category:Pages using ISBN magic links">Pages using ISBN magic links</a></li><li><a href="/wiki/Category:Wikipedia_introduction_cleanup_from_July_2012" title="Category:Wikipedia introduction cleanup from July 2012">Wikipedia introduction cleanup from July 2012</a></li><li><a href="/wiki/Category:All_pages_needing_cleanup" title="Category:All pages needing cleanup">All pages needing cleanup</a></li><li><a href="/wiki/Category:Articles_covered_by_WikiProject_Wikify_from_July_2012" title="Category:Articles covered by WikiProject Wikify from July 2012">Articles covered by WikiProject Wikify from July 2012</a></li><li><a href="/wiki/Category:All_articles_covered_by_WikiProject_Wikify" title="Category:All articles covered by WikiProject Wikify">All articles covered by WikiProject Wikify</a></li><li><a href="/wiki/Category:Articles_needing_additional_references_from_January_2015" title="Category:Articles needing additional references from January 2015">Articles needing additional references from January 2015</a></li><li><a href="/wiki/Category:All_articles_needing_additional_references" title="Category:All articles needing additional references">All articles needing additional references</a></li><li><a href="/wiki/Category:Articles_needing_additional_references_from_June_2013" title="Category:Articles needing additional references from June 2013">Articles needing additional references from June 2013</a></li><li><a href="/wiki/Category:All_articles_with_unsourced_statements" title="Category:All articles with unsourced statements">All articles with unsourced statements</a></li><li><a href="/wiki/Category:Articles_with_unsourced_statements_from_October_2010" title="Category:Articles with unsourced statements from October 2010">Articles with unsourced statements from October 2010</a></li></ul></div></div>				<div class="visualClear"></div>
							</div>
		</div>
		<div id="mw-navigation">
			<h2>Navigation menu</h2>

			<div id="mw-head">
									<div id="p-personal" role="navigation" class="" aria-labelledby="p-personal-label">
						<h3 id="p-personal-label">Personal tools</h3>
						<ul>
							<li id="pt-anonuserpage">Not logged in</li><li id="pt-anontalk"><a href="/wiki/Special:MyTalk" title="Discussion about edits from this IP address [n]" accesskey="n">Talk</a></li><li id="pt-anoncontribs"><a href="/wiki/Special:MyContributions" title="A list of edits made from this IP address [y]" accesskey="y">Contributions</a></li><li id="pt-createaccount"><a href="/w/index.php?title=Special:CreateAccount&amp;returnto=Eiffel+%28programming+language%29" title="You are encouraged to create an account and log in; however, it is not mandatory">Create account</a></li><li id="pt-login"><a href="/w/index.php?title=Special:UserLogin&amp;returnto=Eiffel+%28programming+language%29" title="You're encouraged to log in; however, it's not mandatory. [o]" accesskey="o">Log in</a></li>						</ul>
					</div>
									<div id="left-navigation">
										<div id="p-namespaces" role="navigation" class="vectorTabs" aria-labelledby="p-namespaces-label">
						<h3 id="p-namespaces-label">Namespaces</h3>
						<ul>
															<li  id="ca-nstab-main" class="selected"><span><a href="/wiki/Eiffel_(programming_language)"  title="View the content page [c]" accesskey="c">Article</a></span></li>
															<li  id="ca-talk"><span><a href="/wiki/Talk:Eiffel_(programming_language)"  title="Discussion about the content page [t]" accesskey="t" rel="discussion">Talk</a></span></li>
													</ul>
					</div>
										<div id="p-variants" role="navigation" class="vectorMenu emptyPortlet" aria-labelledby="p-variants-label">
												<h3 id="p-variants-label">
							<span>Variants</span><a href="#"></a>
						</h3>

						<div class="menu">
							<ul>
															</ul>
						</div>
					</div>
									</div>
				<div id="right-navigation">
										<div id="p-views" role="navigation" class="vectorTabs" aria-labelledby="p-views-label">
						<h3 id="p-views-label">Views</h3>
						<ul>
															<li id="ca-view" class="selected"><span><a href="/wiki/Eiffel_(programming_language)" >Read</a></span></li>
															<li id="ca-edit"><span><a href="/w/index.php?title=Eiffel_(programming_language)&amp;action=edit"  title="Edit this page [e]" accesskey="e">Edit</a></span></li>
															<li id="ca-history" class="collapsible"><span><a href="/w/index.php?title=Eiffel_(programming_language)&amp;action=history"  title="Past revisions of this page [h]" accesskey="h">View history</a></span></li>
													</ul>
					</div>
										<div id="p-cactions" role="navigation" class="vectorMenu emptyPortlet" aria-labelledby="p-cactions-label">
						<h3 id="p-cactions-label"><span>More</span><a href="#"></a></h3>

						<div class="menu">
							<ul>
															</ul>
						</div>
					</div>
										<div id="p-search" role="search">
						<h3>
							<label for="searchInput">Search</label>
						</h3>

						<form action="/w/index.php" id="searchform">
							<div id="simpleSearch">
							<input type="search" name="search" placeholder="Search Wikipedia" title="Search Wikipedia [f]" accesskey="f" id="searchInput"/><input type="hidden" value="Special:Search" name="title"/><input type="submit" name="fulltext" value="Search" title="Search Wikipedia for this text" id="mw-searchButton" class="searchButton mw-fallbackSearchButton"/><input type="submit" name="go" value="Go" title="Go to a page with this exact name if it exists" id="searchButton" class="searchButton"/>							</div>
						</form>
					</div>
									</div>
			</div>
			<div id="mw-panel">
				<div id="p-logo" role="banner"><a class="mw-wiki-logo" href="/wiki/Main_Page"  title="Visit the main page"></a></div>
						<div class="portal" role="navigation" id='p-navigation' aria-labelledby='p-navigation-label'>
			<h3 id='p-navigation-label'>Navigation</h3>

			<div class="body">
									<ul>
						<li id="n-mainpage-description"><a href="/wiki/Main_Page" title="Visit the main page [z]" accesskey="z">Main page</a></li><li id="n-contents"><a href="/wiki/Portal:Contents" title="Guides to browsing Wikipedia">Contents</a></li><li id="n-featuredcontent"><a href="/wiki/Portal:Featured_content" title="Featured content – the best of Wikipedia">Featured content</a></li><li id="n-currentevents"><a href="/wiki/Portal:Current_events" title="Find background information on current events">Current events</a></li><li id="n-randompage"><a href="/wiki/Special:Random" title="Load a random article [x]" accesskey="x">Random article</a></li><li id="n-sitesupport"><a href="https://donate.wikimedia.org/wiki/Special:FundraiserRedirector?utm_source=donate&amp;utm_medium=sidebar&amp;utm_campaign=C13_en.wikipedia.org&amp;uselang=en" title="Support us">Donate to Wikipedia</a></li><li id="n-shoplink"><a href="//shop.wikimedia.org" title="Visit the Wikipedia store">Wikipedia store</a></li>					</ul>
							</div>
		</div>
			<div class="portal" role="navigation" id='p-interaction' aria-labelledby='p-interaction-label'>
			<h3 id='p-interaction-label'>Interaction</h3>

			<div class="body">
									<ul>
						<li id="n-help"><a href="/wiki/Help:Contents" title="Guidance on how to use and edit Wikipedia">Help</a></li><li id="n-aboutsite"><a href="/wiki/Wikipedia:About" title="Find out about Wikipedia">About Wikipedia</a></li><li id="n-portal"><a href="/wiki/Wikipedia:Community_portal" title="About the project, what you can do, where to find things">Community portal</a></li><li id="n-recentchanges"><a href="/wiki/Special:RecentChanges" title="A list of recent changes in the wiki [r]" accesskey="r">Recent changes</a></li><li id="n-contactpage"><a href="//en.wikipedia.org/wiki/Wikipedia:Contact_us" title="How to contact Wikipedia">Contact page</a></li>					</ul>
							</div>
		</div>
			<div class="portal" role="navigation" id='p-tb' aria-labelledby='p-tb-label'>
			<h3 id='p-tb-label'>Tools</h3>

			<div class="body">
									<ul>
						<li id="t-whatlinkshere"><a href="/wiki/Special:WhatLinksHere/Eiffel_(programming_language)" title="List of all English Wikipedia pages containing links to this page [j]" accesskey="j">What links here</a></li><li id="t-recentchangeslinked"><a href="/wiki/Special:RecentChangesLinked/Eiffel_(programming_language)" rel="nofollow" title="Recent changes in pages linked from this page [k]" accesskey="k">Related changes</a></li><li id="t-upload"><a href="/wiki/Wikipedia:File_Upload_Wizard" title="Upload files [u]" accesskey="u">Upload file</a></li><li id="t-specialpages"><a href="/wiki/Special:SpecialPages" title="A list of all special pages [q]" accesskey="q">Special pages</a></li><li id="t-permalink"><a href="/w/index.php?title=Eiffel_(programming_language)&amp;oldid=758098169" title="Permanent link to this revision of the page">Permanent link</a></li><li id="t-info"><a href="/w/index.php?title=Eiffel_(programming_language)&amp;action=info" title="More information about this page">Page information</a></li><li id="t-wikibase"><a href="https://www.wikidata.org/wiki/Q732089" title="Link to connected data repository item [g]" accesskey="g">Wikidata item</a></li><li id="t-cite"><a href="/w/index.php?title=Special:CiteThisPage&amp;page=Eiffel_%28programming_language%29&amp;id=758098169" title="Information on how to cite this page">Cite this page</a></li>					</ul>
							</div>
		</div>
			<div class="portal" role="navigation" id='p-coll-print_export' aria-labelledby='p-coll-print_export-label'>
			<h3 id='p-coll-print_export-label'>Print/export</h3>

			<div class="body">
									<ul>
						<li id="coll-create_a_book"><a href="/w/index.php?title=Special:Book&amp;bookcmd=book_creator&amp;referer=Eiffel+%28programming+language%29">Create a book</a></li><li id="coll-download-as-rdf2latex"><a href="/w/index.php?title=Special:Book&amp;bookcmd=render_article&amp;arttitle=Eiffel+%28programming+language%29&amp;returnto=Eiffel+%28programming+language%29&amp;oldid=758098169&amp;writer=rdf2latex">Download as PDF</a></li><li id="t-print"><a href="/w/index.php?title=Eiffel_(programming_language)&amp;printable=yes" title="Printable version of this page [p]" accesskey="p">Printable version</a></li>					</ul>
							</div>
		</div>
			<div class="portal" role="navigation" id='p-lang' aria-labelledby='p-lang-label'>
			<h3 id='p-lang-label'>Languages</h3>

			<div class="body">
									<ul>
						<li class="interlanguage-link interwiki-ar"><a href="https://ar.wikipedia.org/wiki/%D8%A5%D9%8A%D9%81%D9%84_(%D9%84%D8%BA%D8%A9_%D8%A8%D8%B1%D9%85%D8%AC%D8%A9)" title="إيفل (لغة برمجة) – Arabic" lang="ar" hreflang="ar" class="interlanguage-link-target">العربية</a></li><li class="interlanguage-link interwiki-an"><a href="https://an.wikipedia.org/wiki/Luengache_de_programaci%C3%B3n_Eiffel" title="Luengache de programación Eiffel – Aragonese" lang="an" hreflang="an" class="interlanguage-link-target">Aragonés</a></li><li class="interlanguage-link interwiki-ca"><a href="https://ca.wikipedia.org/wiki/Llenguatge_de_programaci%C3%B3_Eiffel" title="Llenguatge de programació Eiffel – Catalan" lang="ca" hreflang="ca" class="interlanguage-link-target">Català</a></li><li class="interlanguage-link interwiki-cs"><a href="https://cs.wikipedia.org/wiki/Eiffel_(programovac%C3%AD_jazyk)" title="Eiffel (programovací jazyk) – Czech" lang="cs" hreflang="cs" class="interlanguage-link-target">Čeština</a></li><li class="interlanguage-link interwiki-da"><a href="https://da.wikipedia.org/wiki/Eiffel_(programmeringssprog)" title="Eiffel (programmeringssprog) – Danish" lang="da" hreflang="da" class="interlanguage-link-target">Dansk</a></li><li class="interlanguage-link interwiki-de"><a href="https://de.wikipedia.org/wiki/Eiffel_(Programmiersprache)" title="Eiffel (Programmiersprache) – German" lang="de" hreflang="de" class="interlanguage-link-target">Deutsch</a></li><li class="interlanguage-link interwiki-es"><a href="https://es.wikipedia.org/wiki/Eiffel_(lenguaje_de_programaci%C3%B3n)" title="Eiffel (lenguaje de programación) – Spanish" lang="es" hreflang="es" class="interlanguage-link-target">Español</a></li><li class="interlanguage-link interwiki-eo"><a href="https://eo.wikipedia.org/wiki/Eiffel_(programlingvo)" title="Eiffel (programlingvo) – Esperanto" lang="eo" hreflang="eo" class="interlanguage-link-target">Esperanto</a></li><li class="interlanguage-link interwiki-fa"><a href="https://fa.wikipedia.org/wiki/%D8%A7%DB%8C%D9%81%D9%84_(%D8%B2%D8%A8%D8%A7%D9%86_%D8%A8%D8%B1%D9%86%D8%A7%D9%85%D9%87%E2%80%8C%D9%86%D9%88%DB%8C%D8%B3%DB%8C)" title="ایفل (زبان برنامه‌نویسی) – Persian" lang="fa" hreflang="fa" class="interlanguage-link-target">فارسی</a></li><li class="interlanguage-link interwiki-fr"><a href="https://fr.wikipedia.org/wiki/Eiffel_(langage)" title="Eiffel (langage) – French" lang="fr" hreflang="fr" class="interlanguage-link-target">Français</a></li><li class="interlanguage-link interwiki-gl"><a href="https://gl.wikipedia.org/wiki/Linguaxe_de_programaci%C3%B3n_Eiffel" title="Linguaxe de programación Eiffel – Galician" lang="gl" hreflang="gl" class="interlanguage-link-target">Galego</a></li><li class="interlanguage-link interwiki-ko"><a href="https://ko.wikipedia.org/wiki/%EC%97%90%ED%8E%A0_(%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D_%EC%96%B8%EC%96%B4)" title="에펠 (프로그래밍 언어) – Korean" lang="ko" hreflang="ko" class="interlanguage-link-target">한국어</a></li><li class="interlanguage-link interwiki-hr"><a href="https://hr.wikipedia.org/wiki/Eiffel_(programski_jezik)" title="Eiffel (programski jezik) – Croatian" lang="hr" hreflang="hr" class="interlanguage-link-target">Hrvatski</a></li><li class="interlanguage-link interwiki-it"><a href="https://it.wikipedia.org/wiki/Eiffel_(linguaggio)" title="Eiffel (linguaggio) – Italian" lang="it" hreflang="it" class="interlanguage-link-target">Italiano</a></li><li class="interlanguage-link interwiki-he"><a href="https://he.wikipedia.org/wiki/%D7%90%D7%99%D7%99%D7%A4%D7%9C_(%D7%A9%D7%A4%D7%AA_%D7%AA%D7%9B%D7%A0%D7%95%D7%AA)" title="אייפל (שפת תכנות) – Hebrew" lang="he" hreflang="he" class="interlanguage-link-target">עברית</a></li><li class="interlanguage-link interwiki-ka"><a href="https://ka.wikipedia.org/wiki/%E1%83%94%E1%83%98%E1%83%A4%E1%83%94%E1%83%9A%E1%83%98_(%E1%83%9E%E1%83%A0%E1%83%9D%E1%83%92%E1%83%A0%E1%83%90%E1%83%9B%E1%83%98%E1%83%A0%E1%83%94%E1%83%91%E1%83%98%E1%83%A1_%E1%83%94%E1%83%9C%E1%83%90)" title="ეიფელი (პროგრამირების ენა) – Georgian" lang="ka" hreflang="ka" class="interlanguage-link-target">ქართული</a></li><li class="interlanguage-link interwiki-hu"><a href="https://hu.wikipedia.org/wiki/Eiffel_(programoz%C3%A1si_nyelv)" title="Eiffel (programozási nyelv) – Hungarian" lang="hu" hreflang="hu" class="interlanguage-link-target">Magyar</a></li><li class="interlanguage-link interwiki-nl"><a href="https://nl.wikipedia.org/wiki/Eiffel_(programmeertaal)" title="Eiffel (programmeertaal) – Dutch" lang="nl" hreflang="nl" class="interlanguage-link-target">Nederlands</a></li><li class="interlanguage-link interwiki-ja"><a href="https://ja.wikipedia.org/wiki/Eiffel" title="Eiffel – Japanese" lang="ja" hreflang="ja" class="interlanguage-link-target">日本語</a></li><li class="interlanguage-link interwiki-no"><a href="https://no.wikipedia.org/wiki/Eiffel_(programmeringsspr%C3%A5k)" title="Eiffel (programmeringsspråk) – Norwegian" lang="no" hreflang="no" class="interlanguage-link-target">Norsk bokmål</a></li><li class="interlanguage-link interwiki-pl"><a href="https://pl.wikipedia.org/wiki/Eiffel_(j%C4%99zyk_programowania)" title="Eiffel (język programowania) – Polish" lang="pl" hreflang="pl" class="interlanguage-link-target">Polski</a></li><li class="interlanguage-link interwiki-pt"><a href="https://pt.wikipedia.org/wiki/Eiffel_(linguagem_de_programa%C3%A7%C3%A3o)" title="Eiffel (linguagem de programação) – Portuguese" lang="pt" hreflang="pt" class="interlanguage-link-target">Português</a></li><li class="interlanguage-link interwiki-ru"><a href="https://ru.wikipedia.org/wiki/Eiffel" title="Eiffel – Russian" lang="ru" hreflang="ru" class="interlanguage-link-target">Русский</a></li><li class="interlanguage-link interwiki-sk"><a href="https://sk.wikipedia.org/wiki/Eiffel_(programovac%C3%AD_jazyk)" title="Eiffel (programovací jazyk) – Slovak" lang="sk" hreflang="sk" class="interlanguage-link-target">Slovenčina</a></li><li class="interlanguage-link interwiki-sr"><a href="https://sr.wikipedia.org/wiki/%D0%90%D1%98%D1%84%D0%B5%D0%BB_(%D0%BF%D1%80%D0%BE%D0%B3%D1%80%D0%B0%D0%BC%D1%81%D0%BA%D0%B8_%D1%98%D0%B5%D0%B7%D0%B8%D0%BA)" title="Ајфел (програмски језик) – Serbian" lang="sr" hreflang="sr" class="interlanguage-link-target">Српски / srpski</a></li><li class="interlanguage-link interwiki-fi"><a href="https://fi.wikipedia.org/wiki/Eiffel_(ohjelmointikieli)" title="Eiffel (ohjelmointikieli) – Finnish" lang="fi" hreflang="fi" class="interlanguage-link-target">Suomi</a></li><li class="interlanguage-link interwiki-uk"><a href="https://uk.wikipedia.org/wiki/Eiffel" title="Eiffel – Ukrainian" lang="uk" hreflang="uk" class="interlanguage-link-target">Українська</a></li><li class="interlanguage-link interwiki-zh"><a href="https://zh.wikipedia.org/wiki/Eiffel" title="Eiffel – Chinese" lang="zh" hreflang="zh" class="interlanguage-link-target">中文</a></li>					</ul>
				<div class='after-portlet after-portlet-lang'><span class="wb-langlinks-edit wb-langlinks-link"><a href="https://www.wikidata.org/wiki/Q732089#sitelinks-wikipedia" title="Edit interlanguage links" class="wbc-editpage">Edit links</a></span></div>			</div>
		</div>
				</div>
		</div>
		<div id="footer" role="contentinfo">
							<ul id="footer-info">
											<li id="footer-info-lastmod"> This page was last modified on 3 January 2017, at 13:34.</li>
											<li id="footer-info-copyright">Text is available under the <a rel="license" href="//en.wikipedia.org/wiki/Wikipedia:Text_of_Creative_Commons_Attribution-ShareAlike_3.0_Unported_License">Creative Commons Attribution-ShareAlike License</a><a rel="license" href="//creativecommons.org/licenses/by-sa/3.0/" style="display:none;"></a>;
additional terms may apply.  By using this site, you agree to the <a href="//wikimediafoundation.org/wiki/Terms_of_Use">Terms of Use</a> and <a href="//wikimediafoundation.org/wiki/Privacy_policy">Privacy Policy</a>. Wikipedia® is a registered trademark of the <a href="//www.wikimediafoundation.org/">Wikimedia Foundation, Inc.</a>, a non-profit organization.</li>
									</ul>
							<ul id="footer-places">
											<li id="footer-places-privacy"><a href="https://wikimediafoundation.org/wiki/Privacy_policy" class="extiw" title="wmf:Privacy policy">Privacy policy</a></li>
											<li id="footer-places-about"><a href="/wiki/Wikipedia:About" title="Wikipedia:About">About Wikipedia</a></li>
											<li id="footer-places-disclaimer"><a href="/wiki/Wikipedia:General_disclaimer" title="Wikipedia:General disclaimer">Disclaimers</a></li>
											<li id="footer-places-contact"><a href="//en.wikipedia.org/wiki/Wikipedia:Contact_us">Contact Wikipedia</a></li>
											<li id="footer-places-developers"><a href="https://www.mediawiki.org/wiki/Special:MyLanguage/How_to_contribute">Developers</a></li>
											<li id="footer-places-cookiestatement"><a href="https://wikimediafoundation.org/wiki/Cookie_statement">Cookie statement</a></li>
											<li id="footer-places-mobileview"><a href="//en.m.wikipedia.org/w/index.php?title=Eiffel_(programming_language)&amp;mobileaction=toggle_view_mobile" class="noprint stopMobileRedirectToggle">Mobile view</a></li>
									</ul>
										<ul id="footer-icons" class="noprint">
											<li id="footer-copyrightico">
							<a href="https://wikimediafoundation.org/"><img src="/static/images/wikimedia-button.png" srcset="/static/images/wikimedia-button-1.5x.png 1.5x, /static/images/wikimedia-button-2x.png 2x" width="88" height="31" alt="Wikimedia Foundation"/></a>						</li>
											<li id="footer-poweredbyico">
							<a href="//www.mediawiki.org/"><img src="/static/images/poweredby_mediawiki_88x31.png" alt="Powered by MediaWiki" srcset="/static/images/poweredby_mediawiki_132x47.png 1.5x, /static/images/poweredby_mediawiki_176x62.png 2x" width="88" height="31"/></a>						</li>
									</ul>
						<div style="clear:both"></div>
		</div>
		<script>(window.RLQ=window.RLQ||[]).push(function(){mw.config.set({"wgPageParseReport":{"limitreport":{"cputime":"0.264","walltime":"0.336","ppvisitednodes":{"value":1535,"limit":1000000},"ppgeneratednodes":{"value":0,"limit":1500000},"postexpandincludesize":{"value":59537,"limit":2097152},"templateargumentsize":{"value":8041,"limit":2097152},"expansiondepth":{"value":11,"limit":40},"expensivefunctioncount":{"value":7,"limit":500},"entityaccesscount":{"value":1,"limit":400},"timingprofile":["100.00%  268.066      1 -total"," 31.98%   85.729      4 Template:Ambox"," 29.25%   78.404      1 Template:Reflist"," 25.98%   69.641      1 Template:Multiple_issues"," 14.45%   38.737      1 Template:Infobox_programming_language"," 12.69%   34.021      1 Template:Infobox"," 12.22%   32.759      1 Template:Cite_book","  9.19%   24.624      1 Template:Citation_needed","  8.21%   22.013      1 Template:Fix","  7.47%   20.017      1 Template:Lead_too_short"]},"scribunto":{"limitreport-timeusage":{"value":"0.105","limit":"10.000"},"limitreport-memusage":{"value":4319954,"limit":52428800}},"cachereport":{"origin":"mw1304","timestamp":"20170202065221","ttl":2592000,"transientcontent":false}}});});</script><script>(window.RLQ=window.RLQ||[]).push(function(){mw.config.set({"wgBackendResponseTime":76,"wgHostname":"mw1219"});});</script>
	</body>
</html>
